// this file is auto generated by endoqa kotlin ffi, modify it with caution
package lib.wgpu

import java.lang.foreign.*
import java.lang.invoke.MethodHandle
import java.lang.invoke.VarHandle

/**
 * Chained in [WGPUSurfaceDescriptor] to make an [WGPUSurface] wrapping an [XCB](https://xcb.freedesktop.org/) [xcb_window_t].
 */
@JvmInline
public value class WGPUSurfaceSourceXCBWindow(
    public val `$mem`: MemorySegment,
) {
    public var chain: WGPUChainedStruct
        get() = WGPUChainedStruct(chainHandle.invokeExact(this.`$mem`, 0L) as MemorySegment)
        set(`value`) {
            MemorySegment.copy(value.`$mem`, 0L, this.chain.`$mem`, 0L, WGPUChainedStruct.layout.byteSize())
        }

    /**
     * The [xcb_connection_t] for the connection to the X server.
     */
    public var connection: Pointer<Unit>
        get() = connectionHandle.get(this.`$mem`, 0L) as MemorySegment
        set(`value`) {
            connectionHandle.set(this.`$mem`, 0L, value)
        }

    /**
     * The [xcb_window_t] for the window that will be wrapped by the [WGPUSurface].
     */
    public var window: UInt
        get() = (windowHandle.get(this.`$mem`, 0L) as Int).toUInt()
        set(`value`) {
            windowHandle.set(this.`$mem`, 0L, value.toInt())
        }

    public constructor(gc: Boolean) : this(kotlin.run {
        require(gc) { "Do not call this if gc is not want" }
        Arena.ofAuto().allocate(layout)
    })

    public companion object {
        public val layout: StructLayout = MemoryLayout.structLayout(
            WGPUChainedStruct.layout.withName("chain"),
            `$RuntimeHelper`.POINTER.withName("connection"),
            ValueLayout.JAVA_INT.withName("window"),
            MemoryLayout.paddingLayout(4),
        ).withName("WGPUSurfaceSourceXCBWindow")

        @JvmField
        public val chainHandle: MethodHandle =
            layout.sliceHandle(MemoryLayout.PathElement.groupElement("chain"))

        @JvmField
        public val connectionHandle: VarHandle =
            layout.varHandle(MemoryLayout.PathElement.groupElement("connection"))

        @JvmField
        public val windowHandle: VarHandle =
            layout.varHandle(MemoryLayout.PathElement.groupElement("window"))

        @JvmStatic
        public fun allocate(alloc: SegmentAllocator): WGPUSurfaceSourceXCBWindow =
            WGPUSurfaceSourceXCBWindow(alloc.allocate(layout))
    }
}
