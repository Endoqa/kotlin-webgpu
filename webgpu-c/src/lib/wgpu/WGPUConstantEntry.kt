// this file is auto generated by endoqa kotlin ffi, modify it with caution
package lib.wgpu

import java.lang.foreign.*
import java.lang.invoke.MethodHandle
import java.lang.invoke.VarHandle

/**
 * TODO
 */
@JvmInline
public value class WGPUConstantEntry(
    public val `$mem`: MemorySegment,
) {
    public var nextInChain: Pointer<WGPUChainedStruct>
        get() = nextInChainHandle.get(this.`$mem`, 0L) as MemorySegment
        set(`value`) {
            nextInChainHandle.set(this.`$mem`, 0L, value)
        }

    /**
     * TODO
     */
    public var key: WGPUStringView
        get() = WGPUStringView(keyHandle.invokeExact(this.`$mem`, 0L) as MemorySegment)
        set(`value`) {
            MemorySegment.copy(value.`$mem`, 0L, this.key.`$mem`, 0L, WGPUStringView.layout.byteSize())
        }

    /**
     * Represents a WGSL numeric or boolean value using [DoubleAsSupertype](https://webgpu-native.github.io/webgpu-headers/FloatingPointNumbers.html#DoubleAsSupertype).
     *
     * If non-finite, produces a [NonFiniteFloatValueError](https://webgpu-native.github.io/webgpu-headers/FloatingPointNumbers.html#NonFiniteFloatValueError).
     */
    public var `value`: Double
        get() = valueHandle.get(this.`$mem`, 0L) as Double
        set(`value`) {
            valueHandle.set(this.`$mem`, 0L, value)
        }

    public constructor(gc: Boolean) : this(kotlin.run {
        require(gc) { "Do not call this if gc is not want" }
        Arena.ofAuto().allocate(layout)
    })

    public companion object {
        public val layout: StructLayout = MemoryLayout.structLayout(
            `$RuntimeHelper`.POINTER.withName("nextInChain"),
            WGPUStringView.layout.withName("key"),
            ValueLayout.JAVA_DOUBLE.withName("value"),
        ).withName("WGPUConstantEntry")

        @JvmField
        public val nextInChainHandle: VarHandle =
            layout.varHandle(MemoryLayout.PathElement.groupElement("nextInChain"))

        @JvmField
        public val keyHandle: MethodHandle =
            layout.sliceHandle(MemoryLayout.PathElement.groupElement("key"))

        @JvmField
        public val valueHandle: VarHandle =
            layout.varHandle(MemoryLayout.PathElement.groupElement("value"))

        @JvmStatic
        public fun allocate(alloc: SegmentAllocator): WGPUConstantEntry =
            WGPUConstantEntry(alloc.allocate(layout))
    }
}
