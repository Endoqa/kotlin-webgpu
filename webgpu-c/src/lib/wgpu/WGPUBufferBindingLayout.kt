// this file is auto generated by endoqa kotlin ffi, modify it with caution
package lib.wgpu

import java.lang.foreign.*
import java.lang.invoke.VarHandle

@JvmInline
public value class WGPUBufferBindingLayout(
    public val `$mem`: MemorySegment,
) {
    public var nextInChain: Pointer<WGPUChainedStruct>
        get() = nextInChainHandle.get(this.`$mem`, 0L) as MemorySegment
        set(`value`) {
            nextInChainHandle.set(this.`$mem`, 0L, value)
        }

    public var type: WGPUBufferBindingType
        get() = WGPUBufferBindingType.fromInt(
            typeHandle.get(this.`$mem`, 0L) as
                    Int
        )
        set(`value`) {
            typeHandle.set(this.`$mem`, 0L, value.value)
        }

    public var hasDynamicOffset: WGPUBool
        get() = (hasDynamicOffsetHandle.get(this.`$mem`, 0L) as Int).toUInt()
        set(`value`) {
            hasDynamicOffsetHandle.set(this.`$mem`, 0L, value.toInt())
        }

    public var minBindingSize: ULong
        get() = (minBindingSizeHandle.get(this.`$mem`, 0L) as Long).toULong()
        set(`value`) {
            minBindingSizeHandle.set(this.`$mem`, 0L, value.toLong())
        }

    public constructor(gc: Boolean) : this(kotlin.run {
        require(gc) { "Do not call this if gc is not want" }
        Arena.ofAuto().allocate(layout)
    })

    public companion object {
        public val layout: StructLayout = MemoryLayout.structLayout(
            `$RuntimeHelper`.POINTER.withName("nextInChain"),
            ValueLayout.JAVA_INT.withName("type"),
            ValueLayout.JAVA_INT.withName("hasDynamicOffset"),
            ValueLayout.JAVA_LONG.withName("minBindingSize"),
        ).withName("WGPUBufferBindingLayout")

        @JvmField
        public val nextInChainHandle: VarHandle =
            layout.varHandle(MemoryLayout.PathElement.groupElement("nextInChain"))

        @JvmField
        public val typeHandle: VarHandle =
            layout.varHandle(MemoryLayout.PathElement.groupElement("type"))

        @JvmField
        public val hasDynamicOffsetHandle: VarHandle =
            layout.varHandle(MemoryLayout.PathElement.groupElement("hasDynamicOffset"))

        @JvmField
        public val minBindingSizeHandle: VarHandle =
            layout.varHandle(MemoryLayout.PathElement.groupElement("minBindingSize"))

        @JvmStatic
        public fun allocate(alloc: SegmentAllocator): WGPUBufferBindingLayout =
            WGPUBufferBindingLayout(alloc.allocate(layout))
    }
}
