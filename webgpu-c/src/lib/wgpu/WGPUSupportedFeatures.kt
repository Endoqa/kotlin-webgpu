// this file is auto generated by endoqa kotlin ffi, modify it with caution
package lib.wgpu

import java.lang.foreign.*
import java.lang.invoke.VarHandle

/**
 * TODO
 */
@JvmInline
public value class WGPUSupportedFeatures(
    public val `$mem`: MemorySegment,
) {
    /**
     * Array count for features.
     */
    public var featureCount: ULong
        get() = (featureCountHandle.get(this.`$mem`, 0L) as Long).toULong()
        set(`value`) {
            featureCountHandle.set(this.`$mem`, 0L, value.toLong())
        }

    /**
     * TODO
     */
    public var features: Pointer<WGPUFeatureName>
        get() = featuresHandle.get(this.`$mem`, 0L) as MemorySegment
        set(`value`) {
            featuresHandle.set(this.`$mem`, 0L, value)
        }

    public constructor(gc: Boolean) : this(kotlin.run {
        require(gc) { "Do not call this if gc is not want" }
        Arena.ofAuto().allocate(layout)
    })

    public companion object {
        public val layout: StructLayout = MemoryLayout.structLayout(
            ValueLayout.JAVA_LONG.withName("featureCount"),
            `$RuntimeHelper`.POINTER.withName("features"),
        ).withName("WGPUSupportedFeatures")

        @JvmField
        public val featureCountHandle: VarHandle =
            layout.varHandle(MemoryLayout.PathElement.groupElement("featureCount"))

        @JvmField
        public val featuresHandle: VarHandle =
            layout.varHandle(MemoryLayout.PathElement.groupElement("features"))

        @JvmStatic
        public fun allocate(alloc: SegmentAllocator): WGPUSupportedFeatures =
            WGPUSupportedFeatures(alloc.allocate(layout))
    }
}
