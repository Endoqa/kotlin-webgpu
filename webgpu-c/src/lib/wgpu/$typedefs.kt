// this file is auto generated by endoqa kotlin ffi, modify it with caution
package lib.wgpu

public typealias WGPUFlags = ULong

public typealias WGPUBool = UInt

public typealias WGPUAdapter = Pointer<WGPUAdapterImpl>

public typealias WGPUBindGroup = Pointer<WGPUBindGroupImpl>

public typealias WGPUBindGroupLayout = Pointer<WGPUBindGroupLayoutImpl>

public typealias WGPUBuffer = Pointer<WGPUBufferImpl>

public typealias WGPUCommandBuffer = Pointer<WGPUCommandBufferImpl>

public typealias WGPUCommandEncoder = Pointer<WGPUCommandEncoderImpl>

public typealias WGPUComputePassEncoder = Pointer<WGPUComputePassEncoderImpl>

public typealias WGPUComputePipeline = Pointer<WGPUComputePipelineImpl>

public typealias WGPUDevice = Pointer<WGPUDeviceImpl>

public typealias WGPUInstance = Pointer<WGPUInstanceImpl>

public typealias WGPUPipelineLayout = Pointer<WGPUPipelineLayoutImpl>

public typealias WGPUQuerySet = Pointer<WGPUQuerySetImpl>

public typealias WGPUQueue = Pointer<WGPUQueueImpl>

public typealias WGPURenderBundle = Pointer<WGPURenderBundleImpl>

public typealias WGPURenderBundleEncoder = Pointer<WGPURenderBundleEncoderImpl>

public typealias WGPURenderPassEncoder = Pointer<WGPURenderPassEncoderImpl>

public typealias WGPURenderPipeline = Pointer<WGPURenderPipelineImpl>

public typealias WGPUSampler = Pointer<WGPUSamplerImpl>

public typealias WGPUShaderModule = Pointer<WGPUShaderModuleImpl>

public typealias WGPUSurface = Pointer<WGPUSurfaceImpl>

public typealias WGPUTexture = Pointer<WGPUTextureImpl>

public typealias WGPUTextureView = Pointer<WGPUTextureViewImpl>

public typealias WGPUBufferUsage = WGPUFlags

public typealias WGPUColorWriteMask = WGPUFlags

public typealias WGPUMapMode = WGPUFlags

public typealias WGPUShaderStage = WGPUFlags

public typealias WGPUTextureUsage = WGPUFlags

public typealias WGPUProc = Pointer<() -> Unit>

public typealias WGPUBufferMapCallback = Pointer<(
    status: WGPUMapAsyncStatus,
    message: WGPUStringView,
    userdata1: Pointer<Unit>,
    userdata2: Pointer<Unit>,
) -> Unit>

public typealias WGPUCompilationInfoCallback = Pointer<(
    status: WGPUCompilationInfoRequestStatus,
    compilationInfo: Pointer<WGPUCompilationInfo>,
    userdata1: Pointer<Unit>,
    userdata2: Pointer<Unit>,
) -> Unit>

public typealias WGPUCreateComputePipelineAsyncCallback = Pointer<(
    status: WGPUCreatePipelineAsyncStatus,
    pipeline: WGPUComputePipeline,
    message: WGPUStringView,
    userdata1: Pointer<Unit>,
    userdata2: Pointer<Unit>,
) -> Unit>

public typealias WGPUCreateRenderPipelineAsyncCallback = Pointer<(
    status: WGPUCreatePipelineAsyncStatus,
    pipeline: WGPURenderPipeline,
    message: WGPUStringView,
    userdata1: Pointer<Unit>,
    userdata2: Pointer<Unit>,
) -> Unit>

public typealias WGPUDeviceLostCallback = Pointer<(
    device: Pointer<WGPUDevice>,
    reason: WGPUDeviceLostReason,
    message: WGPUStringView,
    userdata1: Pointer<Unit>,
    userdata2: Pointer<Unit>,
) -> Unit>

public typealias WGPUPopErrorScopeCallback = Pointer<(
    status: WGPUPopErrorScopeStatus,
    type: WGPUErrorType,
    message: WGPUStringView,
    userdata1: Pointer<Unit>,
    userdata2: Pointer<Unit>,
) -> Unit>

public typealias WGPUQueueWorkDoneCallback = Pointer<(
    status: WGPUQueueWorkDoneStatus,
    userdata1: Pointer<Unit>,
    userdata2: Pointer<Unit>,
) -> Unit>

public typealias WGPURequestAdapterCallback = Pointer<(
    status: WGPURequestAdapterStatus,
    adapter: WGPUAdapter,
    message: WGPUStringView,
    userdata1: Pointer<Unit>,
    userdata2: Pointer<Unit>,
) -> Unit>

public typealias WGPURequestDeviceCallback = Pointer<(
    status: WGPURequestDeviceStatus,
    device: WGPUDevice,
    message: WGPUStringView,
    userdata1: Pointer<Unit>,
    userdata2: Pointer<Unit>,
) -> Unit>

public typealias WGPUUncapturedErrorCallback = Pointer<(
    device: Pointer<WGPUDevice>,
    type: WGPUErrorType,
    message: WGPUStringView,
    userdata1: Pointer<Unit>,
    userdata2: Pointer<Unit>,
) -> Unit>


public typealias WGPUProcCreateInstance =
        Pointer<(descriptor: Pointer<WGPUInstanceDescriptor>) -> WGPUInstance>

public typealias WGPUProcGetInstanceCapabilities =
        Pointer<(capabilities: Pointer<WGPUInstanceCapabilities>) -> WGPUStatus>

public typealias WGPUProcGetProcAddress = Pointer<(procName: WGPUStringView) -> WGPUProc>

public typealias WGPUProcAdapterGetFeatures = Pointer<(
    adapter: WGPUAdapter,
    features: Pointer<WGPUSupportedFeatures>
) -> Unit>

public typealias WGPUProcAdapterGetInfo = Pointer<(
    adapter: WGPUAdapter,
    info: Pointer<WGPUAdapterInfo>
) -> WGPUStatus>

public typealias WGPUProcAdapterGetLimits = Pointer<(
    adapter: WGPUAdapter,
    limits: Pointer<WGPULimits>
) -> WGPUStatus>

public typealias WGPUProcAdapterHasFeature = Pointer<(
    adapter: WGPUAdapter,
    feature: WGPUFeatureName
) -> WGPUBool>

public typealias WGPUProcAdapterRequestDevice = Pointer<(
    adapter: WGPUAdapter,
    descriptor: Pointer<WGPUDeviceDescriptor>,
    callbackInfo: WGPURequestDeviceCallbackInfo,
) -> WGPUFuture>

public typealias WGPUProcAdapterAddRef = Pointer<(adapter: WGPUAdapter) -> Unit>

public typealias WGPUProcAdapterRelease = Pointer<(adapter: WGPUAdapter) -> Unit>

public typealias WGPUProcAdapterInfoFreeMembers = Pointer<(adapterInfo: WGPUAdapterInfo) -> Unit>

public typealias WGPUProcBindGroupSetLabel = Pointer<(
    bindGroup: WGPUBindGroup,
    label: WGPUStringView
) -> Unit>

public typealias WGPUProcBindGroupAddRef = Pointer<(bindGroup: WGPUBindGroup) -> Unit>

public typealias WGPUProcBindGroupRelease = Pointer<(bindGroup: WGPUBindGroup) -> Unit>

public typealias WGPUProcBindGroupLayoutSetLabel = Pointer<(
    bindGroupLayout: WGPUBindGroupLayout,
    label: WGPUStringView
) -> Unit>

public typealias WGPUProcBindGroupLayoutAddRef =
        Pointer<(bindGroupLayout: WGPUBindGroupLayout) -> Unit>

public typealias WGPUProcBindGroupLayoutRelease =
        Pointer<(bindGroupLayout: WGPUBindGroupLayout) -> Unit>

public typealias WGPUProcBufferDestroy = Pointer<(buffer: WGPUBuffer) -> Unit>

public typealias WGPUProcBufferGetConstMappedRange = Pointer<(
    buffer: WGPUBuffer,
    offset: ULong,
    size: ULong,
) -> Pointer<Unit>>

public typealias WGPUProcBufferGetMapState = Pointer<(buffer: WGPUBuffer) -> WGPUBufferMapState>

public typealias WGPUProcBufferGetMappedRange = Pointer<(
    buffer: WGPUBuffer,
    offset: ULong,
    size: ULong,
) -> Pointer<Unit>>

public typealias WGPUProcBufferGetSize = Pointer<(buffer: WGPUBuffer) -> ULong>

public typealias WGPUProcBufferGetUsage = Pointer<(buffer: WGPUBuffer) -> WGPUBufferUsage>

public typealias WGPUProcBufferMapAsync = Pointer<(
    buffer: WGPUBuffer,
    mode: WGPUMapMode,
    offset: ULong,
    size: ULong,
    callbackInfo: WGPUBufferMapCallbackInfo,
) -> WGPUFuture>

public typealias WGPUProcBufferSetLabel = Pointer<(
    buffer: WGPUBuffer,
    label: WGPUStringView
) -> Unit>

public typealias WGPUProcBufferUnmap = Pointer<(buffer: WGPUBuffer) -> Unit>

public typealias WGPUProcBufferAddRef = Pointer<(buffer: WGPUBuffer) -> Unit>

public typealias WGPUProcBufferRelease = Pointer<(buffer: WGPUBuffer) -> Unit>

public typealias WGPUProcCommandBufferSetLabel = Pointer<(
    commandBuffer: WGPUCommandBuffer,
    label: WGPUStringView
) -> Unit>

public typealias WGPUProcCommandBufferAddRef = Pointer<(commandBuffer: WGPUCommandBuffer) -> Unit>

public typealias WGPUProcCommandBufferRelease = Pointer<(commandBuffer: WGPUCommandBuffer) -> Unit>

public typealias WGPUProcCommandEncoderBeginComputePass =
        Pointer<(
            commandEncoder: WGPUCommandEncoder,
            descriptor: Pointer<WGPUComputePassDescriptor>
        ) -> WGPUComputePassEncoder>

public typealias WGPUProcCommandEncoderBeginRenderPass =
        Pointer<(
            commandEncoder: WGPUCommandEncoder,
            descriptor: Pointer<WGPURenderPassDescriptor>
        ) -> WGPURenderPassEncoder>

public typealias WGPUProcCommandEncoderClearBuffer = Pointer<(
    commandEncoder: WGPUCommandEncoder,
    buffer: WGPUBuffer,
    offset: ULong,
    size: ULong,
) -> Unit>

public typealias WGPUProcCommandEncoderCopyBufferToBuffer = Pointer<(
    commandEncoder: WGPUCommandEncoder,
    source: WGPUBuffer,
    sourceOffset: ULong,
    destination: WGPUBuffer,
    destinationOffset: ULong,
    size: ULong,
) -> Unit>

public typealias WGPUProcCommandEncoderCopyBufferToTexture = Pointer<(
    commandEncoder: WGPUCommandEncoder,
    source: Pointer<WGPUTexelCopyBufferInfo>,
    destination: Pointer<WGPUTexelCopyTextureInfo>,
    copySize: Pointer<WGPUExtent3D>,
) -> Unit>

public typealias WGPUProcCommandEncoderCopyTextureToBuffer = Pointer<(
    commandEncoder: WGPUCommandEncoder,
    source: Pointer<WGPUTexelCopyTextureInfo>,
    destination: Pointer<WGPUTexelCopyBufferInfo>,
    copySize: Pointer<WGPUExtent3D>,
) -> Unit>

public typealias WGPUProcCommandEncoderCopyTextureToTexture = Pointer<(
    commandEncoder: WGPUCommandEncoder,
    source: Pointer<WGPUTexelCopyTextureInfo>,
    destination: Pointer<WGPUTexelCopyTextureInfo>,
    copySize: Pointer<WGPUExtent3D>,
) -> Unit>

public typealias WGPUProcCommandEncoderFinish = Pointer<(
    commandEncoder: WGPUCommandEncoder,
    descriptor: Pointer<WGPUCommandBufferDescriptor>
) -> WGPUCommandBuffer>

public typealias WGPUProcCommandEncoderInsertDebugMarker =
        Pointer<(commandEncoder: WGPUCommandEncoder, markerLabel: WGPUStringView) -> Unit>

public typealias WGPUProcCommandEncoderPopDebugGroup =
        Pointer<(commandEncoder: WGPUCommandEncoder) -> Unit>

public typealias WGPUProcCommandEncoderPushDebugGroup = Pointer<(
    commandEncoder: WGPUCommandEncoder,
    groupLabel: WGPUStringView
) -> Unit>

public typealias WGPUProcCommandEncoderResolveQuerySet = Pointer<(
    commandEncoder: WGPUCommandEncoder,
    querySet: WGPUQuerySet,
    firstQuery: UInt,
    queryCount: UInt,
    destination: WGPUBuffer,
    destinationOffset: ULong,
) -> Unit>

public typealias WGPUProcCommandEncoderSetLabel = Pointer<(
    commandEncoder: WGPUCommandEncoder,
    label: WGPUStringView
) -> Unit>

public typealias WGPUProcCommandEncoderWriteTimestamp = Pointer<(
    commandEncoder: WGPUCommandEncoder,
    querySet: WGPUQuerySet,
    queryIndex: UInt,
) -> Unit>

public typealias WGPUProcCommandEncoderAddRef =
        Pointer<(commandEncoder: WGPUCommandEncoder) -> Unit>

public typealias WGPUProcCommandEncoderRelease =
        Pointer<(commandEncoder: WGPUCommandEncoder) -> Unit>

public typealias WGPUProcComputePassEncoderDispatchWorkgroups = Pointer<(
    computePassEncoder: WGPUComputePassEncoder,
    workgroupCountX: UInt,
    workgroupCountY: UInt,
    workgroupCountZ: UInt,
) -> Unit>

public typealias WGPUProcComputePassEncoderDispatchWorkgroupsIndirect = Pointer<(
    computePassEncoder: WGPUComputePassEncoder,
    indirectBuffer: WGPUBuffer,
    indirectOffset: ULong,
) -> Unit>

public typealias WGPUProcComputePassEncoderEnd =
        Pointer<(computePassEncoder: WGPUComputePassEncoder) -> Unit>

public typealias WGPUProcComputePassEncoderInsertDebugMarker =
        Pointer<(computePassEncoder: WGPUComputePassEncoder, markerLabel: WGPUStringView) -> Unit>

public typealias WGPUProcComputePassEncoderPopDebugGroup =
        Pointer<(computePassEncoder: WGPUComputePassEncoder) -> Unit>

public typealias WGPUProcComputePassEncoderPushDebugGroup =
        Pointer<(computePassEncoder: WGPUComputePassEncoder, groupLabel: WGPUStringView) -> Unit>

public typealias WGPUProcComputePassEncoderSetBindGroup = Pointer<(
    computePassEncoder: WGPUComputePassEncoder,
    groupIndex: UInt,
    group: WGPUBindGroup,
    dynamicOffsetCount: ULong,
    dynamicOffsets: Pointer<UInt>,
) -> Unit>

public typealias WGPUProcComputePassEncoderSetLabel =
        Pointer<(computePassEncoder: WGPUComputePassEncoder, label: WGPUStringView) -> Unit>

public typealias WGPUProcComputePassEncoderSetPipeline =
        Pointer<(computePassEncoder: WGPUComputePassEncoder, pipeline: WGPUComputePipeline) -> Unit>

public typealias WGPUProcComputePassEncoderAddRef =
        Pointer<(computePassEncoder: WGPUComputePassEncoder) -> Unit>

public typealias WGPUProcComputePassEncoderRelease =
        Pointer<(computePassEncoder: WGPUComputePassEncoder) -> Unit>

public typealias WGPUProcComputePipelineGetBindGroupLayout =
        Pointer<(computePipeline: WGPUComputePipeline, groupIndex: UInt) -> WGPUBindGroupLayout>

public typealias WGPUProcComputePipelineSetLabel = Pointer<(
    computePipeline: WGPUComputePipeline,
    label: WGPUStringView
) -> Unit>

public typealias WGPUProcComputePipelineAddRef =
        Pointer<(computePipeline: WGPUComputePipeline) -> Unit>

public typealias WGPUProcComputePipelineRelease =
        Pointer<(computePipeline: WGPUComputePipeline) -> Unit>

public typealias WGPUProcDeviceCreateBindGroup = Pointer<(
    device: WGPUDevice,
    descriptor: Pointer<WGPUBindGroupDescriptor>
) -> WGPUBindGroup>

public typealias WGPUProcDeviceCreateBindGroupLayout = Pointer<(
    device: WGPUDevice,
    descriptor: Pointer<WGPUBindGroupLayoutDescriptor>
) -> WGPUBindGroupLayout>

public typealias WGPUProcDeviceCreateBuffer = Pointer<(
    device: WGPUDevice,
    descriptor: Pointer<WGPUBufferDescriptor>
) -> WGPUBuffer>

public typealias WGPUProcDeviceCreateCommandEncoder = Pointer<(
    device: WGPUDevice,
    descriptor: Pointer<WGPUCommandEncoderDescriptor>
) -> WGPUCommandEncoder>

public typealias WGPUProcDeviceCreateComputePipeline = Pointer<(
    device: WGPUDevice,
    descriptor: Pointer<WGPUComputePipelineDescriptor>
) -> WGPUComputePipeline>

public typealias WGPUProcDeviceCreateComputePipelineAsync = Pointer<(
    device: WGPUDevice,
    descriptor: Pointer<WGPUComputePipelineDescriptor>,
    callbackInfo: WGPUCreateComputePipelineAsyncCallbackInfo,
) -> WGPUFuture>

public typealias WGPUProcDeviceCreatePipelineLayout = Pointer<(
    device: WGPUDevice,
    descriptor: Pointer<WGPUPipelineLayoutDescriptor>
) -> WGPUPipelineLayout>

public typealias WGPUProcDeviceCreateQuerySet = Pointer<(
    device: WGPUDevice,
    descriptor: Pointer<WGPUQuerySetDescriptor>
) -> WGPUQuerySet>

public typealias WGPUProcDeviceCreateRenderBundleEncoder = Pointer<(
    device: WGPUDevice,
    descriptor: Pointer<WGPURenderBundleEncoderDescriptor>
) -> WGPURenderBundleEncoder>

public typealias WGPUProcDeviceCreateRenderPipeline = Pointer<(
    device: WGPUDevice,
    descriptor: Pointer<WGPURenderPipelineDescriptor>
) -> WGPURenderPipeline>

public typealias WGPUProcDeviceCreateRenderPipelineAsync = Pointer<(
    device: WGPUDevice,
    descriptor: Pointer<WGPURenderPipelineDescriptor>,
    callbackInfo: WGPUCreateRenderPipelineAsyncCallbackInfo,
) -> WGPUFuture>

public typealias WGPUProcDeviceCreateSampler = Pointer<(
    device: WGPUDevice,
    descriptor: Pointer<WGPUSamplerDescriptor>
) -> WGPUSampler>

public typealias WGPUProcDeviceCreateShaderModule = Pointer<(
    device: WGPUDevice,
    descriptor: Pointer<WGPUShaderModuleDescriptor>
) -> WGPUShaderModule>

public typealias WGPUProcDeviceCreateTexture = Pointer<(
    device: WGPUDevice,
    descriptor: Pointer<WGPUTextureDescriptor>
) -> WGPUTexture>

public typealias WGPUProcDeviceDestroy = Pointer<(device: WGPUDevice) -> Unit>

public typealias WGPUProcDeviceGetAdapterInfo = Pointer<(
    device: WGPUDevice,
    adapterInfo: Pointer<WGPUAdapterInfo>
) -> WGPUStatus>

public typealias WGPUProcDeviceGetFeatures = Pointer<(
    device: WGPUDevice,
    features: Pointer<WGPUSupportedFeatures>
) -> Unit>

public typealias WGPUProcDeviceGetLimits = Pointer<(
    device: WGPUDevice,
    limits: Pointer<WGPULimits>
) -> WGPUStatus>

public typealias WGPUProcDeviceGetLostFuture = Pointer<(device: WGPUDevice) -> WGPUFuture>

public typealias WGPUProcDeviceGetQueue = Pointer<(device: WGPUDevice) -> WGPUQueue>

public typealias WGPUProcDeviceHasFeature = Pointer<(
    device: WGPUDevice,
    feature: WGPUFeatureName
) -> WGPUBool>

public typealias WGPUProcDevicePopErrorScope = Pointer<(
    device: WGPUDevice,
    callbackInfo: WGPUPopErrorScopeCallbackInfo
) -> WGPUFuture>

public typealias WGPUProcDevicePushErrorScope = Pointer<(
    device: WGPUDevice,
    filter: WGPUErrorFilter
) -> Unit>

public typealias WGPUProcDeviceSetLabel = Pointer<(
    device: WGPUDevice,
    label: WGPUStringView
) -> Unit>

public typealias WGPUProcDeviceAddRef = Pointer<(device: WGPUDevice) -> Unit>

public typealias WGPUProcDeviceRelease = Pointer<(device: WGPUDevice) -> Unit>

public typealias WGPUProcInstanceCreateSurface = Pointer<(
    instance: WGPUInstance,
    descriptor: Pointer<WGPUSurfaceDescriptor>
) -> WGPUSurface>

public typealias WGPUProcInstanceGetWGSLLanguageFeatures = Pointer<(
    instance: WGPUInstance,
    features: Pointer<WGPUSupportedWGSLLanguageFeatures>
) -> WGPUStatus>

public typealias WGPUProcInstanceHasWGSLLanguageFeature = Pointer<(
    instance: WGPUInstance,
    feature: WGPUWGSLLanguageFeatureName
) -> WGPUBool>

public typealias WGPUProcInstanceProcessEvents = Pointer<(instance: WGPUInstance) -> Unit>

public typealias WGPUProcInstanceRequestAdapter = Pointer<(
    instance: WGPUInstance,
    options: Pointer<WGPURequestAdapterOptions>,
    callbackInfo: WGPURequestAdapterCallbackInfo,
) -> WGPUFuture>

public typealias WGPUProcInstanceWaitAny = Pointer<(
    instance: WGPUInstance,
    futureCount: ULong,
    futures: Pointer<WGPUFutureWaitInfo>,
    timeoutNS: ULong,
) -> WGPUWaitStatus>

public typealias WGPUProcInstanceAddRef = Pointer<(instance: WGPUInstance) -> Unit>

public typealias WGPUProcInstanceRelease = Pointer<(instance: WGPUInstance) -> Unit>

public typealias WGPUProcPipelineLayoutSetLabel = Pointer<(
    pipelineLayout: WGPUPipelineLayout,
    label: WGPUStringView
) -> Unit>

public typealias WGPUProcPipelineLayoutAddRef =
        Pointer<(pipelineLayout: WGPUPipelineLayout) -> Unit>

public typealias WGPUProcPipelineLayoutRelease =
        Pointer<(pipelineLayout: WGPUPipelineLayout) -> Unit>

public typealias WGPUProcQuerySetDestroy = Pointer<(querySet: WGPUQuerySet) -> Unit>

public typealias WGPUProcQuerySetGetCount = Pointer<(querySet: WGPUQuerySet) -> UInt>

public typealias WGPUProcQuerySetGetType = Pointer<(querySet: WGPUQuerySet) -> WGPUQueryType>

public typealias WGPUProcQuerySetSetLabel = Pointer<(
    querySet: WGPUQuerySet,
    label: WGPUStringView
) -> Unit>

public typealias WGPUProcQuerySetAddRef = Pointer<(querySet: WGPUQuerySet) -> Unit>

public typealias WGPUProcQuerySetRelease = Pointer<(querySet: WGPUQuerySet) -> Unit>

public typealias WGPUProcQueueOnSubmittedWorkDone = Pointer<(
    queue: WGPUQueue,
    callbackInfo: WGPUQueueWorkDoneCallbackInfo
) -> WGPUFuture>

public typealias WGPUProcQueueSetLabel = Pointer<(queue: WGPUQueue, label: WGPUStringView) -> Unit>

public typealias WGPUProcQueueSubmit = Pointer<(
    queue: WGPUQueue,
    commandCount: ULong,
    commands: Pointer<WGPUCommandBuffer>,
) -> Unit>

public typealias WGPUProcQueueWriteBuffer = Pointer<(
    queue: WGPUQueue,
    buffer: WGPUBuffer,
    bufferOffset: ULong,
    `data`: Pointer<Unit>,
    size: ULong,
) -> Unit>

public typealias WGPUProcQueueWriteTexture = Pointer<(
    queue: WGPUQueue,
    destination: Pointer<WGPUTexelCopyTextureInfo>,
    `data`: Pointer<Unit>,
    dataSize: ULong,
    dataLayout: Pointer<WGPUTexelCopyBufferLayout>,
    writeSize: Pointer<WGPUExtent3D>,
) -> Unit>

public typealias WGPUProcQueueAddRef = Pointer<(queue: WGPUQueue) -> Unit>

public typealias WGPUProcQueueRelease = Pointer<(queue: WGPUQueue) -> Unit>

public typealias WGPUProcRenderBundleSetLabel = Pointer<(
    renderBundle: WGPURenderBundle,
    label: WGPUStringView
) -> Unit>

public typealias WGPUProcRenderBundleAddRef = Pointer<(renderBundle: WGPURenderBundle) -> Unit>

public typealias WGPUProcRenderBundleRelease = Pointer<(renderBundle: WGPURenderBundle) -> Unit>

public typealias WGPUProcRenderBundleEncoderDraw = Pointer<(
    renderBundleEncoder: WGPURenderBundleEncoder,
    vertexCount: UInt,
    instanceCount: UInt,
    firstVertex: UInt,
    firstInstance: UInt,
) -> Unit>

public typealias WGPUProcRenderBundleEncoderDrawIndexed = Pointer<(
    renderBundleEncoder: WGPURenderBundleEncoder,
    indexCount: UInt,
    instanceCount: UInt,
    firstIndex: UInt,
    baseVertex: Int,
    firstInstance: UInt,
) -> Unit>

public typealias WGPUProcRenderBundleEncoderDrawIndexedIndirect = Pointer<(
    renderBundleEncoder: WGPURenderBundleEncoder,
    indirectBuffer: WGPUBuffer,
    indirectOffset: ULong,
) -> Unit>

public typealias WGPUProcRenderBundleEncoderDrawIndirect = Pointer<(
    renderBundleEncoder: WGPURenderBundleEncoder,
    indirectBuffer: WGPUBuffer,
    indirectOffset: ULong,
) -> Unit>

public typealias WGPUProcRenderBundleEncoderFinish =
        Pointer<(
            renderBundleEncoder: WGPURenderBundleEncoder,
            descriptor: Pointer<WGPURenderBundleDescriptor>
        ) -> WGPURenderBundle>

public typealias WGPUProcRenderBundleEncoderInsertDebugMarker =
        Pointer<(renderBundleEncoder: WGPURenderBundleEncoder, markerLabel: WGPUStringView) -> Unit>

public typealias WGPUProcRenderBundleEncoderPopDebugGroup =
        Pointer<(renderBundleEncoder: WGPURenderBundleEncoder) -> Unit>

public typealias WGPUProcRenderBundleEncoderPushDebugGroup =
        Pointer<(renderBundleEncoder: WGPURenderBundleEncoder, groupLabel: WGPUStringView) -> Unit>

public typealias WGPUProcRenderBundleEncoderSetBindGroup = Pointer<(
    renderBundleEncoder: WGPURenderBundleEncoder,
    groupIndex: UInt,
    group: WGPUBindGroup,
    dynamicOffsetCount: ULong,
    dynamicOffsets: Pointer<UInt>,
) -> Unit>

public typealias WGPUProcRenderBundleEncoderSetIndexBuffer = Pointer<(
    renderBundleEncoder: WGPURenderBundleEncoder,
    buffer: WGPUBuffer,
    format: WGPUIndexFormat,
    offset: ULong,
    size: ULong,
) -> Unit>

public typealias WGPUProcRenderBundleEncoderSetLabel =
        Pointer<(renderBundleEncoder: WGPURenderBundleEncoder, label: WGPUStringView) -> Unit>

public typealias WGPUProcRenderBundleEncoderSetPipeline =
        Pointer<(renderBundleEncoder: WGPURenderBundleEncoder, pipeline: WGPURenderPipeline) -> Unit>

public typealias WGPUProcRenderBundleEncoderSetVertexBuffer = Pointer<(
    renderBundleEncoder: WGPURenderBundleEncoder,
    slot: UInt,
    buffer: WGPUBuffer,
    offset: ULong,
    size: ULong,
) -> Unit>

public typealias WGPUProcRenderBundleEncoderAddRef =
        Pointer<(renderBundleEncoder: WGPURenderBundleEncoder) -> Unit>

public typealias WGPUProcRenderBundleEncoderRelease =
        Pointer<(renderBundleEncoder: WGPURenderBundleEncoder) -> Unit>

public typealias WGPUProcRenderPassEncoderBeginOcclusionQuery =
        Pointer<(renderPassEncoder: WGPURenderPassEncoder, queryIndex: UInt) -> Unit>

public typealias WGPUProcRenderPassEncoderDraw = Pointer<(
    renderPassEncoder: WGPURenderPassEncoder,
    vertexCount: UInt,
    instanceCount: UInt,
    firstVertex: UInt,
    firstInstance: UInt,
) -> Unit>

public typealias WGPUProcRenderPassEncoderDrawIndexed = Pointer<(
    renderPassEncoder: WGPURenderPassEncoder,
    indexCount: UInt,
    instanceCount: UInt,
    firstIndex: UInt,
    baseVertex: Int,
    firstInstance: UInt,
) -> Unit>

public typealias WGPUProcRenderPassEncoderDrawIndexedIndirect = Pointer<(
    renderPassEncoder: WGPURenderPassEncoder,
    indirectBuffer: WGPUBuffer,
    indirectOffset: ULong,
) -> Unit>

public typealias WGPUProcRenderPassEncoderDrawIndirect = Pointer<(
    renderPassEncoder: WGPURenderPassEncoder,
    indirectBuffer: WGPUBuffer,
    indirectOffset: ULong,
) -> Unit>

public typealias WGPUProcRenderPassEncoderEnd =
        Pointer<(renderPassEncoder: WGPURenderPassEncoder) -> Unit>

public typealias WGPUProcRenderPassEncoderEndOcclusionQuery =
        Pointer<(renderPassEncoder: WGPURenderPassEncoder) -> Unit>

public typealias WGPUProcRenderPassEncoderExecuteBundles = Pointer<(
    renderPassEncoder: WGPURenderPassEncoder,
    bundleCount: ULong,
    bundles: Pointer<WGPURenderBundle>,
) -> Unit>

public typealias WGPUProcRenderPassEncoderInsertDebugMarker =
        Pointer<(renderPassEncoder: WGPURenderPassEncoder, markerLabel: WGPUStringView) -> Unit>

public typealias WGPUProcRenderPassEncoderPopDebugGroup =
        Pointer<(renderPassEncoder: WGPURenderPassEncoder) -> Unit>

public typealias WGPUProcRenderPassEncoderPushDebugGroup =
        Pointer<(renderPassEncoder: WGPURenderPassEncoder, groupLabel: WGPUStringView) -> Unit>

public typealias WGPUProcRenderPassEncoderSetBindGroup = Pointer<(
    renderPassEncoder: WGPURenderPassEncoder,
    groupIndex: UInt,
    group: WGPUBindGroup,
    dynamicOffsetCount: ULong,
    dynamicOffsets: Pointer<UInt>,
) -> Unit>

public typealias WGPUProcRenderPassEncoderSetBlendConstant =
        Pointer<(renderPassEncoder: WGPURenderPassEncoder, color: Pointer<WGPUColor>) -> Unit>

public typealias WGPUProcRenderPassEncoderSetIndexBuffer = Pointer<(
    renderPassEncoder: WGPURenderPassEncoder,
    buffer: WGPUBuffer,
    format: WGPUIndexFormat,
    offset: ULong,
    size: ULong,
) -> Unit>

public typealias WGPUProcRenderPassEncoderSetLabel =
        Pointer<(renderPassEncoder: WGPURenderPassEncoder, label: WGPUStringView) -> Unit>

public typealias WGPUProcRenderPassEncoderSetPipeline =
        Pointer<(renderPassEncoder: WGPURenderPassEncoder, pipeline: WGPURenderPipeline) -> Unit>

public typealias WGPUProcRenderPassEncoderSetScissorRect = Pointer<(
    renderPassEncoder: WGPURenderPassEncoder,
    x: UInt,
    y: UInt,
    width: UInt,
    height: UInt,
) -> Unit>

public typealias WGPUProcRenderPassEncoderSetStencilReference =
        Pointer<(renderPassEncoder: WGPURenderPassEncoder, reference: UInt) -> Unit>

public typealias WGPUProcRenderPassEncoderSetVertexBuffer = Pointer<(
    renderPassEncoder: WGPURenderPassEncoder,
    slot: UInt,
    buffer: WGPUBuffer,
    offset: ULong,
    size: ULong,
) -> Unit>

public typealias WGPUProcRenderPassEncoderSetViewport = Pointer<(
    renderPassEncoder: WGPURenderPassEncoder,
    x: Float,
    y: Float,
    width: Float,
    height: Float,
    minDepth: Float,
    maxDepth: Float,
) -> Unit>

public typealias WGPUProcRenderPassEncoderAddRef =
        Pointer<(renderPassEncoder: WGPURenderPassEncoder) -> Unit>

public typealias WGPUProcRenderPassEncoderRelease =
        Pointer<(renderPassEncoder: WGPURenderPassEncoder) -> Unit>

public typealias WGPUProcRenderPipelineGetBindGroupLayout =
        Pointer<(renderPipeline: WGPURenderPipeline, groupIndex: UInt) -> WGPUBindGroupLayout>

public typealias WGPUProcRenderPipelineSetLabel = Pointer<(
    renderPipeline: WGPURenderPipeline,
    label: WGPUStringView
) -> Unit>

public typealias WGPUProcRenderPipelineAddRef =
        Pointer<(renderPipeline: WGPURenderPipeline) -> Unit>

public typealias WGPUProcRenderPipelineRelease =
        Pointer<(renderPipeline: WGPURenderPipeline) -> Unit>

public typealias WGPUProcSamplerSetLabel = Pointer<(
    sampler: WGPUSampler,
    label: WGPUStringView
) -> Unit>

public typealias WGPUProcSamplerAddRef = Pointer<(sampler: WGPUSampler) -> Unit>

public typealias WGPUProcSamplerRelease = Pointer<(sampler: WGPUSampler) -> Unit>

public typealias WGPUProcShaderModuleGetCompilationInfo = Pointer<(
    shaderModule: WGPUShaderModule,
    callbackInfo: WGPUCompilationInfoCallbackInfo
) -> WGPUFuture>

public typealias WGPUProcShaderModuleSetLabel = Pointer<(
    shaderModule: WGPUShaderModule,
    label: WGPUStringView
) -> Unit>

public typealias WGPUProcShaderModuleAddRef = Pointer<(shaderModule: WGPUShaderModule) -> Unit>

public typealias WGPUProcShaderModuleRelease = Pointer<(shaderModule: WGPUShaderModule) -> Unit>

public typealias WGPUProcSupportedFeaturesFreeMembers =
        Pointer<(supportedFeatures: WGPUSupportedFeatures) -> Unit>

public typealias WGPUProcSupportedWGSLLanguageFeaturesFreeMembers =
        Pointer<(supportedWGSLLanguageFeatures: WGPUSupportedWGSLLanguageFeatures) -> Unit>

public typealias WGPUProcSurfaceConfigure = Pointer<(
    surface: WGPUSurface,
    config: Pointer<WGPUSurfaceConfiguration>
) -> Unit>

public typealias WGPUProcSurfaceGetCapabilities = Pointer<(
    surface: WGPUSurface,
    adapter: WGPUAdapter,
    capabilities: Pointer<WGPUSurfaceCapabilities>,
) -> WGPUStatus>

public typealias WGPUProcSurfaceGetCurrentTexture = Pointer<(
    surface: WGPUSurface,
    surfaceTexture: Pointer<WGPUSurfaceTexture>
) -> Unit>

public typealias WGPUProcSurfacePresent = Pointer<(surface: WGPUSurface) -> WGPUStatus>

public typealias WGPUProcSurfaceSetLabel = Pointer<(
    surface: WGPUSurface,
    label: WGPUStringView
) -> Unit>

public typealias WGPUProcSurfaceUnconfigure = Pointer<(surface: WGPUSurface) -> Unit>

public typealias WGPUProcSurfaceAddRef = Pointer<(surface: WGPUSurface) -> Unit>

public typealias WGPUProcSurfaceRelease = Pointer<(surface: WGPUSurface) -> Unit>

public typealias WGPUProcSurfaceCapabilitiesFreeMembers =
        Pointer<(surfaceCapabilities: WGPUSurfaceCapabilities) -> Unit>

public typealias WGPUProcTextureCreateView = Pointer<(
    texture: WGPUTexture,
    descriptor: Pointer<WGPUTextureViewDescriptor>
) -> WGPUTextureView>

public typealias WGPUProcTextureDestroy = Pointer<(texture: WGPUTexture) -> Unit>

public typealias WGPUProcTextureGetDepthOrArrayLayers = Pointer<(texture: WGPUTexture) -> UInt>

public typealias WGPUProcTextureGetDimension =
        Pointer<(texture: WGPUTexture) -> WGPUTextureDimension>

public typealias WGPUProcTextureGetFormat = Pointer<(texture: WGPUTexture) -> WGPUTextureFormat>

public typealias WGPUProcTextureGetHeight = Pointer<(texture: WGPUTexture) -> UInt>

public typealias WGPUProcTextureGetMipLevelCount = Pointer<(texture: WGPUTexture) -> UInt>

public typealias WGPUProcTextureGetSampleCount = Pointer<(texture: WGPUTexture) -> UInt>

public typealias WGPUProcTextureGetUsage = Pointer<(texture: WGPUTexture) -> WGPUTextureUsage>

public typealias WGPUProcTextureGetWidth = Pointer<(texture: WGPUTexture) -> UInt>

public typealias WGPUProcTextureSetLabel = Pointer<(
    texture: WGPUTexture,
    label: WGPUStringView
) -> Unit>

public typealias WGPUProcTextureAddRef = Pointer<(texture: WGPUTexture) -> Unit>

public typealias WGPUProcTextureRelease = Pointer<(texture: WGPUTexture) -> Unit>

public typealias WGPUProcTextureViewSetLabel = Pointer<(
    textureView: WGPUTextureView,
    label: WGPUStringView
) -> Unit>

public typealias WGPUProcTextureViewAddRef = Pointer<(textureView: WGPUTextureView) -> Unit>

public typealias WGPUProcTextureViewRelease = Pointer<(textureView: WGPUTextureView) -> Unit>
