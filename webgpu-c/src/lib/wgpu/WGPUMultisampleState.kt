// this file is auto generated by endoqa kotlin ffi, modify it with caution
package lib.wgpu

import java.lang.foreign.*
import java.lang.invoke.VarHandle

/**
 * TODO
 */
@JvmInline
public value class WGPUMultisampleState(
    public val `$mem`: MemorySegment,
) {
    public var nextInChain: Pointer<WGPUChainedStruct>
        get() = nextInChainHandle.get(this.`$mem`, 0L) as MemorySegment
        set(`value`) {
            nextInChainHandle.set(this.`$mem`, 0L, value)
        }

    /**
     * TODO
     */
    public var count: UInt
        get() = (countHandle.get(this.`$mem`, 0L) as Int).toUInt()
        set(`value`) {
            countHandle.set(this.`$mem`, 0L, value.toInt())
        }

    /**
     * TODO
     */
    public var mask: UInt
        get() = (maskHandle.get(this.`$mem`, 0L) as Int).toUInt()
        set(`value`) {
            maskHandle.set(this.`$mem`, 0L, value.toInt())
        }

    /**
     * TODO
     */
    public var alphaToCoverageEnabled: WGPUBool
        get() = (alphaToCoverageEnabledHandle.get(this.`$mem`, 0L) as Int).toUInt()
        set(`value`) {
            alphaToCoverageEnabledHandle.set(this.`$mem`, 0L, value.toInt())
        }

    public constructor(gc: Boolean) : this(kotlin.run {
        require(gc) { "Do not call this if gc is not want" }
        Arena.ofAuto().allocate(layout)
    })

    public companion object {
        public val layout: StructLayout = MemoryLayout.structLayout(
            `$RuntimeHelper`.POINTER.withName("nextInChain"),
            ValueLayout.JAVA_INT.withName("count"),
            ValueLayout.JAVA_INT.withName("mask"),
            ValueLayout.JAVA_INT.withName("alphaToCoverageEnabled"),
            MemoryLayout.paddingLayout(4),
        ).withName("WGPUMultisampleState")

        @JvmField
        public val nextInChainHandle: VarHandle =
            layout.varHandle(MemoryLayout.PathElement.groupElement("nextInChain"))

        @JvmField
        public val countHandle: VarHandle =
            layout.varHandle(MemoryLayout.PathElement.groupElement("count"))

        @JvmField
        public val maskHandle: VarHandle =
            layout.varHandle(MemoryLayout.PathElement.groupElement("mask"))

        @JvmField
        public val alphaToCoverageEnabledHandle: VarHandle =
            layout.varHandle(MemoryLayout.PathElement.groupElement("alphaToCoverageEnabled"))

        @JvmStatic
        public fun allocate(alloc: SegmentAllocator): WGPUMultisampleState =
            WGPUMultisampleState(alloc.allocate(layout))
    }
}
