// this file is auto generated by endoqa kotlin ffi, modify it with caution
package lib.wgpu

import java.lang.foreign.*
import java.lang.invoke.VarHandle

@JvmInline
public value class WGPUTexelCopyBufferLayout(
    public val `$mem`: MemorySegment,
) {
    public var offset: ULong
        get() = (offsetHandle.get(this.`$mem`, 0L) as Long).toULong()
        set(`value`) {
            offsetHandle.set(this.`$mem`, 0L, value.toLong())
        }

    public var bytesPerRow: UInt
        get() = (bytesPerRowHandle.get(this.`$mem`, 0L) as Int).toUInt()
        set(`value`) {
            bytesPerRowHandle.set(this.`$mem`, 0L, value.toInt())
        }

    public var rowsPerImage: UInt
        get() = (rowsPerImageHandle.get(this.`$mem`, 0L) as Int).toUInt()
        set(`value`) {
            rowsPerImageHandle.set(this.`$mem`, 0L, value.toInt())
        }

    public constructor(gc: Boolean) : this(kotlin.run {
        require(gc) { "Do not call this if gc is not want" }
        Arena.ofAuto().allocate(layout)
    })

    public companion object {
        public val layout: StructLayout = MemoryLayout.structLayout(
            ValueLayout.JAVA_LONG.withName("offset"),
            ValueLayout.JAVA_INT.withName("bytesPerRow"),
            ValueLayout.JAVA_INT.withName("rowsPerImage"),
        ).withName("WGPUTexelCopyBufferLayout")

        @JvmField
        public val offsetHandle: VarHandle =
            layout.varHandle(MemoryLayout.PathElement.groupElement("offset"))

        @JvmField
        public val bytesPerRowHandle: VarHandle =
            layout.varHandle(MemoryLayout.PathElement.groupElement("bytesPerRow"))

        @JvmField
        public val rowsPerImageHandle: VarHandle =
            layout.varHandle(MemoryLayout.PathElement.groupElement("rowsPerImage"))

        @JvmStatic
        public fun allocate(alloc: SegmentAllocator): WGPUTexelCopyBufferLayout =
            WGPUTexelCopyBufferLayout(alloc.allocate(layout))
    }
}
