// this file is auto generated by endoqa kotlin ffi, modify it with caution
package lib.wgpu

import java.lang.foreign.*
import java.lang.invoke.VarHandle

@JvmInline
public value class WGPUStorageTextureBindingLayout(
    public val `$mem`: MemorySegment,
) {
    public var nextInChain: Pointer<WGPUChainedStruct>
        get() = nextInChainHandle.get(this.`$mem`, 0L) as MemorySegment
        set(`value`) {
            nextInChainHandle.set(this.`$mem`, 0L, value)
        }

    public var access: WGPUStorageTextureAccess
        get() =
            WGPUStorageTextureAccess.fromInt(
                accessHandle.get(
                    this.`$mem`,
                    0L
                ) as Int
            )
        set(`value`) {
            accessHandle.set(this.`$mem`, 0L, value.value)
        }

    public var format: WGPUTextureFormat
        get() = WGPUTextureFormat.fromInt(
            formatHandle.get(
                this.`$mem`,
                0L
            ) as Int
        )
        set(`value`) {
            formatHandle.set(this.`$mem`, 0L, value.value)
        }

    public var viewDimension: WGPUTextureViewDimension
        get() =
            WGPUTextureViewDimension.fromInt(
                viewDimensionHandle.get(
                    this.`$mem`,
                    0L
                ) as Int
            )
        set(`value`) {
            viewDimensionHandle.set(this.`$mem`, 0L, value.value)
        }

    public constructor(gc: Boolean) : this(kotlin.run {
        require(gc) { "Do not call this if gc is not want" }
        Arena.ofAuto().allocate(layout)
    })

    public companion object {
        public val layout: StructLayout = MemoryLayout.structLayout(
            `$RuntimeHelper`.POINTER.withName("nextInChain"),
            ValueLayout.JAVA_INT.withName("access"),
            ValueLayout.JAVA_INT.withName("format"),
            ValueLayout.JAVA_INT.withName("viewDimension"),
            MemoryLayout.paddingLayout(4),
        ).withName("WGPUStorageTextureBindingLayout")

        @JvmField
        public val nextInChainHandle: VarHandle =
            layout.varHandle(MemoryLayout.PathElement.groupElement("nextInChain"))

        @JvmField
        public val accessHandle: VarHandle =
            layout.varHandle(MemoryLayout.PathElement.groupElement("access"))

        @JvmField
        public val formatHandle: VarHandle =
            layout.varHandle(MemoryLayout.PathElement.groupElement("format"))

        @JvmField
        public val viewDimensionHandle: VarHandle =
            layout.varHandle(MemoryLayout.PathElement.groupElement("viewDimension"))

        @JvmStatic
        public fun allocate(alloc: SegmentAllocator): WGPUStorageTextureBindingLayout =
            WGPUStorageTextureBindingLayout(alloc.allocate(layout))
    }
}
