// this file is auto generated by endoqa kotlin ffi, modify it with caution
package lib.wgpu

import java.lang.foreign.*
import java.lang.invoke.MethodHandle
import java.lang.invoke.VarHandle

/**
 * Extension of [WGPUSurfaceConfiguration] for color spaces and HDR.
 */
@JvmInline
public value class WGPUSurfaceColorManagement(
    public val `$mem`: MemorySegment,
) {
    public var chain: WGPUChainedStruct
        get() = WGPUChainedStruct(chainHandle.invokeExact(this.`$mem`, 0L) as MemorySegment)
        set(`value`) {
            MemorySegment.copy(value.`$mem`, 0L, this.chain.`$mem`, 0L, WGPUChainedStruct.layout.byteSize())
        }

    /**
     * TODO
     */
    public var colorSpace: WGPUPredefinedColorSpace
        get() = WGPUPredefinedColorSpace.fromInt(
            colorSpaceHandle.get(
                this.`$mem`,
                0L
            ) as Int
        )
        set(`value`) {
            colorSpaceHandle.set(this.`$mem`, 0L, value.value)
        }

    /**
     * TODO
     */
    public var toneMappingMode: WGPUToneMappingMode
        get() = WGPUToneMappingMode.fromInt(
            toneMappingModeHandle.get(
                this.`$mem`,
                0L
            ) as Int
        )
        set(`value`) {
            toneMappingModeHandle.set(this.`$mem`, 0L, value.value)
        }

    public constructor(gc: Boolean) : this(kotlin.run {
        require(gc) { "Do not call this if gc is not want" }
        Arena.ofAuto().allocate(layout)
    })

    public companion object {
        public val layout: StructLayout = MemoryLayout.structLayout(
            WGPUChainedStruct.layout.withName("chain"),
            ValueLayout.JAVA_INT.withName("colorSpace"),
            ValueLayout.JAVA_INT.withName("toneMappingMode"),
        ).withName("WGPUSurfaceColorManagement")

        @JvmField
        public val chainHandle: MethodHandle =
            layout.sliceHandle(MemoryLayout.PathElement.groupElement("chain"))

        @JvmField
        public val colorSpaceHandle: VarHandle =
            layout.varHandle(MemoryLayout.PathElement.groupElement("colorSpace"))

        @JvmField
        public val toneMappingModeHandle: VarHandle =
            layout.varHandle(MemoryLayout.PathElement.groupElement("toneMappingMode"))

        @JvmStatic
        public fun allocate(alloc: SegmentAllocator): WGPUSurfaceColorManagement =
            WGPUSurfaceColorManagement(alloc.allocate(layout))
    }
}
