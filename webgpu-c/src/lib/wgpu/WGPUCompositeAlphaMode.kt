// this file is auto generated by endoqa kotlin ffi, modify it with caution
package lib.wgpu

import java.lang.invoke.MethodHandle
import java.lang.invoke.MethodHandles
import java.lang.invoke.MethodType
import kotlin.Int

/**
 * Describes how frames are composited with other contents on the screen when [wgpuSurfacePresent] is called.
 */
public enum class WGPUCompositeAlphaMode(
    public val `value`: Int,
) {
    /**
     * Lets the WebGPU implementation choose the best mode (supported, and with the best performance) between [WGPUCompositeAlphaMode.Opaque] or [WGPUCompositeAlphaMode.Inherit].
     */
    Auto(0x00000000),

    /**
     * The alpha component of the image is ignored and teated as if it is always 1.0.
     */
    Opaque(0x00000001),

    /**
     * The alpha component is respected and non-alpha components are assumed to be already multiplied with the alpha component. For example, (0.5, 0, 0, 0.5) is semi-transparent bright red.
     */
    Premultiplied(0x00000002),

    /**
     * The alpha component is respected and non-alpha components are assumed to NOT be already multiplied with the alpha component. For example, (1.0, 0, 0, 0.5) is semi-transparent bright red.
     */
    Unpremultiplied(0x00000003),

    /**
     * The handling of the alpha component is unknown to WebGPU and should be handled by the application using system-specific APIs. This mode may be unavailable (for example on Wasm).
     */
    Inherit(0x00000004),
    ;

    public companion object {
        @JvmStatic
        public val fromInt: MethodHandle = MethodHandles.lookup().findStatic(
            WGPUCompositeAlphaMode::class.java,
            "fromInt",
            MethodType.methodType(WGPUCompositeAlphaMode::class.java, Int::class.java)
        )

        @JvmStatic
        public val toInt: MethodHandle = MethodHandles.lookup().findGetter(
            WGPUCompositeAlphaMode::class.java,
            "value",
            Int::class.java
        )

        @JvmStatic
        public fun fromInt(`value`: Int): WGPUCompositeAlphaMode = when (value) {
            Auto.value -> Auto
            Opaque.value -> Opaque
            Premultiplied.value -> Premultiplied
            Unpremultiplied.value -> Unpremultiplied
            Inherit.value -> Inherit
            else -> error("enum not found")
        }
    }
}
