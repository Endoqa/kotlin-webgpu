// this file is auto generated by endoqa kotlin ffi, modify it with caution
package lib.wgpu

import java.lang.invoke.MethodHandle
import java.lang.invoke.MethodHandles
import java.lang.invoke.MethodType

/**
 * TODO
 */
public enum class WGPUStorageTextureAccess(
    public val `value`: Int,
) {
    /**
     * Indicates that this [WGPUStorageTextureBindingLayout] member of
     * its parent [WGPUBindGroupLayoutEntry] is not used.
     * (See also [SentinelValues](https://webgpu-native.github.io/webgpu-headers/SentinelValues.html).)
     */
    BindingNotUsed(0x00000000),

    /**
     * [1]. Indicates no value is passed for this argument. See [SentinelValues](https://webgpu-native.github.io/webgpu-headers/SentinelValues.html).
     */
    Undefined(0x00000001),

    /**
     * TODO
     */
    WriteOnly(0x00000002),

    /**
     * TODO
     */
    ReadOnly(0x00000003),

    /**
     * TODO
     */
    ReadWrite(0x00000004),
    ;

    public companion object {
        @JvmStatic
        public val fromInt: MethodHandle = MethodHandles.lookup().findStatic(
            WGPUStorageTextureAccess::class.java,
            "fromInt",
            MethodType.methodType(WGPUStorageTextureAccess::class.java, Int::class.java)
        )

        @JvmStatic
        public val toInt: MethodHandle = MethodHandles.lookup().findGetter(
            WGPUStorageTextureAccess::class.java,
            "value",
            Int::class.java
        )

        @JvmStatic
        public fun fromInt(`value`: Int): WGPUStorageTextureAccess = when (value) {
            BindingNotUsed.value -> BindingNotUsed
            Undefined.value -> Undefined
            WriteOnly.value -> WriteOnly
            ReadOnly.value -> ReadOnly
            ReadWrite.value -> ReadWrite
            else -> error("enum not found")
        }
    }
}
