// this file is auto generated by endoqa kotlin ffi, modify it with caution
package lib.wgpu

import java.lang.foreign.*
import java.lang.invoke.VarHandle

/**
 * TODO
 */
@JvmInline
public value class WGPUStencilFaceState(
    public val `$mem`: MemorySegment,
) {
    /**
     * If set to [WGPUCompareFunction.Undefined],
     * [defaults](https://webgpu-native.github.io/webgpu-headers/SentinelValues.html) to [WGPUCompareFunction.Always].
     */
    public var compare: WGPUCompareFunction
        get() = WGPUCompareFunction.fromInt(compareHandle.get(this.`$mem`, 0L) as Int)
        set(`value`) {
            compareHandle.set(this.`$mem`, 0L, value.value)
        }

    /**
     * If set to [WGPUStencilOperation.Undefined],
     * [defaults](https://webgpu-native.github.io/webgpu-headers/SentinelValues.html) to [WGPUStencilOperation.Keep].
     */
    public var failOp: WGPUStencilOperation
        get() = WGPUStencilOperation.fromInt(failOpHandle.get(this.`$mem`, 0L) as Int)
        set(`value`) {
            failOpHandle.set(this.`$mem`, 0L, value.value)
        }

    /**
     * If set to [WGPUStencilOperation.Undefined],
     * [defaults](https://webgpu-native.github.io/webgpu-headers/SentinelValues.html) to [WGPUStencilOperation.Keep].
     */
    public var depthFailOp: WGPUStencilOperation
        get() = WGPUStencilOperation.fromInt(depthFailOpHandle.get(this.`$mem`, 0L) as Int)
        set(`value`) {
            depthFailOpHandle.set(this.`$mem`, 0L, value.value)
        }

    /**
     * If set to [WGPUStencilOperation.Undefined],
     * [defaults](https://webgpu-native.github.io/webgpu-headers/SentinelValues.html) to [WGPUStencilOperation.Keep].
     */
    public var passOp: WGPUStencilOperation
        get() = WGPUStencilOperation.fromInt(passOpHandle.get(this.`$mem`, 0L) as Int)
        set(`value`) {
            passOpHandle.set(this.`$mem`, 0L, value.value)
        }

    public constructor(gc: Boolean) : this(kotlin.run {
        require(gc) { "Do not call this if gc is not want" }
        Arena.ofAuto().allocate(layout)
    })

    public companion object {
        public val layout: StructLayout = MemoryLayout.structLayout(
            ValueLayout.JAVA_INT.withName("compare"),
            ValueLayout.JAVA_INT.withName("failOp"),
            ValueLayout.JAVA_INT.withName("depthFailOp"),
            ValueLayout.JAVA_INT.withName("passOp"),
        ).withName("WGPUStencilFaceState")

        @JvmField
        public val compareHandle: VarHandle =
            layout.varHandle(MemoryLayout.PathElement.groupElement("compare"))

        @JvmField
        public val failOpHandle: VarHandle =
            layout.varHandle(MemoryLayout.PathElement.groupElement("failOp"))

        @JvmField
        public val depthFailOpHandle: VarHandle =
            layout.varHandle(MemoryLayout.PathElement.groupElement("depthFailOp"))

        @JvmField
        public val passOpHandle: VarHandle =
            layout.varHandle(MemoryLayout.PathElement.groupElement("passOp"))

        @JvmStatic
        public fun allocate(alloc: SegmentAllocator): WGPUStencilFaceState =
            WGPUStencilFaceState(alloc.allocate(layout))
    }
}
