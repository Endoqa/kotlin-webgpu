// this file is auto generated by endoqa kotlin ffi, modify it with caution
package lib.wgpu

import java.lang.foreign.*
import java.lang.invoke.VarHandle

/**
 * TODO
 */
@JvmInline
public value class WGPURequestAdapterOptions(
    public val `$mem`: MemorySegment,
) {
    public var nextInChain: Pointer<WGPUChainedStruct>
        get() = nextInChainHandle.get(this.`$mem`, 0L) as MemorySegment
        set(`value`) {
            nextInChainHandle.set(this.`$mem`, 0L, value)
        }

    /**
     * "Feature level" for the adapter request. If an adapter is returned, it must support the features and limits in the requested feature level.
     *
     * If set to [WGPUFeatureLevel.Undefined],
     * [defaults](https://webgpu-native.github.io/webgpu-headers/SentinelValues.html) to [WGPUFeatureLevel.Core].
     * Additionally, implementations may ignore [WGPUFeatureLevel.Compatibility]
     * and provide [WGPUFeatureLevel.Core] instead.
     */
    public var featureLevel: WGPUFeatureLevel
        get() = WGPUFeatureLevel.fromInt(featureLevelHandle.get(this.`$mem`, 0L) as Int)
        set(`value`) {
            featureLevelHandle.set(this.`$mem`, 0L, value.value)
        }

    /**
     * TODO
     */
    public var powerPreference: WGPUPowerPreference
        get() = WGPUPowerPreference.fromInt(powerPreferenceHandle.get(this.`$mem`, 0L) as Int)
        set(`value`) {
            powerPreferenceHandle.set(this.`$mem`, 0L, value.value)
        }

    /**
     * If true, requires the adapter to be a "fallback" adapter as defined by the JS spec.
     * If this is not possible, the request returns null.
     */
    public var forceFallbackAdapter: WGPUBool
        get() = (forceFallbackAdapterHandle.get(this.`$mem`, 0L) as Int).toUInt()
        set(`value`) {
            forceFallbackAdapterHandle.set(this.`$mem`, 0L, value.toInt())
        }

    /**
     * If set, requires the adapter to have a particular backend type.
     * If this is not possible, the request returns null.
     */
    public var backendType: WGPUBackendType
        get() = WGPUBackendType.fromInt(backendTypeHandle.get(this.`$mem`, 0L) as Int)
        set(`value`) {
            backendTypeHandle.set(this.`$mem`, 0L, value.value)
        }

    /**
     * If set, requires the adapter to be able to output to a particular surface.
     * If this is not possible, the request returns null.
     */
    public var compatibleSurface: WGPUSurface
        get() = compatibleSurfaceHandle.get(this.`$mem`, 0L) as MemorySegment
        set(`value`) {
            compatibleSurfaceHandle.set(this.`$mem`, 0L, value)
        }

    public constructor(gc: Boolean) : this(kotlin.run {
        require(gc) { "Do not call this if gc is not want" }
        Arena.ofAuto().allocate(layout)
    })

    public companion object {
        public val layout: StructLayout = MemoryLayout.structLayout(
            `$RuntimeHelper`.POINTER.withName("nextInChain"),
            ValueLayout.JAVA_INT.withName("featureLevel"),
            ValueLayout.JAVA_INT.withName("powerPreference"),
            ValueLayout.JAVA_INT.withName("forceFallbackAdapter"),
            ValueLayout.JAVA_INT.withName("backendType"),
            `$RuntimeHelper`.POINTER.withName("compatibleSurface"),
        ).withName("WGPURequestAdapterOptions")

        @JvmField
        public val nextInChainHandle: VarHandle =
            layout.varHandle(MemoryLayout.PathElement.groupElement("nextInChain"))

        @JvmField
        public val featureLevelHandle: VarHandle =
            layout.varHandle(MemoryLayout.PathElement.groupElement("featureLevel"))

        @JvmField
        public val powerPreferenceHandle: VarHandle =
            layout.varHandle(MemoryLayout.PathElement.groupElement("powerPreference"))

        @JvmField
        public val forceFallbackAdapterHandle: VarHandle =
            layout.varHandle(MemoryLayout.PathElement.groupElement("forceFallbackAdapter"))

        @JvmField
        public val backendTypeHandle: VarHandle =
            layout.varHandle(MemoryLayout.PathElement.groupElement("backendType"))

        @JvmField
        public val compatibleSurfaceHandle: VarHandle =
            layout.varHandle(MemoryLayout.PathElement.groupElement("compatibleSurface"))

        @JvmStatic
        public fun allocate(alloc: SegmentAllocator): WGPURequestAdapterOptions =
            WGPURequestAdapterOptions(alloc.allocate(layout))
    }
}
