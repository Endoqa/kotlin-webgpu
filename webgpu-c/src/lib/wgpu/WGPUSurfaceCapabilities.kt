// this file is auto generated by endoqa kotlin ffi, modify it with caution
package lib.wgpu

import java.lang.foreign.*
import java.lang.invoke.VarHandle

/**
 * Filled by @ref wgpuSurfaceGetCapabilities with what's supported for @ref wgpuSurfaceConfigure for a pair of @ref WGPUSurface and @ref WGPUAdapter.
 */
@JvmInline
public value class WGPUSurfaceCapabilities(
    public val `$mem`: MemorySegment,
) {
    public var nextInChain: Pointer<WGPUChainedStructOut>
        get() = nextInChainHandle.get(this.`$mem`, 0L) as MemorySegment
        set(`value`) {
            nextInChainHandle.set(this.`$mem`, 0L, value)
        }

    /**
     * The bit set of supported @ref WGPUTextureUsage bits.
     * Guaranteed to contain @ref WGPUTextureUsage_RenderAttachment.
     */
    public var usages: ULong
        get() = (usagesHandle.get(this.`$mem`, 0L) as Long).toULong()
        set(`value`) {
            usagesHandle.set(this.`$mem`, 0L, value.toLong())
        }

    /**
     * Array count for formats.
     */
    public var formatCount: ULong
        get() = (formatCountHandle.get(this.`$mem`, 0L) as Long).toULong()
        set(`value`) {
            formatCountHandle.set(this.`$mem`, 0L, value.toLong())
        }

    /**
     * A list of supported @ref WGPUTextureFormat values, in order of preference.
     */
    public var formats: Pointer<WGPUTextureFormat>
        get() = formatsHandle.get(this.`$mem`, 0L) as MemorySegment
        set(`value`) {
            formatsHandle.set(this.`$mem`, 0L, value)
        }

    /**
     * Array count for presentModes.
     */
    public var presentModeCount: ULong
        get() = (presentModeCountHandle.get(this.`$mem`, 0L) as Long).toULong()
        set(`value`) {
            presentModeCountHandle.set(this.`$mem`, 0L, value.toLong())
        }

    /**
     * A list of supported @ref WGPUPresentMode values.
     * Guaranteed to contain @ref WGPUPresentMode_Fifo.
     */
    public var presentModes: Pointer<WGPUPresentMode>
        get() = presentModesHandle.get(this.`$mem`, 0L) as MemorySegment
        set(`value`) {
            presentModesHandle.set(this.`$mem`, 0L, value)
        }

    /**
     * Array count for alphaModes.
     */
    public var alphaModeCount: ULong
        get() = (alphaModeCountHandle.get(this.`$mem`, 0L) as Long).toULong()
        set(`value`) {
            alphaModeCountHandle.set(this.`$mem`, 0L, value.toLong())
        }

    /**
     * A list of supported @ref WGPUCompositeAlphaMode values.
     * @ref WGPUCompositeAlphaMode_Auto will be an alias for the first element and will never be present in this array.
     */
    public var alphaModes: Pointer<WGPUCompositeAlphaMode>
        get() = alphaModesHandle.get(this.`$mem`, 0L) as MemorySegment
        set(`value`) {
            alphaModesHandle.set(this.`$mem`, 0L, value)
        }

    public constructor(gc: Boolean) : this(kotlin.run {
        require(gc) { "Do not call this if gc is not want" }
        Arena.ofAuto().allocate(layout)
    })

    public companion object {
        public val layout: StructLayout = MemoryLayout.structLayout(
            `$RuntimeHelper`.POINTER.withName("nextInChain"),
            ValueLayout.JAVA_LONG.withName("usages"),
            ValueLayout.JAVA_LONG.withName("formatCount"),
            `$RuntimeHelper`.POINTER.withName("formats"),
            ValueLayout.JAVA_LONG.withName("presentModeCount"),
            `$RuntimeHelper`.POINTER.withName("presentModes"),
            ValueLayout.JAVA_LONG.withName("alphaModeCount"),
            `$RuntimeHelper`.POINTER.withName("alphaModes"),
        ).withName("WGPUSurfaceCapabilities")

        @JvmField
        public val nextInChainHandle: VarHandle =
            layout.varHandle(MemoryLayout.PathElement.groupElement("nextInChain"))

        @JvmField
        public val usagesHandle: VarHandle =
            layout.varHandle(MemoryLayout.PathElement.groupElement("usages"))

        @JvmField
        public val formatCountHandle: VarHandle =
            layout.varHandle(MemoryLayout.PathElement.groupElement("formatCount"))

        @JvmField
        public val formatsHandle: VarHandle =
            layout.varHandle(MemoryLayout.PathElement.groupElement("formats"))

        @JvmField
        public val presentModeCountHandle: VarHandle =
            layout.varHandle(MemoryLayout.PathElement.groupElement("presentModeCount"))

        @JvmField
        public val presentModesHandle: VarHandle =
            layout.varHandle(MemoryLayout.PathElement.groupElement("presentModes"))

        @JvmField
        public val alphaModeCountHandle: VarHandle =
            layout.varHandle(MemoryLayout.PathElement.groupElement("alphaModeCount"))

        @JvmField
        public val alphaModesHandle: VarHandle =
            layout.varHandle(MemoryLayout.PathElement.groupElement("alphaModes"))

        @JvmStatic
        public fun allocate(alloc: SegmentAllocator): WGPUSurfaceCapabilities =
            WGPUSurfaceCapabilities(alloc.allocate(layout))
    }
}
