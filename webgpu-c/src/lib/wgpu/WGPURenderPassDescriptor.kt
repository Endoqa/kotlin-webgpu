// this file is auto generated by endoqa kotlin ffi, modify it with caution
package lib.wgpu

import java.lang.foreign.*
import java.lang.invoke.MethodHandle
import java.lang.invoke.VarHandle

/**
 * TODO
 */
@JvmInline
public value class WGPURenderPassDescriptor(
    public val `$mem`: MemorySegment,
) {
    public var nextInChain: Pointer<WGPUChainedStruct>
        get() = nextInChainHandle.get(this.`$mem`, 0L) as MemorySegment
        set(`value`) {
            nextInChainHandle.set(this.`$mem`, 0L, value)
        }

    /**
     * TODO
     */
    public var label: WGPUStringView
        get() = WGPUStringView(labelHandle.invokeExact(this.`$mem`, 0L) as MemorySegment)
        set(`value`) {
            MemorySegment.copy(value.`$mem`, 0L, this.label.`$mem`, 0L, WGPUStringView.layout.byteSize())
        }

    /**
     * Array count for [colorAttachments].
     */
    public var colorAttachmentCount: ULong
        get() = (colorAttachmentCountHandle.get(this.`$mem`, 0L) as Long).toULong()
        set(`value`) {
            colorAttachmentCountHandle.set(this.`$mem`, 0L, value.toLong())
        }

    /**
     * TODO
     */
    public var colorAttachments: Pointer<WGPURenderPassColorAttachment>
        get() = colorAttachmentsHandle.get(this.`$mem`, 0L) as MemorySegment
        set(`value`) {
            colorAttachmentsHandle.set(this.`$mem`, 0L, value)
        }

    /**
     * TODO
     */
    public var depthStencilAttachment: Pointer<WGPURenderPassDepthStencilAttachment>
        get() = depthStencilAttachmentHandle.get(this.`$mem`, 0L) as MemorySegment
        set(`value`) {
            depthStencilAttachmentHandle.set(this.`$mem`, 0L, value)
        }

    /**
     * TODO
     */
    public var occlusionQuerySet: WGPUQuerySet
        get() = occlusionQuerySetHandle.get(this.`$mem`, 0L) as MemorySegment
        set(`value`) {
            occlusionQuerySetHandle.set(this.`$mem`, 0L, value)
        }

    /**
     * TODO
     */
    public var timestampWrites: Pointer<WGPUPassTimestampWrites>
        get() = timestampWritesHandle.get(this.`$mem`, 0L) as MemorySegment
        set(`value`) {
            timestampWritesHandle.set(this.`$mem`, 0L, value)
        }

    public constructor(gc: Boolean) : this(kotlin.run {
        require(gc) { "Do not call this if gc is not want" }
        Arena.ofAuto().allocate(layout)
    })

    public companion object {
        public val layout: StructLayout = MemoryLayout.structLayout(
            `$RuntimeHelper`.POINTER.withName("nextInChain"),
            WGPUStringView.layout.withName("label"),
            ValueLayout.JAVA_LONG.withName("colorAttachmentCount"),
            `$RuntimeHelper`.POINTER.withName("colorAttachments"),
            `$RuntimeHelper`.POINTER.withName("depthStencilAttachment"),
            `$RuntimeHelper`.POINTER.withName("occlusionQuerySet"),
            `$RuntimeHelper`.POINTER.withName("timestampWrites"),
        ).withName("WGPURenderPassDescriptor")

        @JvmField
        public val nextInChainHandle: VarHandle =
            layout.varHandle(MemoryLayout.PathElement.groupElement("nextInChain"))

        @JvmField
        public val labelHandle: MethodHandle =
            layout.sliceHandle(MemoryLayout.PathElement.groupElement("label"))

        @JvmField
        public val colorAttachmentCountHandle: VarHandle =
            layout.varHandle(MemoryLayout.PathElement.groupElement("colorAttachmentCount"))

        @JvmField
        public val colorAttachmentsHandle: VarHandle =
            layout.varHandle(MemoryLayout.PathElement.groupElement("colorAttachments"))

        @JvmField
        public val depthStencilAttachmentHandle: VarHandle =
            layout.varHandle(MemoryLayout.PathElement.groupElement("depthStencilAttachment"))

        @JvmField
        public val occlusionQuerySetHandle: VarHandle =
            layout.varHandle(MemoryLayout.PathElement.groupElement("occlusionQuerySet"))

        @JvmField
        public val timestampWritesHandle: VarHandle =
            layout.varHandle(MemoryLayout.PathElement.groupElement("timestampWrites"))

        @JvmStatic
        public fun allocate(alloc: SegmentAllocator): WGPURenderPassDescriptor =
            WGPURenderPassDescriptor(alloc.allocate(layout))
    }
}
