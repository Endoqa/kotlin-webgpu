// this file is auto generated by endoqa kotlin ffi, modify it with caution
package lib.wgpu

import java.lang.foreign.*
import java.lang.invoke.MethodHandle
import java.lang.invoke.VarHandle

/**
 * Chained in @ref WGPUSurfaceDescriptor to make an @ref WGPUSurface wrapping a [Wayland](https://wayland.freedesktop.org/) [`wl_surface`](https://wayland.freedesktop.org/docs/html/apa.html#protocol-spec-wl_surface).
 */
@JvmInline
public value class WGPUSurfaceSourceWaylandSurface(
    public val `$mem`: MemorySegment,
) {
    public var chain: WGPUChainedStruct
        get() = WGPUChainedStruct(
            chainHandle.invokeExact(
                this.`$mem`,
                0L
            ) as MemorySegment
        )
        set(`value`) {
            MemorySegment.copy(value.`$mem`, 0L, this.chain.`$mem`, 0L, WGPUChainedStruct.layout.byteSize())
        }

    /**
     * A [`wl_display`](https://wayland.freedesktop.org/docs/html/apa.html#protocol-spec-wl_display) for this Wayland instance.
     */
    public var display: Pointer<Unit>
        get() = displayHandle.get(this.`$mem`, 0L) as MemorySegment
        set(`value`) {
            displayHandle.set(this.`$mem`, 0L, value)
        }

    /**
     * A [`wl_surface`](https://wayland.freedesktop.org/docs/html/apa.html#protocol-spec-wl_surface) that will be wrapped by the @ref WGPUSurface
     */
    public var surface: Pointer<Unit>
        get() = surfaceHandle.get(this.`$mem`, 0L) as MemorySegment
        set(`value`) {
            surfaceHandle.set(this.`$mem`, 0L, value)
        }

    public constructor(gc: Boolean) : this(kotlin.run {
        require(gc) { "Do not call this if gc is not want" }
        Arena.ofAuto().allocate(layout)
    })

    public companion object {
        public val layout: StructLayout = MemoryLayout.structLayout(
            WGPUChainedStruct.layout.withName("chain"),
            `$RuntimeHelper`.POINTER.withName("display"),
            `$RuntimeHelper`.POINTER.withName("surface"),
        ).withName("WGPUSurfaceSourceWaylandSurface")

        @JvmField
        public val chainHandle: MethodHandle =
            layout.sliceHandle(MemoryLayout.PathElement.groupElement("chain"))

        @JvmField
        public val displayHandle: VarHandle =
            layout.varHandle(MemoryLayout.PathElement.groupElement("display"))

        @JvmField
        public val surfaceHandle: VarHandle =
            layout.varHandle(MemoryLayout.PathElement.groupElement("surface"))

        @JvmStatic
        public fun allocate(alloc: SegmentAllocator): WGPUSurfaceSourceWaylandSurface =
            WGPUSurfaceSourceWaylandSurface(alloc.allocate(layout))
    }
}
