// this file is auto generated by endoqa kotlin ffi, modify it with caution
package lib.wgpu

import java.lang.foreign.*
import java.lang.invoke.MethodHandle

/**
 * TODO
 */
@JvmInline
public value class WGPUShaderSourceWGSL(
    public val `$mem`: MemorySegment,
) {
    public var chain: WGPUChainedStruct
        get() = WGPUChainedStruct(chainHandle.invokeExact(this.`$mem`, 0L) as MemorySegment)
        set(`value`) {
            MemorySegment.copy(value.`$mem`, 0L, this.chain.`$mem`, 0L, WGPUChainedStruct.layout.byteSize())
        }

    /**
     * TODO
     */
    public var code: WGPUStringView
        get() = WGPUStringView(codeHandle.invokeExact(this.`$mem`, 0L) as MemorySegment)
        set(`value`) {
            MemorySegment.copy(value.`$mem`, 0L, this.code.`$mem`, 0L, WGPUStringView.layout.byteSize())
        }

    public constructor(gc: Boolean) : this(kotlin.run {
        require(gc) { "Do not call this if gc is not want" }
        Arena.ofAuto().allocate(layout)
    })

    public companion object {
        public val layout: StructLayout = MemoryLayout.structLayout(
            WGPUChainedStruct.layout.withName("chain"),
            WGPUStringView.layout.withName("code"),
        ).withName("WGPUShaderSourceWGSL")

        @JvmField
        public val chainHandle: MethodHandle =
            layout.sliceHandle(MemoryLayout.PathElement.groupElement("chain"))

        @JvmField
        public val codeHandle: MethodHandle =
            layout.sliceHandle(MemoryLayout.PathElement.groupElement("code"))

        @JvmStatic
        public fun allocate(alloc: SegmentAllocator): WGPUShaderSourceWGSL =
            WGPUShaderSourceWGSL(alloc.allocate(layout))
    }
}
