// this file is auto generated by endoqa kotlin ffi, modify it with caution
package lib.wgpu

import java.lang.foreign.*
import java.lang.invoke.MethodHandle
import java.lang.invoke.VarHandle

/**
 * TODO
 */
@JvmInline
public value class WGPUInstanceDescriptor(
    public val `$mem`: MemorySegment,
) {
    public var nextInChain: Pointer<WGPUChainedStruct>
        get() = nextInChainHandle.get(this.`$mem`, 0L) as MemorySegment
        set(`value`) {
            nextInChainHandle.set(this.`$mem`, 0L, value)
        }

    /**
     * Instance capabilities to enable.
     */
    public var capabilities: WGPUInstanceCapabilities
        get() = WGPUInstanceCapabilities(
            capabilitiesHandle.invokeExact(
                this.`$mem`,
                0L
            ) as MemorySegment
        )
        set(`value`) {
            MemorySegment.copy(
                value.`$mem`,
                0L,
                this.capabilities.`$mem`,
                0L,
                WGPUInstanceCapabilities.layout.byteSize()
            )
        }

    public constructor(gc: Boolean) : this(kotlin.run {
        require(gc) { "Do not call this if gc is not want" }
        Arena.ofAuto().allocate(layout)
    })

    public companion object {
        public val layout: StructLayout = MemoryLayout.structLayout(
            `$RuntimeHelper`.POINTER.withName("nextInChain"),
            WGPUInstanceCapabilities.layout.withName("capabilities"),
        ).withName("WGPUInstanceDescriptor")

        @JvmField
        public val nextInChainHandle: VarHandle =
            layout.varHandle(MemoryLayout.PathElement.groupElement("nextInChain"))

        @JvmField
        public val capabilitiesHandle: MethodHandle =
            layout.sliceHandle(MemoryLayout.PathElement.groupElement("capabilities"))

        @JvmStatic
        public fun allocate(alloc: SegmentAllocator): WGPUInstanceDescriptor =
            WGPUInstanceDescriptor(alloc.allocate(layout))
    }
}
