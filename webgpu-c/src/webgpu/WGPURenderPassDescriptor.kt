// this file is auto generated by endoqa kotlin ffi, modify it with caution
package webgpu

import java.lang.foreign.*
import java.lang.invoke.VarHandle

@JvmInline
public value class WGPURenderPassDescriptor(
    public val `$mem`: MemorySegment,
) {
    public var nextInChain: Pointer<WGPUChainedStruct>
        get() = WGPURenderPassDescriptor.nextInChainHandle.get(this.`$mem`, 0L) as MemorySegment
        set(`value`) {
            WGPURenderPassDescriptor.nextInChainHandle.set(this.`$mem`, 0L, value)
        }

    public var label: Pointer<Byte>
        get() = WGPURenderPassDescriptor.labelHandle.get(this.`$mem`, 0L) as MemorySegment
        set(`value`) {
            WGPURenderPassDescriptor.labelHandle.set(this.`$mem`, 0L, value)
        }

    public var colorAttachmentCount: ULong
        get() = (WGPURenderPassDescriptor.colorAttachmentCountHandle.get(this.`$mem`, 0L) as
                Long).toULong()
        set(`value`) {
            WGPURenderPassDescriptor.colorAttachmentCountHandle.set(this.`$mem`, 0L, value.toLong())
        }

    public var colorAttachments: Pointer<WGPURenderPassColorAttachment>
        get() = WGPURenderPassDescriptor.colorAttachmentsHandle.get(this.`$mem`, 0L) as MemorySegment
        set(`value`) {
            WGPURenderPassDescriptor.colorAttachmentsHandle.set(this.`$mem`, 0L, value)
        }

    public var depthStencilAttachment: Pointer<WGPURenderPassDepthStencilAttachment>
        get() = WGPURenderPassDescriptor.depthStencilAttachmentHandle.get(this.`$mem`, 0L) as
                MemorySegment
        set(`value`) {
            WGPURenderPassDescriptor.depthStencilAttachmentHandle.set(this.`$mem`, 0L, value)
        }

    public var occlusionQuerySet: WGPUQuerySet
        get() = WGPURenderPassDescriptor.occlusionQuerySetHandle.get(this.`$mem`, 0L) as MemorySegment
        set(`value`) {
            WGPURenderPassDescriptor.occlusionQuerySetHandle.set(this.`$mem`, 0L, value)
        }

    public var timestampWrites: Pointer<WGPURenderPassTimestampWrites>
        get() = WGPURenderPassDescriptor.timestampWritesHandle.get(this.`$mem`, 0L) as MemorySegment
        set(`value`) {
            WGPURenderPassDescriptor.timestampWritesHandle.set(this.`$mem`, 0L, value)
        }

    public constructor(gc: Boolean) : this(kotlin.run {
        require(gc) { "Do not call this if gc is not want" }
        Arena.ofAuto().allocate(WGPURenderPassDescriptor.layout)
    })

    public companion object {
        public val layout: StructLayout = MemoryLayout.structLayout(
            `$RuntimeHelper`.POINTER.withName("nextInChain"),
            `$RuntimeHelper`.POINTER.withName("label"),
            ValueLayout.JAVA_LONG.withName("colorAttachmentCount"),
            `$RuntimeHelper`.POINTER.withName("colorAttachments"),
            `$RuntimeHelper`.POINTER.withName("depthStencilAttachment"),
            `$RuntimeHelper`.POINTER.withName("occlusionQuerySet"),
            `$RuntimeHelper`.POINTER.withName("timestampWrites"),
        ).withName("WGPURenderPassDescriptor")

        @JvmField
        public val nextInChainHandle: VarHandle =
            layout.varHandle(MemoryLayout.PathElement.groupElement("nextInChain"))

        @JvmField
        public val labelHandle: VarHandle =
            layout.varHandle(MemoryLayout.PathElement.groupElement("label"))

        @JvmField
        public val colorAttachmentCountHandle: VarHandle =
            layout.varHandle(MemoryLayout.PathElement.groupElement("colorAttachmentCount"))

        @JvmField
        public val colorAttachmentsHandle: VarHandle =
            layout.varHandle(MemoryLayout.PathElement.groupElement("colorAttachments"))

        @JvmField
        public val depthStencilAttachmentHandle: VarHandle =
            layout.varHandle(MemoryLayout.PathElement.groupElement("depthStencilAttachment"))

        @JvmField
        public val occlusionQuerySetHandle: VarHandle =
            layout.varHandle(MemoryLayout.PathElement.groupElement("occlusionQuerySet"))

        @JvmField
        public val timestampWritesHandle: VarHandle =
            layout.varHandle(MemoryLayout.PathElement.groupElement("timestampWrites"))

        @JvmStatic
        public fun allocate(alloc: SegmentAllocator): WGPURenderPassDescriptor =
            WGPURenderPassDescriptor(alloc.allocate(WGPURenderPassDescriptor.layout))
    }
}
