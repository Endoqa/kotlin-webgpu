// this file is auto generated by endoqa kotlin ffi, modify it with caution
package webgpu

import java.lang.foreign.*
import java.lang.invoke.MethodHandle
import java.lang.invoke.VarHandle

@JvmInline
public value class WGPUComputePipelineDescriptor(
    public val `$mem`: MemorySegment,
) {
    public var nextInChain: Pointer<WGPUChainedStruct>
        get() = WGPUComputePipelineDescriptor.nextInChainHandle.get(this.`$mem`, 0L) as MemorySegment
        set(`value`) {
            WGPUComputePipelineDescriptor.nextInChainHandle.set(this.`$mem`, 0L, value)
        }

    public var label: Pointer<Byte>
        get() = WGPUComputePipelineDescriptor.labelHandle.get(this.`$mem`, 0L) as MemorySegment
        set(`value`) {
            WGPUComputePipelineDescriptor.labelHandle.set(this.`$mem`, 0L, value)
        }

    public var layout: WGPUPipelineLayout
        get() = WGPUComputePipelineDescriptor.layoutHandle.get(this.`$mem`, 0L) as MemorySegment
        set(`value`) {
            WGPUComputePipelineDescriptor.layoutHandle.set(this.`$mem`, 0L, value)
        }

    public var compute: WGPUProgrammableStageDescriptor
        get() =
            WGPUProgrammableStageDescriptor(
                WGPUComputePipelineDescriptor.computeHandle.invokeExact(
                    this.`$mem`,
                    0L
                ) as MemorySegment
            )
        set(`value`) {
            MemorySegment.copy(
                value.`$mem`, 0L, this.compute.`$mem`, 0L,
                WGPUProgrammableStageDescriptor.layout.byteSize()
            )
        }

    public constructor(gc: Boolean) : this(kotlin.run {
        require(gc) { "Do not call this if gc is not want" }
        Arena.ofAuto().allocate(WGPUComputePipelineDescriptor.layout)
    })

    public companion object {
        public val layout: StructLayout = MemoryLayout.structLayout(
            `$RuntimeHelper`.POINTER.withName("nextInChain"),
            `$RuntimeHelper`.POINTER.withName("label"),
            `$RuntimeHelper`.POINTER.withName("layout"),
            WGPUProgrammableStageDescriptor.layout.withName("compute"),
        ).withName("WGPUComputePipelineDescriptor")

        @JvmField
        public val nextInChainHandle: VarHandle =
            layout.varHandle(MemoryLayout.PathElement.groupElement("nextInChain"))

        @JvmField
        public val labelHandle: VarHandle =
            layout.varHandle(MemoryLayout.PathElement.groupElement("label"))

        @JvmField
        public val layoutHandle: VarHandle =
            layout.varHandle(MemoryLayout.PathElement.groupElement("layout"))

        @JvmField
        public val computeHandle: MethodHandle =
            layout.sliceHandle(MemoryLayout.PathElement.groupElement("compute"))

        @JvmStatic
        public fun allocate(alloc: SegmentAllocator): WGPUComputePipelineDescriptor =
            WGPUComputePipelineDescriptor(alloc.allocate(WGPUComputePipelineDescriptor.layout))
    }
}
