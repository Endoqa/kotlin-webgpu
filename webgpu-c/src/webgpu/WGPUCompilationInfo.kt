// this file is auto generated by endoqa kotlin ffi, modify it with caution
package webgpu

import java.lang.foreign.*
import java.lang.invoke.VarHandle

@JvmInline
public value class WGPUCompilationInfo(
    public val `$mem`: MemorySegment,
) {
    public var nextInChain: Pointer<WGPUChainedStruct>
        get() = WGPUCompilationInfo.nextInChainHandle.get(this.`$mem`, 0L) as MemorySegment
        set(`value`) {
            WGPUCompilationInfo.nextInChainHandle.set(this.`$mem`, 0L, value)
        }

    public var messageCount: ULong
        get() = (WGPUCompilationInfo.messageCountHandle.get(this.`$mem`, 0L) as Long).toULong()
        set(`value`) {
            WGPUCompilationInfo.messageCountHandle.set(this.`$mem`, 0L, value.toLong())
        }

    public var messages: Pointer<WGPUCompilationMessage>
        get() = WGPUCompilationInfo.messagesHandle.get(this.`$mem`, 0L) as MemorySegment
        set(`value`) {
            WGPUCompilationInfo.messagesHandle.set(this.`$mem`, 0L, value)
        }

    public constructor(gc: Boolean) : this(kotlin.run {
        require(gc) { "Do not call this if gc is not want" }
        Arena.ofAuto().allocate(WGPUCompilationInfo.layout)
    })

    public companion object {
        public val layout: StructLayout = MemoryLayout.structLayout(
            `$RuntimeHelper`.POINTER.withName("nextInChain"),
            ValueLayout.JAVA_LONG.withName("messageCount"),
            `$RuntimeHelper`.POINTER.withName("messages"),
        ).withName("WGPUCompilationInfo")

        @JvmField
        public val nextInChainHandle: VarHandle =
            layout.varHandle(MemoryLayout.PathElement.groupElement("nextInChain"))

        @JvmField
        public val messageCountHandle: VarHandle =
            layout.varHandle(MemoryLayout.PathElement.groupElement("messageCount"))

        @JvmField
        public val messagesHandle: VarHandle =
            layout.varHandle(MemoryLayout.PathElement.groupElement("messages"))

        @JvmStatic
        public fun allocate(alloc: SegmentAllocator): WGPUCompilationInfo =
            WGPUCompilationInfo(alloc.allocate(WGPUCompilationInfo.layout))
    }
}
