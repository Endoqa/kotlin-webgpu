// this file is auto generated by endoqa kotlin ffi, modify it with caution
package webgpu

import java.lang.foreign.*
import java.lang.invoke.MethodHandle
import java.lang.invoke.VarHandle

@JvmInline
public value class WGPURenderPassColorAttachment(
    public val `$mem`: MemorySegment,
) {
    public var nextInChain: Pointer<WGPUChainedStruct>
        get() = WGPURenderPassColorAttachment.nextInChainHandle.get(this.`$mem`, 0L) as MemorySegment
        set(`value`) {
            WGPURenderPassColorAttachment.nextInChainHandle.set(this.`$mem`, 0L, value)
        }

    public var view: WGPUTextureView
        get() = WGPURenderPassColorAttachment.viewHandle.get(this.`$mem`, 0L) as MemorySegment
        set(`value`) {
            WGPURenderPassColorAttachment.viewHandle.set(this.`$mem`, 0L, value)
        }

    public var depthSlice: uint32_t
        get() = (WGPURenderPassColorAttachment.depthSliceHandle.get(this.`$mem`, 0L) as Int).toUInt()
        set(`value`) {
            WGPURenderPassColorAttachment.depthSliceHandle.set(this.`$mem`, 0L, value.toInt())
        }

    public var resolveTarget: WGPUTextureView
        get() = WGPURenderPassColorAttachment.resolveTargetHandle.get(this.`$mem`, 0L) as MemorySegment
        set(`value`) {
            WGPURenderPassColorAttachment.resolveTargetHandle.set(this.`$mem`, 0L, value)
        }

    public var loadOp: WGPULoadOp
        get() = WGPULoadOp.fromInt(
            WGPURenderPassColorAttachment.loadOpHandle.get(this.`$mem`, 0L) as
                    Int
        )
        set(`value`) {
            WGPURenderPassColorAttachment.loadOpHandle.set(this.`$mem`, 0L, value.value)
        }

    public var storeOp: WGPUStoreOp
        get() = WGPUStoreOp.fromInt(
            WGPURenderPassColorAttachment.storeOpHandle.get(this.`$mem`, 0L) as
                    Int
        )
        set(`value`) {
            WGPURenderPassColorAttachment.storeOpHandle.set(this.`$mem`, 0L, value.value)
        }

    public var clearValue: WGPUColor
        get() = WGPUColor(
            WGPURenderPassColorAttachment.clearValueHandle.invokeExact(this.`$mem`, 0L) as
                    MemorySegment
        )
        set(`value`) {
            MemorySegment.copy(value.`$mem`, 0L, this.clearValue.`$mem`, 0L, WGPUColor.layout.byteSize())
        }

    public constructor(gc: Boolean) : this(kotlin.run {
        require(gc) { "Do not call this if gc is not want" }
        Arena.ofAuto().allocate(WGPURenderPassColorAttachment.layout)
    })

    public companion object {
        public val layout: StructLayout = MemoryLayout.structLayout(
            `$RuntimeHelper`.POINTER.withName("nextInChain"),
            `$RuntimeHelper`.POINTER.withName("view"),
            ValueLayout.JAVA_INT.withName("depthSlice"),
            java.lang.foreign.MemoryLayout.paddingLayout(4),
            `$RuntimeHelper`.POINTER.withName("resolveTarget"),
            ValueLayout.JAVA_INT.withName("loadOp"),
            ValueLayout.JAVA_INT.withName("storeOp"),
            WGPUColor.layout.withName("clearValue"),
        ).withName("WGPURenderPassColorAttachment")

        @JvmField
        public val nextInChainHandle: VarHandle =
            layout.varHandle(MemoryLayout.PathElement.groupElement("nextInChain"))

        @JvmField
        public val viewHandle: VarHandle =
            layout.varHandle(MemoryLayout.PathElement.groupElement("view"))

        @JvmField
        public val depthSliceHandle: VarHandle =
            layout.varHandle(MemoryLayout.PathElement.groupElement("depthSlice"))

        @JvmField
        public val resolveTargetHandle: VarHandle =
            layout.varHandle(MemoryLayout.PathElement.groupElement("resolveTarget"))

        @JvmField
        public val loadOpHandle: VarHandle =
            layout.varHandle(MemoryLayout.PathElement.groupElement("loadOp"))

        @JvmField
        public val storeOpHandle: VarHandle =
            layout.varHandle(MemoryLayout.PathElement.groupElement("storeOp"))

        @JvmField
        public val clearValueHandle: MethodHandle =
            layout.sliceHandle(MemoryLayout.PathElement.groupElement("clearValue"))

        @JvmStatic
        public fun allocate(alloc: SegmentAllocator): WGPURenderPassColorAttachment =
            WGPURenderPassColorAttachment(alloc.allocate(WGPURenderPassColorAttachment.layout))
    }
}
