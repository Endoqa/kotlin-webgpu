// this file is auto generated by endoqa kotlin ffi, modify it with caution
package webgpu

import java.lang.foreign.Arena
import java.lang.foreign.MemoryLayout
import java.lang.foreign.MemorySegment
import java.lang.foreign.SegmentAllocator
import java.lang.foreign.StructLayout
import java.lang.foreign.ValueLayout
import java.lang.invoke.MethodHandle
import java.lang.invoke.VarHandle
import kotlin.Boolean
import kotlin.Byte
import kotlin.Long
import kotlin.ULong
import kotlin.Unit
import kotlin.jvm.JvmField
import kotlin.jvm.JvmInline
import kotlin.jvm.JvmStatic

@JvmInline
public value class WGPUDeviceDescriptor(
    public val `$mem`: MemorySegment,
) {
    public var nextInChain: Pointer<WGPUChainedStruct>
        get() = nextInChainHandle.get(this.`$mem`, 0L) as MemorySegment
        set(`value`) {
            nextInChainHandle.set(this.`$mem`, 0L, value)
        }

    public var label: Pointer<Byte>
        get() = labelHandle.get(this.`$mem`, 0L) as MemorySegment
        set(`value`) {
            labelHandle.set(this.`$mem`, 0L, value)
        }

    public var requiredFeatureCount: ULong
        get() = (requiredFeatureCountHandle.get(this.`$mem`, 0L) as Long).toULong()
        set(`value`) {
            requiredFeatureCountHandle.set(this.`$mem`, 0L, value.toLong())
        }

    public var requiredFeatures: Pointer<WGPUFeatureName>
        get() = requiredFeaturesHandle.get(this.`$mem`, 0L) as MemorySegment
        set(`value`) {
            requiredFeaturesHandle.set(this.`$mem`, 0L, value)
        }

    public var requiredLimits: Pointer<WGPURequiredLimits>
        get() = requiredLimitsHandle.get(this.`$mem`, 0L) as MemorySegment
        set(`value`) {
            requiredLimitsHandle.set(this.`$mem`, 0L, value)
        }

    public var defaultQueue: WGPUQueueDescriptor
        get() = WGPUQueueDescriptor(
            defaultQueueHandle.invokeExact(this.`$mem`, 0L)
                    as MemorySegment
        )
        set(`value`) {
            MemorySegment.copy(
                value.`$mem`, 0L, this.defaultQueue.`$mem`, 0L,
                WGPUQueueDescriptor.layout.byteSize()
            )
        }

    public var deviceLostCallback: WGPUDeviceLostCallback
        get() = deviceLostCallbackHandle.get(this.`$mem`, 0L) as MemorySegment
        set(`value`) {
            deviceLostCallbackHandle.set(this.`$mem`, 0L, value)
        }

    public var deviceLostUserdata: Pointer<Unit>
        get() = deviceLostUserdataHandle.get(this.`$mem`, 0L) as MemorySegment
        set(`value`) {
            deviceLostUserdataHandle.set(this.`$mem`, 0L, value)
        }

    public var deviceLostCallbackInfo: WGPUDeviceLostCallbackInfo
        get() =
            WGPUDeviceLostCallbackInfo(
                deviceLostCallbackInfoHandle.invokeExact(
                    this.`$mem`,
                    0L
                ) as MemorySegment
            )
        set(`value`) {
            MemorySegment.copy(
                value.`$mem`, 0L, this.deviceLostCallbackInfo.`$mem`, 0L,
                WGPUDeviceLostCallbackInfo.layout.byteSize()
            )
        }

    public var uncapturedErrorCallbackInfo: WGPUUncapturedErrorCallbackInfo
        get() =
            WGPUUncapturedErrorCallbackInfo(
                uncapturedErrorCallbackInfoHandle.invokeExact(
                    this.`$mem`,
                    0L
                ) as MemorySegment
            )
        set(`value`) {
            MemorySegment.copy(
                value.`$mem`, 0L, this.uncapturedErrorCallbackInfo.`$mem`, 0L,
                WGPUUncapturedErrorCallbackInfo.layout.byteSize()
            )
        }

    public constructor(gc: Boolean) : this(kotlin.run {
        require(gc) { "Do not call this if gc is not want" }
        Arena.ofAuto().allocate(layout)
    })

    public companion object {
        public val layout: StructLayout = MemoryLayout.structLayout(
            `$RuntimeHelper`.POINTER.withName("nextInChain"),
            `$RuntimeHelper`.POINTER.withName("label"),
            ValueLayout.JAVA_LONG.withName("requiredFeatureCount"),
            `$RuntimeHelper`.POINTER.withName("requiredFeatures"),
            `$RuntimeHelper`.POINTER.withName("requiredLimits"),
            WGPUQueueDescriptor.layout.withName("defaultQueue"),
            `$RuntimeHelper`.POINTER.withName("deviceLostCallback"),
            `$RuntimeHelper`.POINTER.withName("deviceLostUserdata"),
            WGPUDeviceLostCallbackInfo.layout.withName("deviceLostCallbackInfo"),
            WGPUUncapturedErrorCallbackInfo.layout.withName("uncapturedErrorCallbackInfo"),
        ).withName("WGPUDeviceDescriptor")

        @JvmField
        public val nextInChainHandle: VarHandle =
            layout.varHandle(MemoryLayout.PathElement.groupElement("nextInChain"))

        @JvmField
        public val labelHandle: VarHandle =
            layout.varHandle(MemoryLayout.PathElement.groupElement("label"))

        @JvmField
        public val requiredFeatureCountHandle: VarHandle =
            layout.varHandle(MemoryLayout.PathElement.groupElement("requiredFeatureCount"))

        @JvmField
        public val requiredFeaturesHandle: VarHandle =
            layout.varHandle(MemoryLayout.PathElement.groupElement("requiredFeatures"))

        @JvmField
        public val requiredLimitsHandle: VarHandle =
            layout.varHandle(MemoryLayout.PathElement.groupElement("requiredLimits"))

        @JvmField
        public val defaultQueueHandle: MethodHandle =
            layout.sliceHandle(MemoryLayout.PathElement.groupElement("defaultQueue"))

        @JvmField
        public val deviceLostCallbackHandle: VarHandle =
            layout.varHandle(MemoryLayout.PathElement.groupElement("deviceLostCallback"))

        @JvmField
        public val deviceLostUserdataHandle: VarHandle =
            layout.varHandle(MemoryLayout.PathElement.groupElement("deviceLostUserdata"))

        @JvmField
        public val deviceLostCallbackInfoHandle: MethodHandle =
            layout.sliceHandle(MemoryLayout.PathElement.groupElement("deviceLostCallbackInfo"))

        @JvmField
        public val uncapturedErrorCallbackInfoHandle: MethodHandle =
            layout.sliceHandle(MemoryLayout.PathElement.groupElement("uncapturedErrorCallbackInfo"))

        @JvmStatic
        public fun allocate(alloc: SegmentAllocator): WGPUDeviceDescriptor =
            WGPUDeviceDescriptor(alloc.allocate(layout))
    }
}
