// this file is auto generated by endoqa kotlin ffi, modify it with caution
package webgpu

import java.lang.foreign.*
import java.lang.invoke.MethodHandle
import java.lang.invoke.MethodHandles
import java.lang.invoke.VarHandle

@JvmInline
public value class WGPUDawnCacheDeviceDescriptor(
    public val `$mem`: MemorySegment,
) {
    public var chain: WGPUChainedStruct
        get() = WGPUChainedStruct(
            WGPUDawnCacheDeviceDescriptor.chainHandle.invokeExact(this.`$mem`, 0L)
                    as MemorySegment
        )
        set(`value`) {
            MemorySegment.copy(
                value.`$mem`, 0L, this.chain.`$mem`, 0L,
                WGPUChainedStruct.layout.byteSize()
            )
        }

    public var isolationKey: Pointer<Byte>
        get() = WGPUDawnCacheDeviceDescriptor.isolationKeyHandle.get(this.`$mem`, 0L) as MemorySegment
        set(`value`) {
            WGPUDawnCacheDeviceDescriptor.isolationKeyHandle.set(this.`$mem`, 0L, value)
        }

    public var loadDataFunction: WGPUDawnLoadCacheDataFunction
        get() = WGPUDawnCacheDeviceDescriptor.loadDataFunctionHandle.get(this.`$mem`, 0L) as
                MemorySegment
        set(`value`) {
            WGPUDawnCacheDeviceDescriptor.loadDataFunctionHandle.set(this.`$mem`, 0L, value)
        }

    public var storeDataFunction: WGPUDawnStoreCacheDataFunction
        get() = WGPUDawnCacheDeviceDescriptor.storeDataFunctionHandle.get(this.`$mem`, 0L) as
                MemorySegment
        set(`value`) {
            WGPUDawnCacheDeviceDescriptor.storeDataFunctionHandle.set(this.`$mem`, 0L, value)
        }

    public var functionUserdata: Pointer<Unit>
        get() = WGPUDawnCacheDeviceDescriptor.functionUserdataHandle.get(this.`$mem`, 0L) as
                MemorySegment
        set(`value`) {
            WGPUDawnCacheDeviceDescriptor.functionUserdataHandle.set(this.`$mem`, 0L, value)
        }

    public constructor(gc: Boolean) : this(kotlin.run {
        require(gc) { "Do not call this if gc is not want" }
        Arena.ofAuto().allocate(WGPUDawnCacheDeviceDescriptor.layout)
    })

    public companion object {
        public val layout: StructLayout = MemoryLayout.structLayout(
            WGPUChainedStruct.layout.withName("chain"),
            `$RuntimeHelper`.POINTER.withName("isolationKey"),
            `$RuntimeHelper`.POINTER.withName("loadDataFunction"),
            `$RuntimeHelper`.POINTER.withName("storeDataFunction"),
            `$RuntimeHelper`.POINTER.withName("functionUserdata"),
        ).withName("WGPUDawnCacheDeviceDescriptor")

        @JvmField
        public val chainHandle: MethodHandle =
            layout.sliceHandle(MemoryLayout.PathElement.groupElement("chain"))

        @JvmField
        public val isolationKeyHandle: VarHandle =
            layout.varHandle(MemoryLayout.PathElement.groupElement("isolationKey"))

        @JvmField
        public val loadDataFunctionHandle: VarHandle =
            layout.varHandle(MemoryLayout.PathElement.groupElement("loadDataFunction"))

        @JvmField
        public val storeDataFunctionHandle: VarHandle =
            layout.varHandle(MemoryLayout.PathElement.groupElement("storeDataFunction"))

        @JvmField
        public val functionUserdataHandle: VarHandle =
            layout.varHandle(MemoryLayout.PathElement.groupElement("functionUserdata"))

        @JvmStatic
        public fun allocate(alloc: SegmentAllocator): WGPUDawnCacheDeviceDescriptor =
            WGPUDawnCacheDeviceDescriptor(alloc.allocate(WGPUDawnCacheDeviceDescriptor.layout))

        public fun interface loadDataFunction {
            public fun invoke(
                key: Pointer<Unit>,
                keySize: ULong,
                `value`: Pointer<Unit>,
                valueSize: ULong,
                userdata: Pointer<Unit>,
            ): ULong

            public fun allocate(arena: Arena): MemorySegment =
                Linker.nativeLinker().upcallStub(invokeHandle.bindTo(this), fd, arena)

            public companion object {
                @JvmStatic
                public val invokeHandle: MethodHandle =
                    MethodHandles.lookup().unreflect(loadDataFunction::class.java.methods.find {
                        it.name == "invoke"
                    }
                    )

                @JvmStatic
                public val fd: FunctionDescriptor = FunctionDescriptor.of(
                    ValueLayout.JAVA_LONG,
                    `$RuntimeHelper`.POINTER,
                    ValueLayout.JAVA_LONG,
                    `$RuntimeHelper`.POINTER,
                    ValueLayout.JAVA_LONG,
                    `$RuntimeHelper`.POINTER,
                )
            }
        }

        public fun interface storeDataFunction {
            public fun invoke(
                key: Pointer<Unit>,
                keySize: ULong,
                `value`: Pointer<Unit>,
                valueSize: ULong,
                userdata: Pointer<Unit>,
            )

            public fun allocate(arena: Arena): MemorySegment =
                Linker.nativeLinker().upcallStub(invokeHandle.bindTo(this), fd, arena)

            public companion object {
                @JvmStatic
                public val invokeHandle: MethodHandle =
                    MethodHandles.lookup().unreflect(storeDataFunction::class.java.methods.find {
                        it.name == "invoke"
                    }
                    )

                @JvmStatic
                public val fd: FunctionDescriptor = FunctionDescriptor.ofVoid(
                    `$RuntimeHelper`.POINTER,
                    ValueLayout.JAVA_LONG,
                    `$RuntimeHelper`.POINTER,
                    ValueLayout.JAVA_LONG,
                    `$RuntimeHelper`.POINTER,
                )
            }
        }
    }
}
