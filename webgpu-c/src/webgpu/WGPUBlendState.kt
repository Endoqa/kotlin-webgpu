// this file is auto generated by endoqa kotlin ffi, modify it with caution
package webgpu

import java.lang.foreign.*
import java.lang.invoke.MethodHandle

@JvmInline
public value class WGPUBlendState(
    public val `$mem`: MemorySegment,
) {
    public var color: WGPUBlendComponent
        get() = WGPUBlendComponent(
            colorHandle.invokeExact(this.`$mem`, 0L) as
                    MemorySegment
        )
        set(`value`) {
            MemorySegment.copy(
                value.`$mem`, 0L, this.color.`$mem`, 0L,
                WGPUBlendComponent.layout.byteSize()
            )
        }

    public var alpha: WGPUBlendComponent
        get() = WGPUBlendComponent(
            alphaHandle.invokeExact(this.`$mem`, 0L) as
                    MemorySegment
        )
        set(`value`) {
            MemorySegment.copy(
                value.`$mem`, 0L, this.alpha.`$mem`, 0L,
                WGPUBlendComponent.layout.byteSize()
            )
        }

    public constructor(gc: Boolean) : this(kotlin.run {
        require(gc) { "Do not call this if gc is not want" }
        Arena.ofAuto().allocate(layout)
    })

    public companion object {
        public val layout: StructLayout = MemoryLayout.structLayout(
            WGPUBlendComponent.layout.withName("color"),
            WGPUBlendComponent.layout.withName("alpha"),
        ).withName("WGPUBlendState")

        @JvmField
        public val colorHandle: MethodHandle =
            layout.sliceHandle(MemoryLayout.PathElement.groupElement("color"))

        @JvmField
        public val alphaHandle: MethodHandle =
            layout.sliceHandle(MemoryLayout.PathElement.groupElement("alpha"))

        @JvmStatic
        public fun allocate(alloc: SegmentAllocator): WGPUBlendState =
            WGPUBlendState(alloc.allocate(layout))
    }
}
