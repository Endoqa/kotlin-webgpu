// this file is auto generated by endoqa kotlin ffi, modify it with caution
package webgpu

import java.lang.foreign.*
import java.lang.invoke.VarHandle

@JvmInline
public value class WGPUCopyTextureForBrowserOptions(
    public val `$mem`: MemorySegment,
) {
    public var nextInChain: Pointer<WGPUChainedStruct>
        get() = WGPUCopyTextureForBrowserOptions.nextInChainHandle.get(this.`$mem`, 0L) as MemorySegment
        set(`value`) {
            WGPUCopyTextureForBrowserOptions.nextInChainHandle.set(this.`$mem`, 0L, value)
        }

    public var flipY: WGPUBool
        get() = (WGPUCopyTextureForBrowserOptions.flipYHandle.get(this.`$mem`, 0L) as Int).toUInt()
        set(`value`) {
            WGPUCopyTextureForBrowserOptions.flipYHandle.set(this.`$mem`, 0L, value.toInt())
        }

    public var needsColorSpaceConversion: WGPUBool
        get() = (WGPUCopyTextureForBrowserOptions.needsColorSpaceConversionHandle.get(this.`$mem`, 0L)
                as Int).toUInt()
        set(`value`) {
            WGPUCopyTextureForBrowserOptions.needsColorSpaceConversionHandle.set(
                this.`$mem`,
                0L, value.toInt()
            )
        }

    public var srcAlphaMode: WGPUAlphaMode
        get() =
            WGPUAlphaMode.fromInt(
                WGPUCopyTextureForBrowserOptions.srcAlphaModeHandle.get(
                    this.`$mem`,
                    0L
                ) as Int
            )
        set(`value`) {
            WGPUCopyTextureForBrowserOptions.srcAlphaModeHandle.set(this.`$mem`, 0L, value.value)
        }

    public var srcTransferFunctionParameters: Pointer<Float>
        get() = WGPUCopyTextureForBrowserOptions.srcTransferFunctionParametersHandle.get(
            this.`$mem`,
            0L
        ) as MemorySegment
        set(`value`) {
            WGPUCopyTextureForBrowserOptions.srcTransferFunctionParametersHandle.set(
                this.`$mem`, 0L,
                value
            )
        }

    public var conversionMatrix: Pointer<Float>
        get() = WGPUCopyTextureForBrowserOptions.conversionMatrixHandle.get(this.`$mem`, 0L) as
                MemorySegment
        set(`value`) {
            WGPUCopyTextureForBrowserOptions.conversionMatrixHandle.set(this.`$mem`, 0L, value)
        }

    public var dstTransferFunctionParameters: Pointer<Float>
        get() = WGPUCopyTextureForBrowserOptions.dstTransferFunctionParametersHandle.get(
            this.`$mem`,
            0L
        ) as MemorySegment
        set(`value`) {
            WGPUCopyTextureForBrowserOptions.dstTransferFunctionParametersHandle.set(
                this.`$mem`, 0L,
                value
            )
        }

    public var dstAlphaMode: WGPUAlphaMode
        get() =
            WGPUAlphaMode.fromInt(
                WGPUCopyTextureForBrowserOptions.dstAlphaModeHandle.get(
                    this.`$mem`,
                    0L
                ) as Int
            )
        set(`value`) {
            WGPUCopyTextureForBrowserOptions.dstAlphaModeHandle.set(this.`$mem`, 0L, value.value)
        }

    public var internalUsage: WGPUBool
        get() = (WGPUCopyTextureForBrowserOptions.internalUsageHandle.get(this.`$mem`, 0L) as
                Int).toUInt()
        set(`value`) {
            WGPUCopyTextureForBrowserOptions.internalUsageHandle.set(this.`$mem`, 0L, value.toInt())
        }

    public constructor(gc: Boolean) : this(kotlin.run {
        require(gc) { "Do not call this if gc is not want" }
        Arena.ofAuto().allocate(WGPUCopyTextureForBrowserOptions.layout)
    })

    public companion object {
        public val layout: StructLayout = MemoryLayout.structLayout(
            `$RuntimeHelper`.POINTER.withName("nextInChain"),
            ValueLayout.JAVA_INT.withName("flipY"),
            ValueLayout.JAVA_INT.withName("needsColorSpaceConversion"),
            ValueLayout.JAVA_INT.withName("srcAlphaMode"),
            java.lang.foreign.MemoryLayout.paddingLayout(4),
            `$RuntimeHelper`.POINTER.withName("srcTransferFunctionParameters"),
            `$RuntimeHelper`.POINTER.withName("conversionMatrix"),
            `$RuntimeHelper`.POINTER.withName("dstTransferFunctionParameters"),
            ValueLayout.JAVA_INT.withName("dstAlphaMode"),
            ValueLayout.JAVA_INT.withName("internalUsage"),
        ).withName("WGPUCopyTextureForBrowserOptions")

        @JvmField
        public val nextInChainHandle: VarHandle =
            layout.varHandle(MemoryLayout.PathElement.groupElement("nextInChain"))

        @JvmField
        public val flipYHandle: VarHandle =
            layout.varHandle(MemoryLayout.PathElement.groupElement("flipY"))

        @JvmField
        public val needsColorSpaceConversionHandle: VarHandle =
            layout.varHandle(MemoryLayout.PathElement.groupElement("needsColorSpaceConversion"))

        @JvmField
        public val srcAlphaModeHandle: VarHandle =
            layout.varHandle(MemoryLayout.PathElement.groupElement("srcAlphaMode"))

        @JvmField
        public val srcTransferFunctionParametersHandle: VarHandle =
            layout.varHandle(MemoryLayout.PathElement.groupElement("srcTransferFunctionParameters"))

        @JvmField
        public val conversionMatrixHandle: VarHandle =
            layout.varHandle(MemoryLayout.PathElement.groupElement("conversionMatrix"))

        @JvmField
        public val dstTransferFunctionParametersHandle: VarHandle =
            layout.varHandle(MemoryLayout.PathElement.groupElement("dstTransferFunctionParameters"))

        @JvmField
        public val dstAlphaModeHandle: VarHandle =
            layout.varHandle(MemoryLayout.PathElement.groupElement("dstAlphaMode"))

        @JvmField
        public val internalUsageHandle: VarHandle =
            layout.varHandle(MemoryLayout.PathElement.groupElement("internalUsage"))

        @JvmStatic
        public fun allocate(alloc: SegmentAllocator): WGPUCopyTextureForBrowserOptions =
            WGPUCopyTextureForBrowserOptions(alloc.allocate(WGPUCopyTextureForBrowserOptions.layout))
    }
}
