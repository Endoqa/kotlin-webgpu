// this file is auto generated by endoqa kotlin ffi, modify it with caution
package webgpu

import java.lang.foreign.Arena
import java.lang.foreign.MemoryLayout
import java.lang.foreign.MemorySegment
import java.lang.foreign.SegmentAllocator
import java.lang.foreign.StructLayout
import java.lang.foreign.ValueLayout
import java.lang.invoke.VarHandle
import kotlin.Boolean
import kotlin.Float
import kotlin.Int
import kotlin.jvm.JvmField
import kotlin.jvm.JvmInline
import kotlin.jvm.JvmStatic

@JvmInline
public value class WGPUCopyTextureForBrowserOptions(
    public val `$mem`: MemorySegment,
) {
    public var nextInChain: Pointer<WGPUChainedStruct>
        get() = nextInChainHandle.get(this.`$mem`, 0L) as MemorySegment
        set(`value`) {
            nextInChainHandle.set(this.`$mem`, 0L, value)
        }

    public var flipY: WGPUBool
        get() = (flipYHandle.get(this.`$mem`, 0L) as Int).toUInt()
        set(`value`) {
            flipYHandle.set(this.`$mem`, 0L, value.toInt())
        }

    public var needsColorSpaceConversion: WGPUBool
        get() = (needsColorSpaceConversionHandle.get(this.`$mem`, 0L)
                as Int).toUInt()
        set(`value`) {
            needsColorSpaceConversionHandle.set(
                this.`$mem`,
                0L, value.toInt()
            )
        }

    public var srcAlphaMode: WGPUAlphaMode
        get() =
            WGPUAlphaMode.fromInt(
                srcAlphaModeHandle.get(
                    this.`$mem`,
                    0L
                ) as Int
            )
        set(`value`) {
            srcAlphaModeHandle.set(this.`$mem`, 0L, value.value)
        }

    public var srcTransferFunctionParameters: Pointer<Float>
        get() = srcTransferFunctionParametersHandle.get(
            this.`$mem`,
            0L
        ) as MemorySegment
        set(`value`) {
            srcTransferFunctionParametersHandle.set(
                this.`$mem`, 0L,
                value
            )
        }

    public var conversionMatrix: Pointer<Float>
        get() = conversionMatrixHandle.get(this.`$mem`, 0L) as
                MemorySegment
        set(`value`) {
            conversionMatrixHandle.set(this.`$mem`, 0L, value)
        }

    public var dstTransferFunctionParameters: Pointer<Float>
        get() = dstTransferFunctionParametersHandle.get(
            this.`$mem`,
            0L
        ) as MemorySegment
        set(`value`) {
            dstTransferFunctionParametersHandle.set(
                this.`$mem`, 0L,
                value
            )
        }

    public var dstAlphaMode: WGPUAlphaMode
        get() =
            WGPUAlphaMode.fromInt(
                dstAlphaModeHandle.get(
                    this.`$mem`,
                    0L
                ) as Int
            )
        set(`value`) {
            dstAlphaModeHandle.set(this.`$mem`, 0L, value.value)
        }

    public var internalUsage: WGPUBool
        get() = (internalUsageHandle.get(this.`$mem`, 0L) as
                Int).toUInt()
        set(`value`) {
            internalUsageHandle.set(this.`$mem`, 0L, value.toInt())
        }

    public constructor(gc: Boolean) : this(kotlin.run {
        require(gc) { "Do not call this if gc is not want" }
        Arena.ofAuto().allocate(layout)
    })

    public companion object {
        public val layout: StructLayout = MemoryLayout.structLayout(
            `$RuntimeHelper`.POINTER.withName("nextInChain"),
            ValueLayout.JAVA_INT.withName("flipY"),
            ValueLayout.JAVA_INT.withName("needsColorSpaceConversion"),
            ValueLayout.JAVA_INT.withName("srcAlphaMode"),
            MemoryLayout.paddingLayout(4),
            `$RuntimeHelper`.POINTER.withName("srcTransferFunctionParameters"),
            `$RuntimeHelper`.POINTER.withName("conversionMatrix"),
            `$RuntimeHelper`.POINTER.withName("dstTransferFunctionParameters"),
            ValueLayout.JAVA_INT.withName("dstAlphaMode"),
            ValueLayout.JAVA_INT.withName("internalUsage"),
        ).withName("WGPUCopyTextureForBrowserOptions")

        @JvmField
        public val nextInChainHandle: VarHandle =
            layout.varHandle(MemoryLayout.PathElement.groupElement("nextInChain"))

        @JvmField
        public val flipYHandle: VarHandle =
            layout.varHandle(MemoryLayout.PathElement.groupElement("flipY"))

        @JvmField
        public val needsColorSpaceConversionHandle: VarHandle =
            layout.varHandle(MemoryLayout.PathElement.groupElement("needsColorSpaceConversion"))

        @JvmField
        public val srcAlphaModeHandle: VarHandle =
            layout.varHandle(MemoryLayout.PathElement.groupElement("srcAlphaMode"))

        @JvmField
        public val srcTransferFunctionParametersHandle: VarHandle =
            layout.varHandle(MemoryLayout.PathElement.groupElement("srcTransferFunctionParameters"))

        @JvmField
        public val conversionMatrixHandle: VarHandle =
            layout.varHandle(MemoryLayout.PathElement.groupElement("conversionMatrix"))

        @JvmField
        public val dstTransferFunctionParametersHandle: VarHandle =
            layout.varHandle(MemoryLayout.PathElement.groupElement("dstTransferFunctionParameters"))

        @JvmField
        public val dstAlphaModeHandle: VarHandle =
            layout.varHandle(MemoryLayout.PathElement.groupElement("dstAlphaMode"))

        @JvmField
        public val internalUsageHandle: VarHandle =
            layout.varHandle(MemoryLayout.PathElement.groupElement("internalUsage"))

        @JvmStatic
        public fun allocate(alloc: SegmentAllocator): WGPUCopyTextureForBrowserOptions =
            WGPUCopyTextureForBrowserOptions(alloc.allocate(layout))
    }
}
