// this file is auto generated by endoqa kotlin ffi, modify it with caution
package webgpu

import java.lang.foreign.Arena
import java.lang.foreign.MemoryLayout
import java.lang.foreign.MemorySegment
import java.lang.foreign.SegmentAllocator
import java.lang.foreign.StructLayout
import java.lang.invoke.MethodHandle
import java.lang.invoke.VarHandle
import kotlin.Boolean
import kotlin.Byte
import kotlin.jvm.JvmField
import kotlin.jvm.JvmInline
import kotlin.jvm.JvmStatic

@JvmInline
public value class WGPURenderPipelineDescriptor(
    public val `$mem`: MemorySegment,
) {
    public var nextInChain: Pointer<WGPUChainedStruct>
        get() = nextInChainHandle.get(this.`$mem`, 0L) as MemorySegment
        set(`value`) {
            nextInChainHandle.set(this.`$mem`, 0L, value)
        }

    public var label: Pointer<Byte>
        get() = labelHandle.get(this.`$mem`, 0L) as MemorySegment
        set(`value`) {
            labelHandle.set(this.`$mem`, 0L, value)
        }

    public var layout: WGPUPipelineLayout
        get() = layoutHandle.get(this.`$mem`, 0L) as MemorySegment
        set(`value`) {
            layoutHandle.set(this.`$mem`, 0L, value)
        }

    public var vertex: WGPUVertexState
        get() = WGPUVertexState(
            vertexHandle.invokeExact(this.`$mem`, 0L)
                    as MemorySegment
        )
        set(`value`) {
            MemorySegment.copy(
                value.`$mem`, 0L, this.vertex.`$mem`, 0L,
                WGPUVertexState.layout.byteSize()
            )
        }

    public var primitive: WGPUPrimitiveState
        get() = WGPUPrimitiveState(
            primitiveHandle.invokeExact(
                this.`$mem`,
                0L
            ) as MemorySegment
        )
        set(`value`) {
            MemorySegment.copy(
                value.`$mem`, 0L, this.primitive.`$mem`, 0L,
                WGPUPrimitiveState.layout.byteSize()
            )
        }

    public var depthStencil: Pointer<WGPUDepthStencilState>
        get() = depthStencilHandle.get(this.`$mem`, 0L) as MemorySegment
        set(`value`) {
            depthStencilHandle.set(this.`$mem`, 0L, value)
        }

    public var multisample: WGPUMultisampleState
        get() =
            WGPUMultisampleState(
                multisampleHandle.invokeExact(
                    this.`$mem`,
                    0L
                ) as MemorySegment
            )
        set(`value`) {
            MemorySegment.copy(
                value.`$mem`, 0L, this.multisample.`$mem`, 0L,
                WGPUMultisampleState.layout.byteSize()
            )
        }

    public var fragment: Pointer<WGPUFragmentState>
        get() = fragmentHandle.get(this.`$mem`, 0L) as MemorySegment
        set(`value`) {
            fragmentHandle.set(this.`$mem`, 0L, value)
        }

    public constructor(gc: Boolean) : this(kotlin.run {
        require(gc) { "Do not call this if gc is not want" }
        Arena.ofAuto().allocate(WGPURenderPipelineDescriptor.layout)
    })

    public companion object {
        public val layout: StructLayout = MemoryLayout.structLayout(
            `$RuntimeHelper`.POINTER.withName("nextInChain"),
            `$RuntimeHelper`.POINTER.withName("label"),
            `$RuntimeHelper`.POINTER.withName("layout"),
            WGPUVertexState.layout.withName("vertex"),
            WGPUPrimitiveState.layout.withName("primitive"),
            `$RuntimeHelper`.POINTER.withName("depthStencil"),
            WGPUMultisampleState.layout.withName("multisample"),
            `$RuntimeHelper`.POINTER.withName("fragment"),
        ).withName("WGPURenderPipelineDescriptor")

        @JvmField
        public val nextInChainHandle: VarHandle =
            layout.varHandle(MemoryLayout.PathElement.groupElement("nextInChain"))

        @JvmField
        public val labelHandle: VarHandle =
            layout.varHandle(MemoryLayout.PathElement.groupElement("label"))

        @JvmField
        public val layoutHandle: VarHandle =
            layout.varHandle(MemoryLayout.PathElement.groupElement("layout"))

        @JvmField
        public val vertexHandle: MethodHandle =
            layout.sliceHandle(MemoryLayout.PathElement.groupElement("vertex"))

        @JvmField
        public val primitiveHandle: MethodHandle =
            layout.sliceHandle(MemoryLayout.PathElement.groupElement("primitive"))

        @JvmField
        public val depthStencilHandle: VarHandle =
            layout.varHandle(MemoryLayout.PathElement.groupElement("depthStencil"))

        @JvmField
        public val multisampleHandle: MethodHandle =
            layout.sliceHandle(MemoryLayout.PathElement.groupElement("multisample"))

        @JvmField
        public val fragmentHandle: VarHandle =
            layout.varHandle(MemoryLayout.PathElement.groupElement("fragment"))

        @JvmStatic
        public fun allocate(alloc: SegmentAllocator): WGPURenderPipelineDescriptor =
            WGPURenderPipelineDescriptor(alloc.allocate(layout))
    }
}
