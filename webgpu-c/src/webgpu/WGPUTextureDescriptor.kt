// this file is auto generated by endoqa kotlin ffi, modify it with caution
package webgpu

import java.lang.foreign.Arena
import java.lang.foreign.MemoryLayout
import java.lang.foreign.MemorySegment
import java.lang.foreign.SegmentAllocator
import java.lang.foreign.StructLayout
import java.lang.foreign.ValueLayout
import java.lang.invoke.MethodHandle
import java.lang.invoke.VarHandle
import kotlin.Boolean
import kotlin.Byte
import kotlin.Int
import kotlin.Long
import kotlin.ULong
import kotlin.jvm.JvmField
import kotlin.jvm.JvmInline
import kotlin.jvm.JvmStatic

@JvmInline
public value class WGPUTextureDescriptor(
    public val `$mem`: MemorySegment,
) {
    public var nextInChain: Pointer<WGPUChainedStruct>
        get() = nextInChainHandle.get(this.`$mem`, 0L) as MemorySegment
        set(`value`) {
            nextInChainHandle.set(this.`$mem`, 0L, value)
        }

    public var label: Pointer<Byte>
        get() = labelHandle.get(this.`$mem`, 0L) as MemorySegment
        set(`value`) {
            labelHandle.set(this.`$mem`, 0L, value)
        }

    public var usage: WGPUTextureUsageFlags
        get() = (usageHandle.get(this.`$mem`, 0L) as Int).toUInt()
        set(`value`) {
            usageHandle.set(this.`$mem`, 0L, value.toInt())
        }

    public var dimension: WGPUTextureDimension
        get() = WGPUTextureDimension.fromInt(
            dimensionHandle.get(this.`$mem`, 0L)
                    as Int
        )
        set(`value`) {
            dimensionHandle.set(this.`$mem`, 0L, value.value)
        }

    public var size: WGPUExtent3D
        get() = WGPUExtent3D(
            sizeHandle.invokeExact(this.`$mem`, 0L) as
                    MemorySegment
        )
        set(`value`) {
            MemorySegment.copy(value.`$mem`, 0L, this.size.`$mem`, 0L, WGPUExtent3D.layout.byteSize())
        }

    public var format: WGPUTextureFormat
        get() = WGPUTextureFormat.fromInt(
            formatHandle.get(this.`$mem`, 0L) as
                    Int
        )
        set(`value`) {
            formatHandle.set(this.`$mem`, 0L, value.value)
        }

    public var mipLevelCount: uint32_t
        get() = (mipLevelCountHandle.get(this.`$mem`, 0L) as Int).toUInt()
        set(`value`) {
            mipLevelCountHandle.set(this.`$mem`, 0L, value.toInt())
        }

    public var sampleCount: uint32_t
        get() = (sampleCountHandle.get(this.`$mem`, 0L) as Int).toUInt()
        set(`value`) {
            sampleCountHandle.set(this.`$mem`, 0L, value.toInt())
        }

    public var viewFormatCount: ULong
        get() = (viewFormatCountHandle.get(this.`$mem`, 0L) as Long).toULong()
        set(`value`) {
            viewFormatCountHandle.set(this.`$mem`, 0L, value.toLong())
        }

    public var viewFormats: Pointer<WGPUTextureFormat>
        get() = viewFormatsHandle.get(this.`$mem`, 0L) as MemorySegment
        set(`value`) {
            viewFormatsHandle.set(this.`$mem`, 0L, value)
        }

    public constructor(gc: Boolean) : this(kotlin.run {
        require(gc) { "Do not call this if gc is not want" }
        Arena.ofAuto().allocate(layout)
    })

    public companion object {
        public val layout: StructLayout = MemoryLayout.structLayout(
            `$RuntimeHelper`.POINTER.withName("nextInChain"),
            `$RuntimeHelper`.POINTER.withName("label"),
            ValueLayout.JAVA_INT.withName("usage"),
            ValueLayout.JAVA_INT.withName("dimension"),
            WGPUExtent3D.layout.withName("size"),
            ValueLayout.JAVA_INT.withName("format"),
            ValueLayout.JAVA_INT.withName("mipLevelCount"),
            ValueLayout.JAVA_INT.withName("sampleCount"),
            ValueLayout.JAVA_LONG.withName("viewFormatCount"),
            `$RuntimeHelper`.POINTER.withName("viewFormats"),
        ).withName("WGPUTextureDescriptor")

        @JvmField
        public val nextInChainHandle: VarHandle =
            layout.varHandle(MemoryLayout.PathElement.groupElement("nextInChain"))

        @JvmField
        public val labelHandle: VarHandle =
            layout.varHandle(MemoryLayout.PathElement.groupElement("label"))

        @JvmField
        public val usageHandle: VarHandle =
            layout.varHandle(MemoryLayout.PathElement.groupElement("usage"))

        @JvmField
        public val dimensionHandle: VarHandle =
            layout.varHandle(MemoryLayout.PathElement.groupElement("dimension"))

        @JvmField
        public val sizeHandle: MethodHandle =
            layout.sliceHandle(MemoryLayout.PathElement.groupElement("size"))

        @JvmField
        public val formatHandle: VarHandle =
            layout.varHandle(MemoryLayout.PathElement.groupElement("format"))

        @JvmField
        public val mipLevelCountHandle: VarHandle =
            layout.varHandle(MemoryLayout.PathElement.groupElement("mipLevelCount"))

        @JvmField
        public val sampleCountHandle: VarHandle =
            layout.varHandle(MemoryLayout.PathElement.groupElement("sampleCount"))

        @JvmField
        public val viewFormatCountHandle: VarHandle =
            layout.varHandle(MemoryLayout.PathElement.groupElement("viewFormatCount"))

        @JvmField
        public val viewFormatsHandle: VarHandle =
            layout.varHandle(MemoryLayout.PathElement.groupElement("viewFormats"))

        @JvmStatic
        public fun allocate(alloc: SegmentAllocator): WGPUTextureDescriptor =
            WGPUTextureDescriptor(alloc.allocate(layout))
    }
}
