// this file is auto generated by endoqa kotlin ffi, modify it with caution
package webgpu

import java.lang.foreign.*
import java.lang.invoke.VarHandle

@JvmInline
public value class WGPUSwapChainDescriptor(
    public val `$mem`: MemorySegment,
) {
    public var nextInChain: Pointer<WGPUChainedStruct>
        get() = WGPUSwapChainDescriptor.nextInChainHandle.get(this.`$mem`, 0L) as MemorySegment
        set(`value`) {
            WGPUSwapChainDescriptor.nextInChainHandle.set(this.`$mem`, 0L, value)
        }

    public var label: Pointer<Byte>
        get() = WGPUSwapChainDescriptor.labelHandle.get(this.`$mem`, 0L) as MemorySegment
        set(`value`) {
            WGPUSwapChainDescriptor.labelHandle.set(this.`$mem`, 0L, value)
        }

    public var usage: WGPUTextureUsageFlags
        get() = (WGPUSwapChainDescriptor.usageHandle.get(this.`$mem`, 0L) as Int).toUInt()
        set(`value`) {
            WGPUSwapChainDescriptor.usageHandle.set(this.`$mem`, 0L, value.toInt())
        }

    public var format: WGPUTextureFormat
        get() = WGPUTextureFormat.fromInt(
            WGPUSwapChainDescriptor.formatHandle.get(this.`$mem`, 0L) as
                    Int
        )
        set(`value`) {
            WGPUSwapChainDescriptor.formatHandle.set(this.`$mem`, 0L, value.value)
        }

    public var width: uint32_t
        get() = (WGPUSwapChainDescriptor.widthHandle.get(this.`$mem`, 0L) as Int).toUInt()
        set(`value`) {
            WGPUSwapChainDescriptor.widthHandle.set(this.`$mem`, 0L, value.toInt())
        }

    public var height: uint32_t
        get() = (WGPUSwapChainDescriptor.heightHandle.get(this.`$mem`, 0L) as Int).toUInt()
        set(`value`) {
            WGPUSwapChainDescriptor.heightHandle.set(this.`$mem`, 0L, value.toInt())
        }

    public var presentMode: WGPUPresentMode
        get() = WGPUPresentMode.fromInt(
            WGPUSwapChainDescriptor.presentModeHandle.get(this.`$mem`, 0L)
                    as Int
        )
        set(`value`) {
            WGPUSwapChainDescriptor.presentModeHandle.set(this.`$mem`, 0L, value.value)
        }

    public constructor(gc: Boolean) : this(kotlin.run {
        require(gc) { "Do not call this if gc is not want" }
        Arena.ofAuto().allocate(WGPUSwapChainDescriptor.layout)
    })

    public companion object {
        public val layout: StructLayout = MemoryLayout.structLayout(
            `$RuntimeHelper`.POINTER.withName("nextInChain"),
            `$RuntimeHelper`.POINTER.withName("label"),
            ValueLayout.JAVA_INT.withName("usage"),
            ValueLayout.JAVA_INT.withName("format"),
            ValueLayout.JAVA_INT.withName("width"),
            ValueLayout.JAVA_INT.withName("height"),
            ValueLayout.JAVA_INT.withName("presentMode"),
            java.lang.foreign.MemoryLayout.paddingLayout(4),
        ).withName("WGPUSwapChainDescriptor")

        @JvmField
        public val nextInChainHandle: VarHandle =
            layout.varHandle(MemoryLayout.PathElement.groupElement("nextInChain"))

        @JvmField
        public val labelHandle: VarHandle =
            layout.varHandle(MemoryLayout.PathElement.groupElement("label"))

        @JvmField
        public val usageHandle: VarHandle =
            layout.varHandle(MemoryLayout.PathElement.groupElement("usage"))

        @JvmField
        public val formatHandle: VarHandle =
            layout.varHandle(MemoryLayout.PathElement.groupElement("format"))

        @JvmField
        public val widthHandle: VarHandle =
            layout.varHandle(MemoryLayout.PathElement.groupElement("width"))

        @JvmField
        public val heightHandle: VarHandle =
            layout.varHandle(MemoryLayout.PathElement.groupElement("height"))

        @JvmField
        public val presentModeHandle: VarHandle =
            layout.varHandle(MemoryLayout.PathElement.groupElement("presentMode"))

        @JvmStatic
        public fun allocate(alloc: SegmentAllocator): WGPUSwapChainDescriptor =
            WGPUSwapChainDescriptor(alloc.allocate(WGPUSwapChainDescriptor.layout))
    }
}
