// this file is auto generated by endoqa kotlin ffi, modify it with caution
package webgpu

import java.lang.foreign.*
import java.lang.invoke.VarHandle

@JvmInline
public value class WGPUFragmentState(
    public val `$mem`: MemorySegment,
) {
    public var nextInChain: Pointer<WGPUChainedStruct>
        get() = WGPUFragmentState.nextInChainHandle.get(this.`$mem`, 0L) as MemorySegment
        set(`value`) {
            WGPUFragmentState.nextInChainHandle.set(this.`$mem`, 0L, value)
        }

    public var module: WGPUShaderModule
        get() = WGPUFragmentState.moduleHandle.get(this.`$mem`, 0L) as MemorySegment
        set(`value`) {
            WGPUFragmentState.moduleHandle.set(this.`$mem`, 0L, value)
        }

    public var entryPoint: Pointer<Byte>
        get() = WGPUFragmentState.entryPointHandle.get(this.`$mem`, 0L) as MemorySegment
        set(`value`) {
            WGPUFragmentState.entryPointHandle.set(this.`$mem`, 0L, value)
        }

    public var constantCount: ULong
        get() = (WGPUFragmentState.constantCountHandle.get(this.`$mem`, 0L) as Long).toULong()
        set(`value`) {
            WGPUFragmentState.constantCountHandle.set(this.`$mem`, 0L, value.toLong())
        }

    public var constants: Pointer<WGPUConstantEntry>
        get() = WGPUFragmentState.constantsHandle.get(this.`$mem`, 0L) as MemorySegment
        set(`value`) {
            WGPUFragmentState.constantsHandle.set(this.`$mem`, 0L, value)
        }

    public var targetCount: ULong
        get() = (WGPUFragmentState.targetCountHandle.get(this.`$mem`, 0L) as Long).toULong()
        set(`value`) {
            WGPUFragmentState.targetCountHandle.set(this.`$mem`, 0L, value.toLong())
        }

    public var targets: Pointer<WGPUColorTargetState>
        get() = WGPUFragmentState.targetsHandle.get(this.`$mem`, 0L) as MemorySegment
        set(`value`) {
            WGPUFragmentState.targetsHandle.set(this.`$mem`, 0L, value)
        }

    public constructor(gc: Boolean) : this(kotlin.run {
        require(gc) { "Do not call this if gc is not want" }
        Arena.ofAuto().allocate(WGPUFragmentState.layout)
    })

    public companion object {
        public val layout: StructLayout = MemoryLayout.structLayout(
            `$RuntimeHelper`.POINTER.withName("nextInChain"),
            `$RuntimeHelper`.POINTER.withName("module"),
            `$RuntimeHelper`.POINTER.withName("entryPoint"),
            ValueLayout.JAVA_LONG.withName("constantCount"),
            `$RuntimeHelper`.POINTER.withName("constants"),
            ValueLayout.JAVA_LONG.withName("targetCount"),
            `$RuntimeHelper`.POINTER.withName("targets"),
        ).withName("WGPUFragmentState")

        @JvmField
        public val nextInChainHandle: VarHandle =
            layout.varHandle(MemoryLayout.PathElement.groupElement("nextInChain"))

        @JvmField
        public val moduleHandle: VarHandle =
            layout.varHandle(MemoryLayout.PathElement.groupElement("module"))

        @JvmField
        public val entryPointHandle: VarHandle =
            layout.varHandle(MemoryLayout.PathElement.groupElement("entryPoint"))

        @JvmField
        public val constantCountHandle: VarHandle =
            layout.varHandle(MemoryLayout.PathElement.groupElement("constantCount"))

        @JvmField
        public val constantsHandle: VarHandle =
            layout.varHandle(MemoryLayout.PathElement.groupElement("constants"))

        @JvmField
        public val targetCountHandle: VarHandle =
            layout.varHandle(MemoryLayout.PathElement.groupElement("targetCount"))

        @JvmField
        public val targetsHandle: VarHandle =
            layout.varHandle(MemoryLayout.PathElement.groupElement("targets"))

        @JvmStatic
        public fun allocate(alloc: SegmentAllocator): WGPUFragmentState =
            WGPUFragmentState(alloc.allocate(WGPUFragmentState.layout))
    }
}
