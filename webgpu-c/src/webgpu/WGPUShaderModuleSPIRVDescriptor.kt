// this file is auto generated by endoqa kotlin ffi, modify it with caution
package webgpu

import java.lang.foreign.*
import java.lang.invoke.MethodHandle
import java.lang.invoke.VarHandle

@JvmInline
public value class WGPUShaderModuleSPIRVDescriptor(
    public val `$mem`: MemorySegment,
) {
    public var chain: WGPUChainedStruct
        get() = WGPUChainedStruct(
            WGPUShaderModuleSPIRVDescriptor.chainHandle.invokeExact(
                this.`$mem`,
                0L
            ) as MemorySegment
        )
        set(`value`) {
            MemorySegment.copy(
                value.`$mem`, 0L, this.chain.`$mem`, 0L,
                WGPUChainedStruct.layout.byteSize()
            )
        }

    public var codeSize: uint32_t
        get() = (WGPUShaderModuleSPIRVDescriptor.codeSizeHandle.get(this.`$mem`, 0L) as Int).toUInt()
        set(`value`) {
            WGPUShaderModuleSPIRVDescriptor.codeSizeHandle.set(this.`$mem`, 0L, value.toInt())
        }

    public var code: Pointer<uint32_t>
        get() = WGPUShaderModuleSPIRVDescriptor.codeHandle.get(this.`$mem`, 0L) as MemorySegment
        set(`value`) {
            WGPUShaderModuleSPIRVDescriptor.codeHandle.set(this.`$mem`, 0L, value)
        }

    public constructor(gc: Boolean) : this(kotlin.run {
        require(gc) { "Do not call this if gc is not want" }
        Arena.ofAuto().allocate(WGPUShaderModuleSPIRVDescriptor.layout)
    })

    public companion object {
        public val layout: StructLayout = MemoryLayout.structLayout(
            WGPUChainedStruct.layout.withName("chain"),
            ValueLayout.JAVA_INT.withName("codeSize"),
            java.lang.foreign.MemoryLayout.paddingLayout(4),
            `$RuntimeHelper`.POINTER.withName("code"),
        ).withName("WGPUShaderModuleSPIRVDescriptor")

        @JvmField
        public val chainHandle: MethodHandle =
            layout.sliceHandle(MemoryLayout.PathElement.groupElement("chain"))

        @JvmField
        public val codeSizeHandle: VarHandle =
            layout.varHandle(MemoryLayout.PathElement.groupElement("codeSize"))

        @JvmField
        public val codeHandle: VarHandle =
            layout.varHandle(MemoryLayout.PathElement.groupElement("code"))

        @JvmStatic
        public fun allocate(alloc: SegmentAllocator): WGPUShaderModuleSPIRVDescriptor =
            WGPUShaderModuleSPIRVDescriptor(alloc.allocate(WGPUShaderModuleSPIRVDescriptor.layout))
    }
}
