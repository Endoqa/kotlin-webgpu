// this file is auto generated by endoqa kotlin ffi, modify it with caution
package webgpu

import java.lang.foreign.*
import java.lang.invoke.MethodHandle
import java.lang.invoke.MethodHandles
import java.lang.invoke.VarHandle

@JvmInline
public value class WGPUBufferHostMappedPointer(
    public val `$mem`: MemorySegment,
) {
    public var chain: WGPUChainedStruct
        get() = WGPUChainedStruct(
            WGPUBufferHostMappedPointer.chainHandle.invokeExact(this.`$mem`, 0L)
                    as MemorySegment
        )
        set(`value`) {
            MemorySegment.copy(
                value.`$mem`, 0L, this.chain.`$mem`, 0L,
                WGPUChainedStruct.layout.byteSize()
            )
        }

    public var pointer: Pointer<Unit>
        get() = WGPUBufferHostMappedPointer.pointerHandle.get(this.`$mem`, 0L) as MemorySegment
        set(`value`) {
            WGPUBufferHostMappedPointer.pointerHandle.set(this.`$mem`, 0L, value)
        }

    public var disposeCallback: WGPUCallback
        get() = WGPUBufferHostMappedPointer.disposeCallbackHandle.get(this.`$mem`, 0L) as MemorySegment
        set(`value`) {
            WGPUBufferHostMappedPointer.disposeCallbackHandle.set(this.`$mem`, 0L, value)
        }

    public var userdata: Pointer<Unit>
        get() = WGPUBufferHostMappedPointer.userdataHandle.get(this.`$mem`, 0L) as MemorySegment
        set(`value`) {
            WGPUBufferHostMappedPointer.userdataHandle.set(this.`$mem`, 0L, value)
        }

    public constructor(gc: Boolean) : this(kotlin.run {
        require(gc) { "Do not call this if gc is not want" }
        Arena.ofAuto().allocate(WGPUBufferHostMappedPointer.layout)
    })

    public companion object {
        public val layout: StructLayout = MemoryLayout.structLayout(
            WGPUChainedStruct.layout.withName("chain"),
            `$RuntimeHelper`.POINTER.withName("pointer"),
            `$RuntimeHelper`.POINTER.withName("disposeCallback"),
            `$RuntimeHelper`.POINTER.withName("userdata"),
        ).withName("WGPUBufferHostMappedPointer")

        @JvmField
        public val chainHandle: MethodHandle =
            layout.sliceHandle(MemoryLayout.PathElement.groupElement("chain"))

        @JvmField
        public val pointerHandle: VarHandle =
            layout.varHandle(MemoryLayout.PathElement.groupElement("pointer"))

        @JvmField
        public val disposeCallbackHandle: VarHandle =
            layout.varHandle(MemoryLayout.PathElement.groupElement("disposeCallback"))

        @JvmField
        public val userdataHandle: VarHandle =
            layout.varHandle(MemoryLayout.PathElement.groupElement("userdata"))

        @JvmStatic
        public fun allocate(alloc: SegmentAllocator): WGPUBufferHostMappedPointer =
            WGPUBufferHostMappedPointer(alloc.allocate(WGPUBufferHostMappedPointer.layout))

        public fun interface disposeCallback {
            public fun invoke(userdata: Pointer<Unit>)

            public fun allocate(arena: Arena): MemorySegment =
                Linker.nativeLinker().upcallStub(invokeHandle.bindTo(this), fd, arena)

            public companion object {
                @JvmStatic
                public val invokeHandle: MethodHandle =
                    MethodHandles.lookup().unreflect(disposeCallback::class.java.methods.find {
                        it.name == "invoke"
                    }
                    )

                @JvmStatic
                public val fd: FunctionDescriptor = FunctionDescriptor.ofVoid(
                    `$RuntimeHelper`.POINTER,
                )
            }
        }
    }
}
