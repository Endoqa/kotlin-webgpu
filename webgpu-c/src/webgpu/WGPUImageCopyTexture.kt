// this file is auto generated by endoqa kotlin ffi, modify it with caution
package webgpu

import java.lang.foreign.*
import java.lang.invoke.MethodHandle
import java.lang.invoke.VarHandle

@JvmInline
public value class WGPUImageCopyTexture(
    public val `$mem`: MemorySegment,
) {
    public var texture: WGPUTexture
        get() = WGPUImageCopyTexture.textureHandle.get(this.`$mem`, 0L) as MemorySegment
        set(`value`) {
            WGPUImageCopyTexture.textureHandle.set(this.`$mem`, 0L, value)
        }

    public var mipLevel: uint32_t
        get() = (WGPUImageCopyTexture.mipLevelHandle.get(this.`$mem`, 0L) as Int).toUInt()
        set(`value`) {
            WGPUImageCopyTexture.mipLevelHandle.set(this.`$mem`, 0L, value.toInt())
        }

    public var origin: WGPUOrigin3D
        get() = WGPUOrigin3D(
            WGPUImageCopyTexture.originHandle.invokeExact(this.`$mem`, 0L) as
                    MemorySegment
        )
        set(`value`) {
            MemorySegment.copy(value.`$mem`, 0L, this.origin.`$mem`, 0L, WGPUOrigin3D.layout.byteSize())
        }

    public var aspect: WGPUTextureAspect
        get() = WGPUTextureAspect.fromInt(WGPUImageCopyTexture.aspectHandle.get(this.`$mem`, 0L) as Int)
        set(`value`) {
            WGPUImageCopyTexture.aspectHandle.set(this.`$mem`, 0L, value.value)
        }

    public constructor(gc: Boolean) : this(kotlin.run {
        require(gc) { "Do not call this if gc is not want" }
        Arena.ofAuto().allocate(WGPUImageCopyTexture.layout)
    })

    public companion object {
        public val layout: StructLayout = MemoryLayout.structLayout(
            `$RuntimeHelper`.POINTER.withName("texture"),
            ValueLayout.JAVA_INT.withName("mipLevel"),
            WGPUOrigin3D.layout.withName("origin"),
            ValueLayout.JAVA_INT.withName("aspect"),
            java.lang.foreign.MemoryLayout.paddingLayout(4),
        ).withName("WGPUImageCopyTexture")

        @JvmField
        public val textureHandle: VarHandle =
            layout.varHandle(MemoryLayout.PathElement.groupElement("texture"))

        @JvmField
        public val mipLevelHandle: VarHandle =
            layout.varHandle(MemoryLayout.PathElement.groupElement("mipLevel"))

        @JvmField
        public val originHandle: MethodHandle =
            layout.sliceHandle(MemoryLayout.PathElement.groupElement("origin"))

        @JvmField
        public val aspectHandle: VarHandle =
            layout.varHandle(MemoryLayout.PathElement.groupElement("aspect"))

        @JvmStatic
        public fun allocate(alloc: SegmentAllocator): WGPUImageCopyTexture =
            WGPUImageCopyTexture(alloc.allocate(WGPUImageCopyTexture.layout))
    }
}
