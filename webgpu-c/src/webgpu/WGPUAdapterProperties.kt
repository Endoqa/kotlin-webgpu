// this file is auto generated by endoqa kotlin ffi, modify it with caution
package webgpu

import java.lang.foreign.Arena
import java.lang.foreign.MemoryLayout
import java.lang.foreign.MemorySegment
import java.lang.foreign.SegmentAllocator
import java.lang.foreign.StructLayout
import java.lang.foreign.ValueLayout
import java.lang.invoke.VarHandle
import kotlin.Boolean
import kotlin.Byte
import kotlin.Int
import kotlin.jvm.JvmField
import kotlin.jvm.JvmInline
import kotlin.jvm.JvmStatic

@JvmInline
public value class WGPUAdapterProperties(
    public val `$mem`: MemorySegment,
) {
    public var nextInChain: Pointer<WGPUChainedStructOut>
        get() = nextInChainHandle.get(this.`$mem`, 0L) as MemorySegment
        set(`value`) {
            nextInChainHandle.set(this.`$mem`, 0L, value)
        }

    public var vendorID: uint32_t
        get() = (vendorIDHandle.get(this.`$mem`, 0L) as Int).toUInt()
        set(`value`) {
            vendorIDHandle.set(this.`$mem`, 0L, value.toInt())
        }

    public var vendorName: Pointer<Byte>
        get() = vendorNameHandle.get(this.`$mem`, 0L) as MemorySegment
        set(`value`) {
            vendorNameHandle.set(this.`$mem`, 0L, value)
        }

    public var architecture: Pointer<Byte>
        get() = architectureHandle.get(this.`$mem`, 0L) as MemorySegment
        set(`value`) {
            architectureHandle.set(this.`$mem`, 0L, value)
        }

    public var deviceID: uint32_t
        get() = (deviceIDHandle.get(this.`$mem`, 0L) as Int).toUInt()
        set(`value`) {
            deviceIDHandle.set(this.`$mem`, 0L, value.toInt())
        }

    public var name: Pointer<Byte>
        get() = nameHandle.get(this.`$mem`, 0L) as MemorySegment
        set(`value`) {
            nameHandle.set(this.`$mem`, 0L, value)
        }

    public var driverDescription: Pointer<Byte>
        get() = driverDescriptionHandle.get(this.`$mem`, 0L) as MemorySegment
        set(`value`) {
            driverDescriptionHandle.set(this.`$mem`, 0L, value)
        }

    public var adapterType: WGPUAdapterType
        get() = WGPUAdapterType.fromInt(
            adapterTypeHandle.get(this.`$mem`, 0L) as
                    Int
        )
        set(`value`) {
            adapterTypeHandle.set(this.`$mem`, 0L, value.value)
        }

    public var backendType: WGPUBackendType
        get() = WGPUBackendType.fromInt(
            backendTypeHandle.get(this.`$mem`, 0L) as
                    Int
        )
        set(`value`) {
            backendTypeHandle.set(this.`$mem`, 0L, value.value)
        }

    public var compatibilityMode: WGPUBool
        get() = (compatibilityModeHandle.get(this.`$mem`, 0L) as Int).toUInt()
        set(`value`) {
            compatibilityModeHandle.set(this.`$mem`, 0L, value.toInt())
        }

    public constructor(gc: Boolean) : this(kotlin.run {
        require(gc) { "Do not call this if gc is not want" }
        Arena.ofAuto().allocate(layout)
    })

    public companion object {
        public val layout: StructLayout = MemoryLayout.structLayout(
            `$RuntimeHelper`.POINTER.withName("nextInChain"),
            ValueLayout.JAVA_INT.withName("vendorID"),
            MemoryLayout.paddingLayout(4),
            `$RuntimeHelper`.POINTER.withName("vendorName"),
            `$RuntimeHelper`.POINTER.withName("architecture"),
            ValueLayout.JAVA_INT.withName("deviceID"),
            MemoryLayout.paddingLayout(4),
            `$RuntimeHelper`.POINTER.withName("name"),
            `$RuntimeHelper`.POINTER.withName("driverDescription"),
            ValueLayout.JAVA_INT.withName("adapterType"),
            ValueLayout.JAVA_INT.withName("backendType"),
            ValueLayout.JAVA_INT.withName("compatibilityMode"),
            MemoryLayout.paddingLayout(4),
        ).withName("WGPUAdapterProperties")

        @JvmField
        public val nextInChainHandle: VarHandle =
            layout.varHandle(MemoryLayout.PathElement.groupElement("nextInChain"))

        @JvmField
        public val vendorIDHandle: VarHandle =
            layout.varHandle(MemoryLayout.PathElement.groupElement("vendorID"))

        @JvmField
        public val vendorNameHandle: VarHandle =
            layout.varHandle(MemoryLayout.PathElement.groupElement("vendorName"))

        @JvmField
        public val architectureHandle: VarHandle =
            layout.varHandle(MemoryLayout.PathElement.groupElement("architecture"))

        @JvmField
        public val deviceIDHandle: VarHandle =
            layout.varHandle(MemoryLayout.PathElement.groupElement("deviceID"))

        @JvmField
        public val nameHandle: VarHandle =
            layout.varHandle(MemoryLayout.PathElement.groupElement("name"))

        @JvmField
        public val driverDescriptionHandle: VarHandle =
            layout.varHandle(MemoryLayout.PathElement.groupElement("driverDescription"))

        @JvmField
        public val adapterTypeHandle: VarHandle =
            layout.varHandle(MemoryLayout.PathElement.groupElement("adapterType"))

        @JvmField
        public val backendTypeHandle: VarHandle =
            layout.varHandle(MemoryLayout.PathElement.groupElement("backendType"))

        @JvmField
        public val compatibilityModeHandle: VarHandle =
            layout.varHandle(MemoryLayout.PathElement.groupElement("compatibilityMode"))

        @JvmStatic
        public fun allocate(alloc: SegmentAllocator): WGPUAdapterProperties =
            WGPUAdapterProperties(alloc.allocate(layout))
    }
}
