// this file is auto generated by endoqa kotlin ffi, modify it with caution
package webgpu

import java.lang.foreign.*
import java.lang.invoke.VarHandle

@JvmInline
public value class WGPUAdapterProperties(
    public val `$mem`: MemorySegment,
) {
    public var nextInChain: Pointer<WGPUChainedStructOut>
        get() = WGPUAdapterProperties.nextInChainHandle.get(this.`$mem`, 0L) as MemorySegment
        set(`value`) {
            WGPUAdapterProperties.nextInChainHandle.set(this.`$mem`, 0L, value)
        }

    public var vendorID: uint32_t
        get() = (WGPUAdapterProperties.vendorIDHandle.get(this.`$mem`, 0L) as Int).toUInt()
        set(`value`) {
            WGPUAdapterProperties.vendorIDHandle.set(this.`$mem`, 0L, value.toInt())
        }

    public var vendorName: Pointer<Byte>
        get() = WGPUAdapterProperties.vendorNameHandle.get(this.`$mem`, 0L) as MemorySegment
        set(`value`) {
            WGPUAdapterProperties.vendorNameHandle.set(this.`$mem`, 0L, value)
        }

    public var architecture: Pointer<Byte>
        get() = WGPUAdapterProperties.architectureHandle.get(this.`$mem`, 0L) as MemorySegment
        set(`value`) {
            WGPUAdapterProperties.architectureHandle.set(this.`$mem`, 0L, value)
        }

    public var deviceID: uint32_t
        get() = (WGPUAdapterProperties.deviceIDHandle.get(this.`$mem`, 0L) as Int).toUInt()
        set(`value`) {
            WGPUAdapterProperties.deviceIDHandle.set(this.`$mem`, 0L, value.toInt())
        }

    public var name: Pointer<Byte>
        get() = WGPUAdapterProperties.nameHandle.get(this.`$mem`, 0L) as MemorySegment
        set(`value`) {
            WGPUAdapterProperties.nameHandle.set(this.`$mem`, 0L, value)
        }

    public var driverDescription: Pointer<Byte>
        get() = WGPUAdapterProperties.driverDescriptionHandle.get(this.`$mem`, 0L) as MemorySegment
        set(`value`) {
            WGPUAdapterProperties.driverDescriptionHandle.set(this.`$mem`, 0L, value)
        }

    public var adapterType: WGPUAdapterType
        get() = WGPUAdapterType.fromInt(
            WGPUAdapterProperties.adapterTypeHandle.get(this.`$mem`, 0L) as
                    Int
        )
        set(`value`) {
            WGPUAdapterProperties.adapterTypeHandle.set(this.`$mem`, 0L, value.value)
        }

    public var backendType: WGPUBackendType
        get() = WGPUBackendType.fromInt(
            WGPUAdapterProperties.backendTypeHandle.get(this.`$mem`, 0L) as
                    Int
        )
        set(`value`) {
            WGPUAdapterProperties.backendTypeHandle.set(this.`$mem`, 0L, value.value)
        }

    public var compatibilityMode: WGPUBool
        get() = (WGPUAdapterProperties.compatibilityModeHandle.get(this.`$mem`, 0L) as Int).toUInt()
        set(`value`) {
            WGPUAdapterProperties.compatibilityModeHandle.set(this.`$mem`, 0L, value.toInt())
        }

    public constructor(gc: Boolean) : this(kotlin.run {
        require(gc) { "Do not call this if gc is not want" }
        Arena.ofAuto().allocate(WGPUAdapterProperties.layout)
    })

    public companion object {
        public val layout: StructLayout = MemoryLayout.structLayout(
            `$RuntimeHelper`.POINTER.withName("nextInChain"),
            ValueLayout.JAVA_INT.withName("vendorID"),
            java.lang.foreign.MemoryLayout.paddingLayout(4),
            `$RuntimeHelper`.POINTER.withName("vendorName"),
            `$RuntimeHelper`.POINTER.withName("architecture"),
            ValueLayout.JAVA_INT.withName("deviceID"),
            java.lang.foreign.MemoryLayout.paddingLayout(4),
            `$RuntimeHelper`.POINTER.withName("name"),
            `$RuntimeHelper`.POINTER.withName("driverDescription"),
            ValueLayout.JAVA_INT.withName("adapterType"),
            ValueLayout.JAVA_INT.withName("backendType"),
            ValueLayout.JAVA_INT.withName("compatibilityMode"),
            java.lang.foreign.MemoryLayout.paddingLayout(4),
        ).withName("WGPUAdapterProperties")

        @JvmField
        public val nextInChainHandle: VarHandle =
            layout.varHandle(MemoryLayout.PathElement.groupElement("nextInChain"))

        @JvmField
        public val vendorIDHandle: VarHandle =
            layout.varHandle(MemoryLayout.PathElement.groupElement("vendorID"))

        @JvmField
        public val vendorNameHandle: VarHandle =
            layout.varHandle(MemoryLayout.PathElement.groupElement("vendorName"))

        @JvmField
        public val architectureHandle: VarHandle =
            layout.varHandle(MemoryLayout.PathElement.groupElement("architecture"))

        @JvmField
        public val deviceIDHandle: VarHandle =
            layout.varHandle(MemoryLayout.PathElement.groupElement("deviceID"))

        @JvmField
        public val nameHandle: VarHandle =
            layout.varHandle(MemoryLayout.PathElement.groupElement("name"))

        @JvmField
        public val driverDescriptionHandle: VarHandle =
            layout.varHandle(MemoryLayout.PathElement.groupElement("driverDescription"))

        @JvmField
        public val adapterTypeHandle: VarHandle =
            layout.varHandle(MemoryLayout.PathElement.groupElement("adapterType"))

        @JvmField
        public val backendTypeHandle: VarHandle =
            layout.varHandle(MemoryLayout.PathElement.groupElement("backendType"))

        @JvmField
        public val compatibilityModeHandle: VarHandle =
            layout.varHandle(MemoryLayout.PathElement.groupElement("compatibilityMode"))

        @JvmStatic
        public fun allocate(alloc: SegmentAllocator): WGPUAdapterProperties =
            WGPUAdapterProperties(alloc.allocate(WGPUAdapterProperties.layout))
    }
}
