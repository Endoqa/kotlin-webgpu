// this file is auto generated by endoqa kotlin ffi, modify it with caution
package webgpu.c

import java.lang.foreign.Arena
import java.lang.foreign.MemoryLayout
import java.lang.foreign.MemorySegment
import java.lang.foreign.SegmentAllocator
import java.lang.foreign.StructLayout
import java.lang.foreign.ValueLayout
import java.lang.invoke.MethodHandle
import java.lang.invoke.VarHandle
import kotlin.Boolean
import kotlin.Int
import kotlin.jvm.JvmField
import kotlin.jvm.JvmInline
import kotlin.jvm.JvmStatic

@JvmInline
public value class WGPURenderPassColorAttachment(
    public val `$mem`: MemorySegment,
) {
    public var nextInChain: Pointer<WGPUChainedStruct>
        get() = nextInChainHandle.get(this.`$mem`, 0L) as MemorySegment
        set(`value`) {
            nextInChainHandle.set(this.`$mem`, 0L, value)
        }

    public var view: WGPUTextureView
        get() = viewHandle.get(this.`$mem`, 0L) as MemorySegment
        set(`value`) {
            viewHandle.set(this.`$mem`, 0L, value)
        }

    public var depthSlice: uint32_t
        get() = (depthSliceHandle.get(this.`$mem`, 0L) as Int).toUInt()
        set(`value`) {
            depthSliceHandle.set(this.`$mem`, 0L, value.toInt())
        }

    public var resolveTarget: WGPUTextureView
        get() = resolveTargetHandle.get(this.`$mem`, 0L) as MemorySegment
        set(`value`) {
            resolveTargetHandle.set(this.`$mem`, 0L, value)
        }

    public var loadOp: WGPULoadOp
        get() = WGPULoadOp.fromInt(
            loadOpHandle.get(this.`$mem`, 0L) as
                    Int
        )
        set(`value`) {
            loadOpHandle.set(this.`$mem`, 0L, value.value)
        }

    public var storeOp: WGPUStoreOp
        get() = WGPUStoreOp.fromInt(
            storeOpHandle.get(this.`$mem`, 0L) as
                    Int
        )
        set(`value`) {
            storeOpHandle.set(this.`$mem`, 0L, value.value)
        }

    public var clearValue: WGPUColor
        get() = WGPUColor(
            clearValueHandle.invokeExact(this.`$mem`, 0L) as
                    MemorySegment
        )
        set(`value`) {
            MemorySegment.copy(value.`$mem`, 0L, this.clearValue.`$mem`, 0L, WGPUColor.layout.byteSize())
        }

    public constructor(gc: Boolean) : this(kotlin.run {
        require(gc) { "Do not call this if gc is not want" }
        Arena.ofAuto().allocate(layout)
    })

    public companion object {
        public val layout: StructLayout = MemoryLayout.structLayout(
            `$RuntimeHelper`.POINTER.withName("nextInChain"),
            `$RuntimeHelper`.POINTER.withName("view"),
            ValueLayout.JAVA_INT.withName("depthSlice"),
            MemoryLayout.paddingLayout(4),
            `$RuntimeHelper`.POINTER.withName("resolveTarget"),
            ValueLayout.JAVA_INT.withName("loadOp"),
            ValueLayout.JAVA_INT.withName("storeOp"),
            WGPUColor.layout.withName("clearValue"),
        ).withName("WGPURenderPassColorAttachment")

        @JvmField
        public val nextInChainHandle: VarHandle =
            layout.varHandle(MemoryLayout.PathElement.groupElement("nextInChain"))

        @JvmField
        public val viewHandle: VarHandle =
            layout.varHandle(MemoryLayout.PathElement.groupElement("view"))

        @JvmField
        public val depthSliceHandle: VarHandle =
            layout.varHandle(MemoryLayout.PathElement.groupElement("depthSlice"))

        @JvmField
        public val resolveTargetHandle: VarHandle =
            layout.varHandle(MemoryLayout.PathElement.groupElement("resolveTarget"))

        @JvmField
        public val loadOpHandle: VarHandle =
            layout.varHandle(MemoryLayout.PathElement.groupElement("loadOp"))

        @JvmField
        public val storeOpHandle: VarHandle =
            layout.varHandle(MemoryLayout.PathElement.groupElement("storeOp"))

        @JvmField
        public val clearValueHandle: MethodHandle =
            layout.sliceHandle(MemoryLayout.PathElement.groupElement("clearValue"))

        @JvmStatic
        public fun allocate(alloc: SegmentAllocator): WGPURenderPassColorAttachment =
            WGPURenderPassColorAttachment(alloc.allocate(layout))
    }
}
