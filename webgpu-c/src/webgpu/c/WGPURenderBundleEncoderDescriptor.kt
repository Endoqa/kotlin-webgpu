// this file is auto generated by endoqa kotlin ffi, modify it with caution
package webgpu.c

import java.lang.foreign.*
import java.lang.invoke.VarHandle

@JvmInline
public value class WGPURenderBundleEncoderDescriptor(
    public val `$mem`: MemorySegment,
) {
    public var nextInChain: Pointer<WGPUChainedStruct>
        get() = nextInChainHandle.get(this.`$mem`, 0L) as
                MemorySegment
        set(`value`) {
            nextInChainHandle.set(this.`$mem`, 0L, value)
        }

    public var label: Pointer<Byte>
        get() = labelHandle.get(this.`$mem`, 0L) as MemorySegment
        set(`value`) {
            labelHandle.set(this.`$mem`, 0L, value)
        }

    public var colorFormatCount: ULong
        get() = (colorFormatCountHandle.get(this.`$mem`, 0L) as
                Long).toULong()
        set(`value`) {
            colorFormatCountHandle.set(this.`$mem`, 0L, value.toLong())
        }

    public var colorFormats: Pointer<WGPUTextureFormat>
        get() = colorFormatsHandle.get(this.`$mem`, 0L) as
                MemorySegment
        set(`value`) {
            colorFormatsHandle.set(this.`$mem`, 0L, value)
        }

    public var depthStencilFormat: WGPUTextureFormat
        get() =
            WGPUTextureFormat.fromInt(
                depthStencilFormatHandle.get(
                    this.`$mem`,
                    0L
                ) as Int
            )
        set(`value`) {
            depthStencilFormatHandle.set(this.`$mem`, 0L, value.value)
        }

    public var sampleCount: uint32_t
        get() = (sampleCountHandle.get(this.`$mem`, 0L) as
                Int).toUInt()
        set(`value`) {
            sampleCountHandle.set(this.`$mem`, 0L, value.toInt())
        }

    public var depthReadOnly: WGPUBool
        get() = (depthReadOnlyHandle.get(this.`$mem`, 0L) as
                Int).toUInt()
        set(`value`) {
            depthReadOnlyHandle.set(this.`$mem`, 0L, value.toInt())
        }

    public var stencilReadOnly: WGPUBool
        get() = (stencilReadOnlyHandle.get(this.`$mem`, 0L) as
                Int).toUInt()
        set(`value`) {
            stencilReadOnlyHandle.set(this.`$mem`, 0L, value.toInt())
        }

    public constructor(gc: Boolean) : this(kotlin.run {
        require(gc) { "Do not call this if gc is not want" }
        Arena.ofAuto().allocate(layout)
    })

    public companion object {
        public val layout: StructLayout = MemoryLayout.structLayout(
            `$RuntimeHelper`.POINTER.withName("nextInChain"),
            `$RuntimeHelper`.POINTER.withName("label"),
            ValueLayout.JAVA_LONG.withName("colorFormatCount"),
            `$RuntimeHelper`.POINTER.withName("colorFormats"),
            ValueLayout.JAVA_INT.withName("depthStencilFormat"),
            ValueLayout.JAVA_INT.withName("sampleCount"),
            ValueLayout.JAVA_INT.withName("depthReadOnly"),
            ValueLayout.JAVA_INT.withName("stencilReadOnly"),
        ).withName("WGPURenderBundleEncoderDescriptor")

        @JvmField
        public val nextInChainHandle: VarHandle =
            layout.varHandle(MemoryLayout.PathElement.groupElement("nextInChain"))

        @JvmField
        public val labelHandle: VarHandle =
            layout.varHandle(MemoryLayout.PathElement.groupElement("label"))

        @JvmField
        public val colorFormatCountHandle: VarHandle =
            layout.varHandle(MemoryLayout.PathElement.groupElement("colorFormatCount"))

        @JvmField
        public val colorFormatsHandle: VarHandle =
            layout.varHandle(MemoryLayout.PathElement.groupElement("colorFormats"))

        @JvmField
        public val depthStencilFormatHandle: VarHandle =
            layout.varHandle(MemoryLayout.PathElement.groupElement("depthStencilFormat"))

        @JvmField
        public val sampleCountHandle: VarHandle =
            layout.varHandle(MemoryLayout.PathElement.groupElement("sampleCount"))

        @JvmField
        public val depthReadOnlyHandle: VarHandle =
            layout.varHandle(MemoryLayout.PathElement.groupElement("depthReadOnly"))

        @JvmField
        public val stencilReadOnlyHandle: VarHandle =
            layout.varHandle(MemoryLayout.PathElement.groupElement("stencilReadOnly"))

        @JvmStatic
        public fun allocate(alloc: SegmentAllocator): WGPURenderBundleEncoderDescriptor =
            WGPURenderBundleEncoderDescriptor(alloc.allocate(layout))
    }
}
