// this file is auto generated by endoqa kotlin ffi, modify it with caution
package webgpu.c

import java.lang.foreign.FunctionDescriptor
import java.lang.foreign.Linker
import java.lang.foreign.ValueLayout
import java.lang.invoke.MethodHandle

internal val `wgpuCreateInstance$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("wgpuCreateInstance"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `wgpuGetInstanceCapabilities$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("wgpuGetInstanceCapabilities"),
        FunctionDescriptor.of(
            ValueLayout.JAVA_INT,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `wgpuGetProcAddress$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("wgpuGetProcAddress"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            WGPUStringView.layout,
        )
    )
}

internal val `wgpuAdapterGetFeatures$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("wgpuAdapterGetFeatures"),
        FunctionDescriptor.ofVoid(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `wgpuAdapterGetInfo$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("wgpuAdapterGetInfo"),
        FunctionDescriptor.of(
            ValueLayout.JAVA_INT,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `wgpuAdapterGetLimits$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("wgpuAdapterGetLimits"),
        FunctionDescriptor.of(
            ValueLayout.JAVA_INT,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `wgpuAdapterHasFeature$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("wgpuAdapterHasFeature"),
        FunctionDescriptor.of(
            ValueLayout.JAVA_INT,
            `$RuntimeHelper`.POINTER,
            ValueLayout.JAVA_INT,
        )
    )
}

internal val `wgpuAdapterRequestDevice$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("wgpuAdapterRequestDevice"),
        FunctionDescriptor.of(
            WGPUFuture.layout,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            WGPURequestDeviceCallbackInfo.layout,
        )
    )
}

internal val `wgpuAdapterAddRef$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("wgpuAdapterAddRef"),
        FunctionDescriptor.ofVoid(
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `wgpuAdapterRelease$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("wgpuAdapterRelease"),
        FunctionDescriptor.ofVoid(
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `wgpuAdapterInfoFreeMembers$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("wgpuAdapterInfoFreeMembers"),
        FunctionDescriptor.ofVoid(
            WGPUAdapterInfo.layout,
        )
    )
}

internal val `wgpuBindGroupSetLabel$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("wgpuBindGroupSetLabel"),
        FunctionDescriptor.ofVoid(
            `$RuntimeHelper`.POINTER,
            WGPUStringView.layout,
        )
    )
}

internal val `wgpuBindGroupAddRef$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("wgpuBindGroupAddRef"),
        FunctionDescriptor.ofVoid(
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `wgpuBindGroupRelease$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("wgpuBindGroupRelease"),
        FunctionDescriptor.ofVoid(
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `wgpuBindGroupLayoutSetLabel$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("wgpuBindGroupLayoutSetLabel"),
        FunctionDescriptor.ofVoid(
            `$RuntimeHelper`.POINTER,
            WGPUStringView.layout,
        )
    )
}

internal val `wgpuBindGroupLayoutAddRef$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("wgpuBindGroupLayoutAddRef"),
        FunctionDescriptor.ofVoid(
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `wgpuBindGroupLayoutRelease$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("wgpuBindGroupLayoutRelease"),
        FunctionDescriptor.ofVoid(
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `wgpuBufferDestroy$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("wgpuBufferDestroy"),
        FunctionDescriptor.ofVoid(
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `wgpuBufferGetConstMappedRange$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("wgpuBufferGetConstMappedRange"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            ValueLayout.JAVA_LONG,
            ValueLayout.JAVA_LONG,
        )
    )
}

internal val `wgpuBufferGetMapState$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("wgpuBufferGetMapState"),
        FunctionDescriptor.of(
            ValueLayout.JAVA_INT,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `wgpuBufferGetMappedRange$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("wgpuBufferGetMappedRange"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            ValueLayout.JAVA_LONG,
            ValueLayout.JAVA_LONG,
        )
    )
}

internal val `wgpuBufferGetSize$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("wgpuBufferGetSize"),
        FunctionDescriptor.of(
            ValueLayout.JAVA_LONG,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `wgpuBufferGetUsage$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("wgpuBufferGetUsage"),
        FunctionDescriptor.of(
            ValueLayout.JAVA_LONG,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `wgpuBufferMapAsync$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("wgpuBufferMapAsync"),
        FunctionDescriptor.of(
            WGPUFuture.layout,
            `$RuntimeHelper`.POINTER,
            ValueLayout.JAVA_LONG,
            ValueLayout.JAVA_LONG,
            ValueLayout.JAVA_LONG,
            WGPUBufferMapCallbackInfo.layout,
        )
    )
}

internal val `wgpuBufferSetLabel$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("wgpuBufferSetLabel"),
        FunctionDescriptor.ofVoid(
            `$RuntimeHelper`.POINTER,
            WGPUStringView.layout,
        )
    )
}

internal val `wgpuBufferUnmap$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("wgpuBufferUnmap"),
        FunctionDescriptor.ofVoid(
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `wgpuBufferAddRef$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("wgpuBufferAddRef"),
        FunctionDescriptor.ofVoid(
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `wgpuBufferRelease$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("wgpuBufferRelease"),
        FunctionDescriptor.ofVoid(
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `wgpuCommandBufferSetLabel$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("wgpuCommandBufferSetLabel"),
        FunctionDescriptor.ofVoid(
            `$RuntimeHelper`.POINTER,
            WGPUStringView.layout,
        )
    )
}

internal val `wgpuCommandBufferAddRef$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("wgpuCommandBufferAddRef"),
        FunctionDescriptor.ofVoid(
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `wgpuCommandBufferRelease$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("wgpuCommandBufferRelease"),
        FunctionDescriptor.ofVoid(
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `wgpuCommandEncoderBeginComputePass$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("wgpuCommandEncoderBeginComputePass"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `wgpuCommandEncoderBeginRenderPass$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("wgpuCommandEncoderBeginRenderPass"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `wgpuCommandEncoderClearBuffer$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("wgpuCommandEncoderClearBuffer"),
        FunctionDescriptor.ofVoid(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            ValueLayout.JAVA_LONG,
            ValueLayout.JAVA_LONG,
        )
    )
}

internal val `wgpuCommandEncoderCopyBufferToBuffer$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("wgpuCommandEncoderCopyBufferToBuffer"),
        FunctionDescriptor.ofVoid(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            ValueLayout.JAVA_LONG,
            `$RuntimeHelper`.POINTER,
            ValueLayout.JAVA_LONG,
            ValueLayout.JAVA_LONG,
        )
    )
}

internal val `wgpuCommandEncoderCopyBufferToTexture$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("wgpuCommandEncoderCopyBufferToTexture"),
        FunctionDescriptor.ofVoid(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `wgpuCommandEncoderCopyTextureToBuffer$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("wgpuCommandEncoderCopyTextureToBuffer"),
        FunctionDescriptor.ofVoid(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `wgpuCommandEncoderCopyTextureToTexture$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("wgpuCommandEncoderCopyTextureToTexture"),
        FunctionDescriptor.ofVoid(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `wgpuCommandEncoderFinish$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("wgpuCommandEncoderFinish"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `wgpuCommandEncoderInsertDebugMarker$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("wgpuCommandEncoderInsertDebugMarker"),
        FunctionDescriptor.ofVoid(
            `$RuntimeHelper`.POINTER,
            WGPUStringView.layout,
        )
    )
}

internal val `wgpuCommandEncoderPopDebugGroup$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("wgpuCommandEncoderPopDebugGroup"),
        FunctionDescriptor.ofVoid(
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `wgpuCommandEncoderPushDebugGroup$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("wgpuCommandEncoderPushDebugGroup"),
        FunctionDescriptor.ofVoid(
            `$RuntimeHelper`.POINTER,
            WGPUStringView.layout,
        )
    )
}

internal val `wgpuCommandEncoderResolveQuerySet$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("wgpuCommandEncoderResolveQuerySet"),
        FunctionDescriptor.ofVoid(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            `$RuntimeHelper`.POINTER,
            ValueLayout.JAVA_LONG,
        )
    )
}

internal val `wgpuCommandEncoderSetLabel$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("wgpuCommandEncoderSetLabel"),
        FunctionDescriptor.ofVoid(
            `$RuntimeHelper`.POINTER,
            WGPUStringView.layout,
        )
    )
}

internal val `wgpuCommandEncoderWriteTimestamp$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("wgpuCommandEncoderWriteTimestamp"),
        FunctionDescriptor.ofVoid(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            ValueLayout.JAVA_INT,
        )
    )
}

internal val `wgpuCommandEncoderAddRef$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("wgpuCommandEncoderAddRef"),
        FunctionDescriptor.ofVoid(
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `wgpuCommandEncoderRelease$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("wgpuCommandEncoderRelease"),
        FunctionDescriptor.ofVoid(
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `wgpuComputePassEncoderDispatchWorkgroups$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("wgpuComputePassEncoderDispatchWorkgroups"),
        FunctionDescriptor.ofVoid(
            `$RuntimeHelper`.POINTER,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
        )
    )
}

internal val `wgpuComputePassEncoderDispatchWorkgroupsIndirect$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("wgpuComputePassEncoderDispatchWorkgroupsIndirect"),
        FunctionDescriptor.ofVoid(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            ValueLayout.JAVA_LONG,
        )
    )
}

internal val `wgpuComputePassEncoderEnd$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("wgpuComputePassEncoderEnd"),
        FunctionDescriptor.ofVoid(
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `wgpuComputePassEncoderInsertDebugMarker$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("wgpuComputePassEncoderInsertDebugMarker"),
        FunctionDescriptor.ofVoid(
            `$RuntimeHelper`.POINTER,
            WGPUStringView.layout,
        )
    )
}

internal val `wgpuComputePassEncoderPopDebugGroup$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("wgpuComputePassEncoderPopDebugGroup"),
        FunctionDescriptor.ofVoid(
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `wgpuComputePassEncoderPushDebugGroup$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("wgpuComputePassEncoderPushDebugGroup"),
        FunctionDescriptor.ofVoid(
            `$RuntimeHelper`.POINTER,
            WGPUStringView.layout,
        )
    )
}

internal val `wgpuComputePassEncoderSetBindGroup$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("wgpuComputePassEncoderSetBindGroup"),
        FunctionDescriptor.ofVoid(
            `$RuntimeHelper`.POINTER,
            ValueLayout.JAVA_INT,
            `$RuntimeHelper`.POINTER,
            ValueLayout.JAVA_LONG,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `wgpuComputePassEncoderSetLabel$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("wgpuComputePassEncoderSetLabel"),
        FunctionDescriptor.ofVoid(
            `$RuntimeHelper`.POINTER,
            WGPUStringView.layout,
        )
    )
}

internal val `wgpuComputePassEncoderSetPipeline$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("wgpuComputePassEncoderSetPipeline"),
        FunctionDescriptor.ofVoid(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `wgpuComputePassEncoderAddRef$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("wgpuComputePassEncoderAddRef"),
        FunctionDescriptor.ofVoid(
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `wgpuComputePassEncoderRelease$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("wgpuComputePassEncoderRelease"),
        FunctionDescriptor.ofVoid(
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `wgpuComputePipelineGetBindGroupLayout$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("wgpuComputePipelineGetBindGroupLayout"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            ValueLayout.JAVA_INT,
        )
    )
}

internal val `wgpuComputePipelineSetLabel$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("wgpuComputePipelineSetLabel"),
        FunctionDescriptor.ofVoid(
            `$RuntimeHelper`.POINTER,
            WGPUStringView.layout,
        )
    )
}

internal val `wgpuComputePipelineAddRef$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("wgpuComputePipelineAddRef"),
        FunctionDescriptor.ofVoid(
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `wgpuComputePipelineRelease$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("wgpuComputePipelineRelease"),
        FunctionDescriptor.ofVoid(
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `wgpuDeviceCreateBindGroup$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("wgpuDeviceCreateBindGroup"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `wgpuDeviceCreateBindGroupLayout$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("wgpuDeviceCreateBindGroupLayout"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `wgpuDeviceCreateBuffer$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("wgpuDeviceCreateBuffer"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `wgpuDeviceCreateCommandEncoder$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("wgpuDeviceCreateCommandEncoder"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `wgpuDeviceCreateComputePipeline$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("wgpuDeviceCreateComputePipeline"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `wgpuDeviceCreateComputePipelineAsync$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("wgpuDeviceCreateComputePipelineAsync"),
        FunctionDescriptor.of(
            WGPUFuture.layout,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            WGPUCreateComputePipelineAsyncCallbackInfo.layout,
        )
    )
}

internal val `wgpuDeviceCreatePipelineLayout$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("wgpuDeviceCreatePipelineLayout"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `wgpuDeviceCreateQuerySet$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("wgpuDeviceCreateQuerySet"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `wgpuDeviceCreateRenderBundleEncoder$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("wgpuDeviceCreateRenderBundleEncoder"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `wgpuDeviceCreateRenderPipeline$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("wgpuDeviceCreateRenderPipeline"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `wgpuDeviceCreateRenderPipelineAsync$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("wgpuDeviceCreateRenderPipelineAsync"),
        FunctionDescriptor.of(
            WGPUFuture.layout,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            WGPUCreateRenderPipelineAsyncCallbackInfo.layout,
        )
    )
}

internal val `wgpuDeviceCreateSampler$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("wgpuDeviceCreateSampler"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `wgpuDeviceCreateShaderModule$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("wgpuDeviceCreateShaderModule"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `wgpuDeviceCreateTexture$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("wgpuDeviceCreateTexture"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `wgpuDeviceDestroy$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("wgpuDeviceDestroy"),
        FunctionDescriptor.ofVoid(
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `wgpuDeviceGetAdapterInfo$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("wgpuDeviceGetAdapterInfo"),
        FunctionDescriptor.of(
            WGPUAdapterInfo.layout,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `wgpuDeviceGetFeatures$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("wgpuDeviceGetFeatures"),
        FunctionDescriptor.ofVoid(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `wgpuDeviceGetLimits$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("wgpuDeviceGetLimits"),
        FunctionDescriptor.of(
            ValueLayout.JAVA_INT,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `wgpuDeviceGetLostFuture$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("wgpuDeviceGetLostFuture"),
        FunctionDescriptor.of(
            WGPUFuture.layout,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `wgpuDeviceGetQueue$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("wgpuDeviceGetQueue"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `wgpuDeviceHasFeature$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("wgpuDeviceHasFeature"),
        FunctionDescriptor.of(
            ValueLayout.JAVA_INT,
            `$RuntimeHelper`.POINTER,
            ValueLayout.JAVA_INT,
        )
    )
}

internal val `wgpuDevicePopErrorScope$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("wgpuDevicePopErrorScope"),
        FunctionDescriptor.of(
            WGPUFuture.layout,
            `$RuntimeHelper`.POINTER,
            WGPUPopErrorScopeCallbackInfo.layout,
        )
    )
}

internal val `wgpuDevicePushErrorScope$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("wgpuDevicePushErrorScope"),
        FunctionDescriptor.ofVoid(
            `$RuntimeHelper`.POINTER,
            ValueLayout.JAVA_INT,
        )
    )
}

internal val `wgpuDeviceSetLabel$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("wgpuDeviceSetLabel"),
        FunctionDescriptor.ofVoid(
            `$RuntimeHelper`.POINTER,
            WGPUStringView.layout,
        )
    )
}

internal val `wgpuDeviceAddRef$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("wgpuDeviceAddRef"),
        FunctionDescriptor.ofVoid(
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `wgpuDeviceRelease$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("wgpuDeviceRelease"),
        FunctionDescriptor.ofVoid(
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `wgpuInstanceCreateSurface$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("wgpuInstanceCreateSurface"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `wgpuInstanceGetWGSLLanguageFeatures$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("wgpuInstanceGetWGSLLanguageFeatures"),
        FunctionDescriptor.of(
            ValueLayout.JAVA_INT,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `wgpuInstanceHasWGSLLanguageFeature$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("wgpuInstanceHasWGSLLanguageFeature"),
        FunctionDescriptor.of(
            ValueLayout.JAVA_INT,
            `$RuntimeHelper`.POINTER,
            ValueLayout.JAVA_INT,
        )
    )
}

internal val `wgpuInstanceProcessEvents$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("wgpuInstanceProcessEvents"),
        FunctionDescriptor.ofVoid(
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `wgpuInstanceRequestAdapter$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("wgpuInstanceRequestAdapter"),
        FunctionDescriptor.of(
            WGPUFuture.layout,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            WGPURequestAdapterCallbackInfo.layout,
        )
    )
}

internal val `wgpuInstanceWaitAny$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("wgpuInstanceWaitAny"),
        FunctionDescriptor.of(
            ValueLayout.JAVA_INT,
            `$RuntimeHelper`.POINTER,
            ValueLayout.JAVA_LONG,
            `$RuntimeHelper`.POINTER,
            ValueLayout.JAVA_LONG,
        )
    )
}

internal val `wgpuInstanceAddRef$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("wgpuInstanceAddRef"),
        FunctionDescriptor.ofVoid(
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `wgpuInstanceRelease$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("wgpuInstanceRelease"),
        FunctionDescriptor.ofVoid(
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `wgpuPipelineLayoutSetLabel$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("wgpuPipelineLayoutSetLabel"),
        FunctionDescriptor.ofVoid(
            `$RuntimeHelper`.POINTER,
            WGPUStringView.layout,
        )
    )
}

internal val `wgpuPipelineLayoutAddRef$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("wgpuPipelineLayoutAddRef"),
        FunctionDescriptor.ofVoid(
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `wgpuPipelineLayoutRelease$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("wgpuPipelineLayoutRelease"),
        FunctionDescriptor.ofVoid(
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `wgpuQuerySetDestroy$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("wgpuQuerySetDestroy"),
        FunctionDescriptor.ofVoid(
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `wgpuQuerySetGetCount$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("wgpuQuerySetGetCount"),
        FunctionDescriptor.of(
            ValueLayout.JAVA_INT,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `wgpuQuerySetGetType$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("wgpuQuerySetGetType"),
        FunctionDescriptor.of(
            ValueLayout.JAVA_INT,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `wgpuQuerySetSetLabel$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("wgpuQuerySetSetLabel"),
        FunctionDescriptor.ofVoid(
            `$RuntimeHelper`.POINTER,
            WGPUStringView.layout,
        )
    )
}

internal val `wgpuQuerySetAddRef$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("wgpuQuerySetAddRef"),
        FunctionDescriptor.ofVoid(
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `wgpuQuerySetRelease$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("wgpuQuerySetRelease"),
        FunctionDescriptor.ofVoid(
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `wgpuQueueOnSubmittedWorkDone$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("wgpuQueueOnSubmittedWorkDone"),
        FunctionDescriptor.of(
            WGPUFuture.layout,
            `$RuntimeHelper`.POINTER,
            WGPUQueueWorkDoneCallbackInfo.layout,
        )
    )
}

internal val `wgpuQueueSetLabel$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("wgpuQueueSetLabel"),
        FunctionDescriptor.ofVoid(
            `$RuntimeHelper`.POINTER,
            WGPUStringView.layout,
        )
    )
}

internal val `wgpuQueueSubmit$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("wgpuQueueSubmit"),
        FunctionDescriptor.ofVoid(
            `$RuntimeHelper`.POINTER,
            ValueLayout.JAVA_LONG,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `wgpuQueueWriteBuffer$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("wgpuQueueWriteBuffer"),
        FunctionDescriptor.ofVoid(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            ValueLayout.JAVA_LONG,
            `$RuntimeHelper`.POINTER,
            ValueLayout.JAVA_LONG,
        )
    )
}

internal val `wgpuQueueWriteTexture$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("wgpuQueueWriteTexture"),
        FunctionDescriptor.ofVoid(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            ValueLayout.JAVA_LONG,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `wgpuQueueAddRef$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("wgpuQueueAddRef"),
        FunctionDescriptor.ofVoid(
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `wgpuQueueRelease$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("wgpuQueueRelease"),
        FunctionDescriptor.ofVoid(
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `wgpuRenderBundleSetLabel$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("wgpuRenderBundleSetLabel"),
        FunctionDescriptor.ofVoid(
            `$RuntimeHelper`.POINTER,
            WGPUStringView.layout,
        )
    )
}

internal val `wgpuRenderBundleAddRef$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("wgpuRenderBundleAddRef"),
        FunctionDescriptor.ofVoid(
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `wgpuRenderBundleRelease$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("wgpuRenderBundleRelease"),
        FunctionDescriptor.ofVoid(
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `wgpuRenderBundleEncoderDraw$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("wgpuRenderBundleEncoderDraw"),
        FunctionDescriptor.ofVoid(
            `$RuntimeHelper`.POINTER,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
        )
    )
}

internal val `wgpuRenderBundleEncoderDrawIndexed$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("wgpuRenderBundleEncoderDrawIndexed"),
        FunctionDescriptor.ofVoid(
            `$RuntimeHelper`.POINTER,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
        )
    )
}

internal val `wgpuRenderBundleEncoderDrawIndexedIndirect$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("wgpuRenderBundleEncoderDrawIndexedIndirect"),
        FunctionDescriptor.ofVoid(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            ValueLayout.JAVA_LONG,
        )
    )
}

internal val `wgpuRenderBundleEncoderDrawIndirect$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("wgpuRenderBundleEncoderDrawIndirect"),
        FunctionDescriptor.ofVoid(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            ValueLayout.JAVA_LONG,
        )
    )
}

internal val `wgpuRenderBundleEncoderFinish$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("wgpuRenderBundleEncoderFinish"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `wgpuRenderBundleEncoderInsertDebugMarker$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("wgpuRenderBundleEncoderInsertDebugMarker"),
        FunctionDescriptor.ofVoid(
            `$RuntimeHelper`.POINTER,
            WGPUStringView.layout,
        )
    )
}

internal val `wgpuRenderBundleEncoderPopDebugGroup$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("wgpuRenderBundleEncoderPopDebugGroup"),
        FunctionDescriptor.ofVoid(
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `wgpuRenderBundleEncoderPushDebugGroup$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("wgpuRenderBundleEncoderPushDebugGroup"),
        FunctionDescriptor.ofVoid(
            `$RuntimeHelper`.POINTER,
            WGPUStringView.layout,
        )
    )
}

internal val `wgpuRenderBundleEncoderSetBindGroup$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("wgpuRenderBundleEncoderSetBindGroup"),
        FunctionDescriptor.ofVoid(
            `$RuntimeHelper`.POINTER,
            ValueLayout.JAVA_INT,
            `$RuntimeHelper`.POINTER,
            ValueLayout.JAVA_LONG,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `wgpuRenderBundleEncoderSetIndexBuffer$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("wgpuRenderBundleEncoderSetIndexBuffer"),
        FunctionDescriptor.ofVoid(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_LONG,
            ValueLayout.JAVA_LONG,
        )
    )
}

internal val `wgpuRenderBundleEncoderSetLabel$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("wgpuRenderBundleEncoderSetLabel"),
        FunctionDescriptor.ofVoid(
            `$RuntimeHelper`.POINTER,
            WGPUStringView.layout,
        )
    )
}

internal val `wgpuRenderBundleEncoderSetPipeline$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("wgpuRenderBundleEncoderSetPipeline"),
        FunctionDescriptor.ofVoid(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `wgpuRenderBundleEncoderSetVertexBuffer$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("wgpuRenderBundleEncoderSetVertexBuffer"),
        FunctionDescriptor.ofVoid(
            `$RuntimeHelper`.POINTER,
            ValueLayout.JAVA_INT,
            `$RuntimeHelper`.POINTER,
            ValueLayout.JAVA_LONG,
            ValueLayout.JAVA_LONG,
        )
    )
}

internal val `wgpuRenderBundleEncoderAddRef$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("wgpuRenderBundleEncoderAddRef"),
        FunctionDescriptor.ofVoid(
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `wgpuRenderBundleEncoderRelease$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("wgpuRenderBundleEncoderRelease"),
        FunctionDescriptor.ofVoid(
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `wgpuRenderPassEncoderBeginOcclusionQuery$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("wgpuRenderPassEncoderBeginOcclusionQuery"),
        FunctionDescriptor.ofVoid(
            `$RuntimeHelper`.POINTER,
            ValueLayout.JAVA_INT,
        )
    )
}

internal val `wgpuRenderPassEncoderDraw$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("wgpuRenderPassEncoderDraw"),
        FunctionDescriptor.ofVoid(
            `$RuntimeHelper`.POINTER,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
        )
    )
}

internal val `wgpuRenderPassEncoderDrawIndexed$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("wgpuRenderPassEncoderDrawIndexed"),
        FunctionDescriptor.ofVoid(
            `$RuntimeHelper`.POINTER,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
        )
    )
}

internal val `wgpuRenderPassEncoderDrawIndexedIndirect$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("wgpuRenderPassEncoderDrawIndexedIndirect"),
        FunctionDescriptor.ofVoid(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            ValueLayout.JAVA_LONG,
        )
    )
}

internal val `wgpuRenderPassEncoderDrawIndirect$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("wgpuRenderPassEncoderDrawIndirect"),
        FunctionDescriptor.ofVoid(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            ValueLayout.JAVA_LONG,
        )
    )
}

internal val `wgpuRenderPassEncoderEnd$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("wgpuRenderPassEncoderEnd"),
        FunctionDescriptor.ofVoid(
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `wgpuRenderPassEncoderEndOcclusionQuery$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("wgpuRenderPassEncoderEndOcclusionQuery"),
        FunctionDescriptor.ofVoid(
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `wgpuRenderPassEncoderExecuteBundles$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("wgpuRenderPassEncoderExecuteBundles"),
        FunctionDescriptor.ofVoid(
            `$RuntimeHelper`.POINTER,
            ValueLayout.JAVA_LONG,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `wgpuRenderPassEncoderInsertDebugMarker$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("wgpuRenderPassEncoderInsertDebugMarker"),
        FunctionDescriptor.ofVoid(
            `$RuntimeHelper`.POINTER,
            WGPUStringView.layout,
        )
    )
}

internal val `wgpuRenderPassEncoderPopDebugGroup$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("wgpuRenderPassEncoderPopDebugGroup"),
        FunctionDescriptor.ofVoid(
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `wgpuRenderPassEncoderPushDebugGroup$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("wgpuRenderPassEncoderPushDebugGroup"),
        FunctionDescriptor.ofVoid(
            `$RuntimeHelper`.POINTER,
            WGPUStringView.layout,
        )
    )
}

internal val `wgpuRenderPassEncoderSetBindGroup$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("wgpuRenderPassEncoderSetBindGroup"),
        FunctionDescriptor.ofVoid(
            `$RuntimeHelper`.POINTER,
            ValueLayout.JAVA_INT,
            `$RuntimeHelper`.POINTER,
            ValueLayout.JAVA_LONG,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `wgpuRenderPassEncoderSetBlendConstant$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("wgpuRenderPassEncoderSetBlendConstant"),
        FunctionDescriptor.ofVoid(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `wgpuRenderPassEncoderSetIndexBuffer$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("wgpuRenderPassEncoderSetIndexBuffer"),
        FunctionDescriptor.ofVoid(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_LONG,
            ValueLayout.JAVA_LONG,
        )
    )
}

internal val `wgpuRenderPassEncoderSetLabel$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("wgpuRenderPassEncoderSetLabel"),
        FunctionDescriptor.ofVoid(
            `$RuntimeHelper`.POINTER,
            WGPUStringView.layout,
        )
    )
}

internal val `wgpuRenderPassEncoderSetPipeline$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("wgpuRenderPassEncoderSetPipeline"),
        FunctionDescriptor.ofVoid(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `wgpuRenderPassEncoderSetScissorRect$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("wgpuRenderPassEncoderSetScissorRect"),
        FunctionDescriptor.ofVoid(
            `$RuntimeHelper`.POINTER,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
            ValueLayout.JAVA_INT,
        )
    )
}

internal val `wgpuRenderPassEncoderSetStencilReference$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("wgpuRenderPassEncoderSetStencilReference"),
        FunctionDescriptor.ofVoid(
            `$RuntimeHelper`.POINTER,
            ValueLayout.JAVA_INT,
        )
    )
}

internal val `wgpuRenderPassEncoderSetVertexBuffer$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("wgpuRenderPassEncoderSetVertexBuffer"),
        FunctionDescriptor.ofVoid(
            `$RuntimeHelper`.POINTER,
            ValueLayout.JAVA_INT,
            `$RuntimeHelper`.POINTER,
            ValueLayout.JAVA_LONG,
            ValueLayout.JAVA_LONG,
        )
    )
}

internal val `wgpuRenderPassEncoderSetViewport$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("wgpuRenderPassEncoderSetViewport"),
        FunctionDescriptor.ofVoid(
            `$RuntimeHelper`.POINTER,
            ValueLayout.JAVA_FLOAT,
            ValueLayout.JAVA_FLOAT,
            ValueLayout.JAVA_FLOAT,
            ValueLayout.JAVA_FLOAT,
            ValueLayout.JAVA_FLOAT,
            ValueLayout.JAVA_FLOAT,
        )
    )
}

internal val `wgpuRenderPassEncoderAddRef$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("wgpuRenderPassEncoderAddRef"),
        FunctionDescriptor.ofVoid(
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `wgpuRenderPassEncoderRelease$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("wgpuRenderPassEncoderRelease"),
        FunctionDescriptor.ofVoid(
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `wgpuRenderPipelineGetBindGroupLayout$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("wgpuRenderPipelineGetBindGroupLayout"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            ValueLayout.JAVA_INT,
        )
    )
}

internal val `wgpuRenderPipelineSetLabel$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("wgpuRenderPipelineSetLabel"),
        FunctionDescriptor.ofVoid(
            `$RuntimeHelper`.POINTER,
            WGPUStringView.layout,
        )
    )
}

internal val `wgpuRenderPipelineAddRef$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("wgpuRenderPipelineAddRef"),
        FunctionDescriptor.ofVoid(
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `wgpuRenderPipelineRelease$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("wgpuRenderPipelineRelease"),
        FunctionDescriptor.ofVoid(
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `wgpuSamplerSetLabel$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("wgpuSamplerSetLabel"),
        FunctionDescriptor.ofVoid(
            `$RuntimeHelper`.POINTER,
            WGPUStringView.layout,
        )
    )
}

internal val `wgpuSamplerAddRef$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("wgpuSamplerAddRef"),
        FunctionDescriptor.ofVoid(
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `wgpuSamplerRelease$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("wgpuSamplerRelease"),
        FunctionDescriptor.ofVoid(
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `wgpuShaderModuleGetCompilationInfo$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("wgpuShaderModuleGetCompilationInfo"),
        FunctionDescriptor.of(
            WGPUFuture.layout,
            `$RuntimeHelper`.POINTER,
            WGPUCompilationInfoCallbackInfo.layout,
        )
    )
}

internal val `wgpuShaderModuleSetLabel$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("wgpuShaderModuleSetLabel"),
        FunctionDescriptor.ofVoid(
            `$RuntimeHelper`.POINTER,
            WGPUStringView.layout,
        )
    )
}

internal val `wgpuShaderModuleAddRef$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("wgpuShaderModuleAddRef"),
        FunctionDescriptor.ofVoid(
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `wgpuShaderModuleRelease$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("wgpuShaderModuleRelease"),
        FunctionDescriptor.ofVoid(
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `wgpuSupportedFeaturesFreeMembers$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("wgpuSupportedFeaturesFreeMembers"),
        FunctionDescriptor.ofVoid(
            WGPUSupportedFeatures.layout,
        )
    )
}

internal val `wgpuSupportedWGSLLanguageFeaturesFreeMembers$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("wgpuSupportedWGSLLanguageFeaturesFreeMembers"),
        FunctionDescriptor.ofVoid(
            WGPUSupportedWGSLLanguageFeatures.layout,
        )
    )
}

internal val `wgpuSurfaceConfigure$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("wgpuSurfaceConfigure"),
        FunctionDescriptor.ofVoid(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `wgpuSurfaceGetCapabilities$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("wgpuSurfaceGetCapabilities"),
        FunctionDescriptor.of(
            ValueLayout.JAVA_INT,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `wgpuSurfaceGetCurrentTexture$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("wgpuSurfaceGetCurrentTexture"),
        FunctionDescriptor.ofVoid(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `wgpuSurfacePresent$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("wgpuSurfacePresent"),
        FunctionDescriptor.of(
            ValueLayout.JAVA_INT,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `wgpuSurfaceSetLabel$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("wgpuSurfaceSetLabel"),
        FunctionDescriptor.ofVoid(
            `$RuntimeHelper`.POINTER,
            WGPUStringView.layout,
        )
    )
}

internal val `wgpuSurfaceUnconfigure$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("wgpuSurfaceUnconfigure"),
        FunctionDescriptor.ofVoid(
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `wgpuSurfaceAddRef$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("wgpuSurfaceAddRef"),
        FunctionDescriptor.ofVoid(
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `wgpuSurfaceRelease$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("wgpuSurfaceRelease"),
        FunctionDescriptor.ofVoid(
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `wgpuSurfaceCapabilitiesFreeMembers$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("wgpuSurfaceCapabilitiesFreeMembers"),
        FunctionDescriptor.ofVoid(
            WGPUSurfaceCapabilities.layout,
        )
    )
}

internal val `wgpuTextureCreateView$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("wgpuTextureCreateView"),
        FunctionDescriptor.of(
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `wgpuTextureDestroy$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("wgpuTextureDestroy"),
        FunctionDescriptor.ofVoid(
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `wgpuTextureGetDepthOrArrayLayers$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("wgpuTextureGetDepthOrArrayLayers"),
        FunctionDescriptor.of(
            ValueLayout.JAVA_INT,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `wgpuTextureGetDimension$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("wgpuTextureGetDimension"),
        FunctionDescriptor.of(
            ValueLayout.JAVA_INT,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `wgpuTextureGetFormat$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("wgpuTextureGetFormat"),
        FunctionDescriptor.of(
            ValueLayout.JAVA_INT,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `wgpuTextureGetHeight$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("wgpuTextureGetHeight"),
        FunctionDescriptor.of(
            ValueLayout.JAVA_INT,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `wgpuTextureGetMipLevelCount$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("wgpuTextureGetMipLevelCount"),
        FunctionDescriptor.of(
            ValueLayout.JAVA_INT,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `wgpuTextureGetSampleCount$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("wgpuTextureGetSampleCount"),
        FunctionDescriptor.of(
            ValueLayout.JAVA_INT,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `wgpuTextureGetUsage$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("wgpuTextureGetUsage"),
        FunctionDescriptor.of(
            ValueLayout.JAVA_LONG,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `wgpuTextureGetWidth$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("wgpuTextureGetWidth"),
        FunctionDescriptor.of(
            ValueLayout.JAVA_INT,
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `wgpuTextureSetLabel$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("wgpuTextureSetLabel"),
        FunctionDescriptor.ofVoid(
            `$RuntimeHelper`.POINTER,
            WGPUStringView.layout,
        )
    )
}

internal val `wgpuTextureAddRef$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("wgpuTextureAddRef"),
        FunctionDescriptor.ofVoid(
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `wgpuTextureRelease$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("wgpuTextureRelease"),
        FunctionDescriptor.ofVoid(
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `wgpuTextureViewSetLabel$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("wgpuTextureViewSetLabel"),
        FunctionDescriptor.ofVoid(
            `$RuntimeHelper`.POINTER,
            WGPUStringView.layout,
        )
    )
}

internal val `wgpuTextureViewAddRef$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("wgpuTextureViewAddRef"),
        FunctionDescriptor.ofVoid(
            `$RuntimeHelper`.POINTER,
        )
    )
}

internal val `wgpuTextureViewRelease$mh`: MethodHandle by lazy {
    Linker.nativeLinker().downcallHandle(
        `$RuntimeHelper`.findSymbol("wgpuTextureViewRelease"),
        FunctionDescriptor.ofVoid(
            `$RuntimeHelper`.POINTER,
        )
    )
}
