// this file is auto generated by endoqa kotlin ffi, modify it with caution
package webgpu.c

import java.lang.foreign.*
import java.lang.invoke.MethodHandle
import java.lang.invoke.VarHandle

@JvmInline
public value class WGPUDawnShaderModuleSPIRVOptionsDescriptor(
    public val `$mem`: MemorySegment,
) {
    public var chain: WGPUChainedStruct
        get() =
            WGPUChainedStruct(
                chainHandle.invokeExact(
                    this.`$mem`,
                    0L
                ) as MemorySegment
            )
        set(`value`) {
            MemorySegment.copy(
                value.`$mem`, 0L, this.chain.`$mem`, 0L,
                WGPUChainedStruct.layout.byteSize()
            )
        }

    public var allowNonUniformDerivatives: WGPUBool
        get() =
            (allowNonUniformDerivativesHandle.get(
                this.`$mem`,
                0L
            ) as Int).toUInt()
        set(`value`) {
            allowNonUniformDerivativesHandle.set(
                this.`$mem`,
                0L, value.toInt()
            )
        }

    public constructor(gc: Boolean) : this(kotlin.run {
        require(gc) { "Do not call this if gc is not want" }
        Arena.ofAuto().allocate(layout)
    })

    public companion object {
        public val layout: StructLayout = MemoryLayout.structLayout(
            WGPUChainedStruct.layout.withName("chain"),
            ValueLayout.JAVA_INT.withName("allowNonUniformDerivatives"),
            MemoryLayout.paddingLayout(4),
        ).withName("WGPUDawnShaderModuleSPIRVOptionsDescriptor")

        @JvmField
        public val chainHandle: MethodHandle =
            layout.sliceHandle(MemoryLayout.PathElement.groupElement("chain"))

        @JvmField
        public val allowNonUniformDerivativesHandle: VarHandle =
            layout.varHandle(MemoryLayout.PathElement.groupElement("allowNonUniformDerivatives"))

        @JvmStatic
        public fun allocate(alloc: SegmentAllocator): WGPUDawnShaderModuleSPIRVOptionsDescriptor =
            WGPUDawnShaderModuleSPIRVOptionsDescriptor(alloc.allocate(layout))
    }
}
