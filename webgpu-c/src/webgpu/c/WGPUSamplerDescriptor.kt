// this file is auto generated by endoqa kotlin ffi, modify it with caution
package webgpu.c

import java.lang.foreign.Arena
import java.lang.foreign.MemoryLayout
import java.lang.foreign.MemorySegment
import java.lang.foreign.SegmentAllocator
import java.lang.foreign.StructLayout
import java.lang.foreign.ValueLayout
import java.lang.invoke.MethodHandle
import java.lang.invoke.VarHandle
import kotlin.Boolean
import kotlin.Float
import kotlin.Int
import kotlin.Short
import kotlin.UShort
import kotlin.jvm.JvmField
import kotlin.jvm.JvmInline
import kotlin.jvm.JvmStatic

@JvmInline
public value class WGPUSamplerDescriptor(
    public val `$mem`: MemorySegment,
) {
    public var nextInChain: Pointer<WGPUChainedStruct>
        get() = WGPUSamplerDescriptor.nextInChainHandle.get(this.`$mem`, 0L) as MemorySegment
        set(`value`) {
            WGPUSamplerDescriptor.nextInChainHandle.set(this.`$mem`, 0L, value)
        }

    public var label: WGPUStringView
        get() = WGPUStringView(
            WGPUSamplerDescriptor.labelHandle.invokeExact(this.`$mem`, 0L) as
                    MemorySegment
        )
        set(`value`) {
            MemorySegment.copy(value.`$mem`, 0L, this.label.`$mem`, 0L, WGPUStringView.layout.byteSize())
        }

    public var addressModeU: WGPUAddressMode
        get() = WGPUAddressMode.fromInt(
            WGPUSamplerDescriptor.addressModeUHandle.get(this.`$mem`, 0L) as
                    Int
        )
        set(`value`) {
            WGPUSamplerDescriptor.addressModeUHandle.set(this.`$mem`, 0L, value.value)
        }

    public var addressModeV: WGPUAddressMode
        get() = WGPUAddressMode.fromInt(
            WGPUSamplerDescriptor.addressModeVHandle.get(this.`$mem`, 0L) as
                    Int
        )
        set(`value`) {
            WGPUSamplerDescriptor.addressModeVHandle.set(this.`$mem`, 0L, value.value)
        }

    public var addressModeW: WGPUAddressMode
        get() = WGPUAddressMode.fromInt(
            WGPUSamplerDescriptor.addressModeWHandle.get(this.`$mem`, 0L) as
                    Int
        )
        set(`value`) {
            WGPUSamplerDescriptor.addressModeWHandle.set(this.`$mem`, 0L, value.value)
        }

    public var magFilter: WGPUFilterMode
        get() = WGPUFilterMode.fromInt(
            WGPUSamplerDescriptor.magFilterHandle.get(this.`$mem`, 0L) as
                    Int
        )
        set(`value`) {
            WGPUSamplerDescriptor.magFilterHandle.set(this.`$mem`, 0L, value.value)
        }

    public var minFilter: WGPUFilterMode
        get() = WGPUFilterMode.fromInt(
            WGPUSamplerDescriptor.minFilterHandle.get(this.`$mem`, 0L) as
                    Int
        )
        set(`value`) {
            WGPUSamplerDescriptor.minFilterHandle.set(this.`$mem`, 0L, value.value)
        }

    public var mipmapFilter: WGPUMipmapFilterMode
        get() = WGPUMipmapFilterMode.fromInt(
            WGPUSamplerDescriptor.mipmapFilterHandle.get(
                this.`$mem`,
                0L
            ) as Int
        )
        set(`value`) {
            WGPUSamplerDescriptor.mipmapFilterHandle.set(this.`$mem`, 0L, value.value)
        }

    public var lodMinClamp: Float
        get() = WGPUSamplerDescriptor.lodMinClampHandle.get(this.`$mem`, 0L) as Float
        set(`value`) {
            WGPUSamplerDescriptor.lodMinClampHandle.set(this.`$mem`, 0L, value)
        }

    public var lodMaxClamp: Float
        get() = WGPUSamplerDescriptor.lodMaxClampHandle.get(this.`$mem`, 0L) as Float
        set(`value`) {
            WGPUSamplerDescriptor.lodMaxClampHandle.set(this.`$mem`, 0L, value)
        }

    public var compare: WGPUCompareFunction
        get() = WGPUCompareFunction.fromInt(
            WGPUSamplerDescriptor.compareHandle.get(this.`$mem`, 0L) as
                    Int
        )
        set(`value`) {
            WGPUSamplerDescriptor.compareHandle.set(this.`$mem`, 0L, value.value)
        }

    public var maxAnisotropy: UShort
        get() = (WGPUSamplerDescriptor.maxAnisotropyHandle.get(this.`$mem`, 0L) as Short).toUShort()
        set(`value`) {
            WGPUSamplerDescriptor.maxAnisotropyHandle.set(this.`$mem`, 0L, value.toShort())
        }

    public constructor(gc: Boolean) : this(kotlin.run {
        require(gc) { "Do not call this if gc is not want" }
        Arena.ofAuto().allocate(WGPUSamplerDescriptor.layout)
    })

    public companion object {
        public val layout: StructLayout = MemoryLayout.structLayout(
            `$RuntimeHelper`.POINTER.withName("nextInChain"),
            WGPUStringView.layout.withName("label"),
            ValueLayout.JAVA_INT.withName("addressModeU"),
            ValueLayout.JAVA_INT.withName("addressModeV"),
            ValueLayout.JAVA_INT.withName("addressModeW"),
            ValueLayout.JAVA_INT.withName("magFilter"),
            ValueLayout.JAVA_INT.withName("minFilter"),
            ValueLayout.JAVA_INT.withName("mipmapFilter"),
            ValueLayout.JAVA_FLOAT.withName("lodMinClamp"),
            ValueLayout.JAVA_FLOAT.withName("lodMaxClamp"),
            ValueLayout.JAVA_INT.withName("compare"),
            ValueLayout.JAVA_SHORT.withName("maxAnisotropy"),
            java.lang.foreign.MemoryLayout.paddingLayout(2),
        ).withName("WGPUSamplerDescriptor")

        @JvmField
        public val nextInChainHandle: VarHandle =
            layout.varHandle(MemoryLayout.PathElement.groupElement("nextInChain"))

        @JvmField
        public val labelHandle: MethodHandle =
            layout.sliceHandle(MemoryLayout.PathElement.groupElement("label"))

        @JvmField
        public val addressModeUHandle: VarHandle =
            layout.varHandle(MemoryLayout.PathElement.groupElement("addressModeU"))

        @JvmField
        public val addressModeVHandle: VarHandle =
            layout.varHandle(MemoryLayout.PathElement.groupElement("addressModeV"))

        @JvmField
        public val addressModeWHandle: VarHandle =
            layout.varHandle(MemoryLayout.PathElement.groupElement("addressModeW"))

        @JvmField
        public val magFilterHandle: VarHandle =
            layout.varHandle(MemoryLayout.PathElement.groupElement("magFilter"))

        @JvmField
        public val minFilterHandle: VarHandle =
            layout.varHandle(MemoryLayout.PathElement.groupElement("minFilter"))

        @JvmField
        public val mipmapFilterHandle: VarHandle =
            layout.varHandle(MemoryLayout.PathElement.groupElement("mipmapFilter"))

        @JvmField
        public val lodMinClampHandle: VarHandle =
            layout.varHandle(MemoryLayout.PathElement.groupElement("lodMinClamp"))

        @JvmField
        public val lodMaxClampHandle: VarHandle =
            layout.varHandle(MemoryLayout.PathElement.groupElement("lodMaxClamp"))

        @JvmField
        public val compareHandle: VarHandle =
            layout.varHandle(MemoryLayout.PathElement.groupElement("compare"))

        @JvmField
        public val maxAnisotropyHandle: VarHandle =
            layout.varHandle(MemoryLayout.PathElement.groupElement("maxAnisotropy"))

        @JvmStatic
        public fun allocate(alloc: SegmentAllocator): WGPUSamplerDescriptor =
            WGPUSamplerDescriptor(alloc.allocate(WGPUSamplerDescriptor.layout))
    }
}
