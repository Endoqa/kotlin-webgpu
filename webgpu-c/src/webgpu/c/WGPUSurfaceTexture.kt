// this file is auto generated by endoqa kotlin ffi, modify it with caution
package webgpu.c

import java.lang.foreign.Arena
import java.lang.foreign.MemoryLayout
import java.lang.foreign.MemorySegment
import java.lang.foreign.SegmentAllocator
import java.lang.foreign.StructLayout
import java.lang.foreign.ValueLayout
import java.lang.invoke.VarHandle
import kotlin.Boolean
import kotlin.Int
import kotlin.jvm.JvmField
import kotlin.jvm.JvmInline
import kotlin.jvm.JvmStatic

@JvmInline
public value class WGPUSurfaceTexture(
    public val `$mem`: MemorySegment,
) {
    public var texture: WGPUTexture
        get() = WGPUSurfaceTexture.textureHandle.get(this.`$mem`, 0L) as MemorySegment
        set(`value`) {
            WGPUSurfaceTexture.textureHandle.set(this.`$mem`, 0L, value)
        }

    public var status: WGPUSurfaceGetCurrentTextureStatus
        get() =
            WGPUSurfaceGetCurrentTextureStatus.fromInt(
                WGPUSurfaceTexture.statusHandle.get(
                    this.`$mem`,
                    0L
                ) as Int
            )
        set(`value`) {
            WGPUSurfaceTexture.statusHandle.set(this.`$mem`, 0L, value.value)
        }

    public constructor(gc: Boolean) : this(kotlin.run {
        require(gc) { "Do not call this if gc is not want" }
        Arena.ofAuto().allocate(WGPUSurfaceTexture.layout)
    })

    public companion object {
        public val layout: StructLayout = MemoryLayout.structLayout(
            `$RuntimeHelper`.POINTER.withName("texture"),
            ValueLayout.JAVA_INT.withName("status"),
            java.lang.foreign.MemoryLayout.paddingLayout(4),
        ).withName("WGPUSurfaceTexture")

        @JvmField
        public val textureHandle: VarHandle =
            layout.varHandle(MemoryLayout.PathElement.groupElement("texture"))

        @JvmField
        public val statusHandle: VarHandle =
            layout.varHandle(MemoryLayout.PathElement.groupElement("status"))

        @JvmStatic
        public fun allocate(alloc: SegmentAllocator): WGPUSurfaceTexture =
            WGPUSurfaceTexture(alloc.allocate(WGPUSurfaceTexture.layout))
    }
}
