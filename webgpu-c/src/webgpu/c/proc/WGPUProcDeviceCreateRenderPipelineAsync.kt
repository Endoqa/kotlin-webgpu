// this file is auto generated by endoqa kotlin ffi, modify it with caution
package webgpu.c.proc

import java.lang.foreign.Arena
import java.lang.foreign.FunctionDescriptor
import java.lang.foreign.Linker
import java.lang.foreign.MemorySegment
import java.lang.invoke.MethodHandle
import java.lang.invoke.MethodHandles
import kotlin.jvm.JvmStatic
import webgpu.c.Pointer
import webgpu.c.WGPUCreateRenderPipelineAsyncCallbackInfo
import webgpu.c.WGPUDevice
import webgpu.c.WGPUFuture
import webgpu.c.WGPURenderPipelineDescriptor
import webgpu.c.`$RuntimeHelper`

public fun interface WGPUProcDeviceCreateRenderPipelineAsync {
    public fun invoke(
        device: WGPUDevice,
        descriptor: Pointer<WGPURenderPipelineDescriptor>,
        callbackInfo: WGPUCreateRenderPipelineAsyncCallbackInfo,
    ): WGPUFuture

    public fun allocate(arena: Arena): MemorySegment =
        Linker.nativeLinker().upcallStub(invokeHandle.bindTo(this), fd, arena)

    public companion object {
        @JvmStatic
        public val invokeHandle: MethodHandle =
            MethodHandles.lookup().unreflect(WGPUProcDeviceCreateRenderPipelineAsync::class.java.methods.find {
                it.name == "invoke"
            }
            )

        @JvmStatic
        public val fd: FunctionDescriptor = FunctionDescriptor.of(
            WGPUFuture.layout,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            WGPUCreateRenderPipelineAsyncCallbackInfo.layout,
        )
    }
}
