// this file is auto generated by endoqa kotlin ffi, modify it with caution
package webgpu.c.proc

import java.lang.foreign.Arena
import java.lang.foreign.FunctionDescriptor
import java.lang.foreign.Linker
import java.lang.foreign.MemorySegment
import java.lang.foreign.ValueLayout
import java.lang.invoke.MethodHandle
import java.lang.invoke.MethodHandles
import kotlin.jvm.JvmStatic
import webgpu.c.Pointer
import webgpu.c.WGPUAdapter
import webgpu.c.WGPUStatus
import webgpu.c.WGPUSurface
import webgpu.c.WGPUSurfaceCapabilities
import webgpu.c.`$RuntimeHelper`

public fun interface WGPUProcSurfaceGetCapabilities {
    public fun invoke(
        surface: WGPUSurface,
        adapter: WGPUAdapter,
        capabilities: Pointer<WGPUSurfaceCapabilities>,
    ): WGPUStatus

    public fun allocate(arena: Arena): MemorySegment =
        Linker.nativeLinker().upcallStub(invokeHandle.bindTo(this), fd, arena)

    public companion object {
        @JvmStatic
        public val invokeHandle: MethodHandle =
            MethodHandles.filterReturnValue(
                MethodHandles.lookup().unreflect(WGPUProcSurfaceGetCapabilities::class.java.methods.find {
                    it.name == "invoke"
                }
                ), WGPUStatus.toInt)

        @JvmStatic
        public val fd: FunctionDescriptor = FunctionDescriptor.of(
            ValueLayout.JAVA_INT,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
            `$RuntimeHelper`.POINTER,
        )
    }
}
