// this file is auto generated by endoqa kotlin ffi, modify it with caution
package webgpu.c

import java.lang.foreign.MemorySegment
import java.lang.foreign.SegmentAllocator

public fun wgpuAdapterInfoFreeMembers(`value`: WGPUAdapterInfo): Unit =
    `wgpuAdapterInfoFreeMembers$mh`.invokeExact(`value`.`$mem`) as Unit

public fun wgpuAdapterPropertiesFreeMembers(`value`: WGPUAdapterProperties): Unit =
    `wgpuAdapterPropertiesFreeMembers$mh`.invokeExact(`value`.`$mem`) as Unit

public fun wgpuAdapterPropertiesMemoryHeapsFreeMembers(`value`: WGPUAdapterPropertiesMemoryHeaps):
        Unit = `wgpuAdapterPropertiesMemoryHeapsFreeMembers$mh`.invokeExact(`value`.`$mem`) as Unit

public fun wgpuCreateInstance(descriptor: Pointer<WGPUInstanceDescriptor>): WGPUInstance =
    `wgpuCreateInstance$mh`.invokeExact(descriptor) as MemorySegment

public fun wgpuDrmFormatCapabilitiesFreeMembers(`value`: WGPUDrmFormatCapabilities): Unit =
    `wgpuDrmFormatCapabilitiesFreeMembers$mh`.invokeExact(`value`.`$mem`) as Unit

public fun wgpuGetInstanceFeatures(features: Pointer<WGPUInstanceFeatures>): WGPUStatus =
    WGPUStatus.fromInt(`wgpuGetInstanceFeatures$mh`.invokeExact(features) as Int)

public fun wgpuGetProcAddress(device: WGPUDevice, procName: Pointer<Byte>): WGPUProc =
    `wgpuGetProcAddress$mh`.invokeExact(device, procName) as MemorySegment

public
fun wgpuSharedBufferMemoryEndAccessStateFreeMembers(`value`: WGPUSharedBufferMemoryEndAccessState):
        Unit = `wgpuSharedBufferMemoryEndAccessStateFreeMembers$mh`.invokeExact(`value`.`$mem`) as Unit

public
fun wgpuSharedTextureMemoryEndAccessStateFreeMembers(`value`: WGPUSharedTextureMemoryEndAccessState):
        Unit = `wgpuSharedTextureMemoryEndAccessStateFreeMembers$mh`.invokeExact(`value`.`$mem`) as
        Unit

public fun wgpuSurfaceCapabilitiesFreeMembers(`value`: WGPUSurfaceCapabilities): Unit =
    `wgpuSurfaceCapabilitiesFreeMembers$mh`.invokeExact(`value`.`$mem`) as Unit

public fun wgpuAdapterCreateDevice(adapter: WGPUAdapter, descriptor: Pointer<WGPUDeviceDescriptor>):
        WGPUDevice = `wgpuAdapterCreateDevice$mh`.invokeExact(adapter, descriptor) as MemorySegment

public fun wgpuAdapterEnumerateFeatures(adapter: WGPUAdapter, features: Pointer<WGPUFeatureName>):
        ULong = (`wgpuAdapterEnumerateFeatures$mh`.invokeExact(adapter, features) as Long).toULong()

public fun wgpuAdapterGetFormatCapabilities(
    adapter: WGPUAdapter,
    format: WGPUTextureFormat,
    capabilities: Pointer<WGPUFormatCapabilities>,
): WGPUStatus =
    WGPUStatus.fromInt(
        `wgpuAdapterGetFormatCapabilities$mh`.invokeExact(adapter, format.value, capabilities)
                as Int
    )

public fun wgpuAdapterGetInfo(adapter: WGPUAdapter, info: Pointer<WGPUAdapterInfo>): WGPUStatus =
    WGPUStatus.fromInt(`wgpuAdapterGetInfo$mh`.invokeExact(adapter, info) as Int)

public fun wgpuAdapterGetInstance(adapter: WGPUAdapter): WGPUInstance =
    `wgpuAdapterGetInstance$mh`.invokeExact(adapter) as MemorySegment

public fun wgpuAdapterGetLimits(adapter: WGPUAdapter, limits: Pointer<WGPUSupportedLimits>):
        WGPUStatus = WGPUStatus.fromInt(`wgpuAdapterGetLimits$mh`.invokeExact(adapter, limits) as Int)

public fun wgpuAdapterGetProperties(
    adapter: WGPUAdapter,
    properties: Pointer<WGPUAdapterProperties>
): WGPUStatus =
    WGPUStatus.fromInt(`wgpuAdapterGetProperties$mh`.invokeExact(adapter, properties) as Int)

public fun wgpuAdapterHasFeature(adapter: WGPUAdapter, feature: WGPUFeatureName): WGPUBool =
    (`wgpuAdapterHasFeature$mh`.invokeExact(adapter, feature.value) as Int).toUInt()

public fun wgpuAdapterRequestDevice(
    adapter: WGPUAdapter,
    descriptor: Pointer<WGPUDeviceDescriptor>,
    callback: WGPURequestDeviceCallback,
    userdata: Pointer<Unit>,
): Unit = `wgpuAdapterRequestDevice$mh`.invokeExact(adapter, descriptor, callback, userdata) as Unit

context(SegmentAllocator)
public fun wgpuAdapterRequestDevice2(
    adapter: WGPUAdapter,
    options: Pointer<WGPUDeviceDescriptor>,
    callbackInfo: WGPURequestDeviceCallbackInfo2,
): WGPUFuture =
    WGPUFuture(
        `wgpuAdapterRequestDevice2$mh`.invokeExact(this@SegmentAllocator, adapter, options, callbackInfo.`$mem`)
                as MemorySegment
    )

context(SegmentAllocator)
public fun wgpuAdapterRequestDeviceF(
    adapter: WGPUAdapter,
    options: Pointer<WGPUDeviceDescriptor>,
    callbackInfo: WGPURequestDeviceCallbackInfo,
): WGPUFuture =
    WGPUFuture(
        `wgpuAdapterRequestDeviceF$mh`.invokeExact(this@SegmentAllocator, adapter, options, callbackInfo.`$mem`)
                as MemorySegment
    )

public fun wgpuAdapterAddRef(adapter: WGPUAdapter): Unit =
    `wgpuAdapterAddRef$mh`.invokeExact(adapter) as Unit

public fun wgpuAdapterRelease(adapter: WGPUAdapter): Unit =
    `wgpuAdapterRelease$mh`.invokeExact(adapter) as Unit

public fun wgpuBindGroupSetLabel(bindGroup: WGPUBindGroup, label: Pointer<Byte>): Unit =
    `wgpuBindGroupSetLabel$mh`.invokeExact(bindGroup, label) as Unit

public fun wgpuBindGroupAddRef(bindGroup: WGPUBindGroup): Unit =
    `wgpuBindGroupAddRef$mh`.invokeExact(bindGroup) as Unit

public fun wgpuBindGroupRelease(bindGroup: WGPUBindGroup): Unit =
    `wgpuBindGroupRelease$mh`.invokeExact(bindGroup) as Unit

public fun wgpuBindGroupLayoutSetLabel(bindGroupLayout: WGPUBindGroupLayout, label: Pointer<Byte>):
        Unit = `wgpuBindGroupLayoutSetLabel$mh`.invokeExact(bindGroupLayout, label) as Unit

public fun wgpuBindGroupLayoutAddRef(bindGroupLayout: WGPUBindGroupLayout): Unit =
    `wgpuBindGroupLayoutAddRef$mh`.invokeExact(bindGroupLayout) as Unit

public fun wgpuBindGroupLayoutRelease(bindGroupLayout: WGPUBindGroupLayout): Unit =
    `wgpuBindGroupLayoutRelease$mh`.invokeExact(bindGroupLayout) as Unit

public fun wgpuBufferDestroy(buffer: WGPUBuffer): Unit = `wgpuBufferDestroy$mh`.invokeExact(buffer)
        as Unit

public fun wgpuBufferGetConstMappedRange(
    buffer: WGPUBuffer,
    offset: ULong,
    size: ULong,
): Pointer<Unit> =
    `wgpuBufferGetConstMappedRange$mh`.invokeExact(buffer, offset.toLong(), size.toLong()) as
            MemorySegment

public fun wgpuBufferGetMapState(buffer: WGPUBuffer): WGPUBufferMapState =
    WGPUBufferMapState.fromInt(`wgpuBufferGetMapState$mh`.invokeExact(buffer) as Int)

public fun wgpuBufferGetMappedRange(
    buffer: WGPUBuffer,
    offset: ULong,
    size: ULong,
): Pointer<Unit> = `wgpuBufferGetMappedRange$mh`.invokeExact(buffer, offset.toLong(), size.toLong())
        as MemorySegment

public fun wgpuBufferGetSize(buffer: WGPUBuffer): uint64_t =
    (`wgpuBufferGetSize$mh`.invokeExact(buffer) as Long).toULong()

public fun wgpuBufferGetUsage(buffer: WGPUBuffer): WGPUBufferUsage =
    (`wgpuBufferGetUsage$mh`.invokeExact(buffer) as Long).toULong()

public fun wgpuBufferMapAsync(
    buffer: WGPUBuffer,
    mode: WGPUMapMode,
    offset: ULong,
    size: ULong,
    callback: WGPUBufferMapCallback,
    userdata: Pointer<Unit>,
): Unit =
    `wgpuBufferMapAsync$mh`.invokeExact(buffer, mode.toLong(), offset.toLong(), size.toLong(), callback, userdata)
            as Unit

context(SegmentAllocator)
public fun wgpuBufferMapAsync2(
    buffer: WGPUBuffer,
    mode: WGPUMapMode,
    offset: ULong,
    size: ULong,
    callbackInfo: WGPUBufferMapCallbackInfo2,
): WGPUFuture =
    WGPUFuture(
        `wgpuBufferMapAsync2$mh`.invokeExact(
            this@SegmentAllocator,
            buffer,
            mode.toLong(),
            offset.toLong(),
            size.toLong(),
            callbackInfo.`$mem`,
        )
                as MemorySegment
    )

context(SegmentAllocator)
public fun wgpuBufferMapAsyncF(
    buffer: WGPUBuffer,
    mode: WGPUMapMode,
    offset: ULong,
    size: ULong,
    callbackInfo: WGPUBufferMapCallbackInfo,
): WGPUFuture =
    WGPUFuture(
        `wgpuBufferMapAsyncF$mh`.invokeExact(
            this@SegmentAllocator,
            buffer,
            mode.toLong(),
            offset.toLong(),
            size.toLong(),
            callbackInfo.`$mem`,
        )
                as MemorySegment
    )

public fun wgpuBufferSetLabel(buffer: WGPUBuffer, label: Pointer<Byte>): Unit =
    `wgpuBufferSetLabel$mh`.invokeExact(buffer, label) as Unit

public fun wgpuBufferUnmap(buffer: WGPUBuffer): Unit = `wgpuBufferUnmap$mh`.invokeExact(buffer) as
        Unit

public fun wgpuBufferAddRef(buffer: WGPUBuffer): Unit = `wgpuBufferAddRef$mh`.invokeExact(buffer)
        as Unit

public fun wgpuBufferRelease(buffer: WGPUBuffer): Unit = `wgpuBufferRelease$mh`.invokeExact(buffer)
        as Unit

public fun wgpuCommandBufferSetLabel(commandBuffer: WGPUCommandBuffer, label: Pointer<Byte>): Unit =
    `wgpuCommandBufferSetLabel$mh`.invokeExact(commandBuffer, label) as Unit

public fun wgpuCommandBufferAddRef(commandBuffer: WGPUCommandBuffer): Unit =
    `wgpuCommandBufferAddRef$mh`.invokeExact(commandBuffer) as Unit

public fun wgpuCommandBufferRelease(commandBuffer: WGPUCommandBuffer): Unit =
    `wgpuCommandBufferRelease$mh`.invokeExact(commandBuffer) as Unit

public fun wgpuCommandEncoderBeginComputePass(
    commandEncoder: WGPUCommandEncoder,
    descriptor: Pointer<WGPUComputePassDescriptor>
): WGPUComputePassEncoder =
    `wgpuCommandEncoderBeginComputePass$mh`.invokeExact(commandEncoder, descriptor) as MemorySegment

public fun wgpuCommandEncoderBeginRenderPass(
    commandEncoder: WGPUCommandEncoder,
    descriptor: Pointer<WGPURenderPassDescriptor>
): WGPURenderPassEncoder =
    `wgpuCommandEncoderBeginRenderPass$mh`.invokeExact(commandEncoder, descriptor) as MemorySegment

public fun wgpuCommandEncoderClearBuffer(
    commandEncoder: WGPUCommandEncoder,
    buffer: WGPUBuffer,
    offset: uint64_t,
    size: uint64_t,
): Unit =
    `wgpuCommandEncoderClearBuffer$mh`.invokeExact(commandEncoder, buffer, offset.toLong(), size.toLong())
            as Unit

public fun wgpuCommandEncoderCopyBufferToBuffer(
    commandEncoder: WGPUCommandEncoder,
    source: WGPUBuffer,
    sourceOffset: uint64_t,
    destination: WGPUBuffer,
    destinationOffset: uint64_t,
    size: uint64_t,
): Unit =
    `wgpuCommandEncoderCopyBufferToBuffer$mh`.invokeExact(
        commandEncoder,
        source,
        sourceOffset.toLong(),
        destination,
        destinationOffset.toLong(),
        size.toLong(),
    )
            as Unit

public fun wgpuCommandEncoderCopyBufferToTexture(
    commandEncoder: WGPUCommandEncoder,
    source: Pointer<WGPUImageCopyBuffer>,
    destination: Pointer<WGPUImageCopyTexture>,
    copySize: Pointer<WGPUExtent3D>,
): Unit =
    `wgpuCommandEncoderCopyBufferToTexture$mh`.invokeExact(commandEncoder, source, destination, copySize)
            as Unit

public fun wgpuCommandEncoderCopyTextureToBuffer(
    commandEncoder: WGPUCommandEncoder,
    source: Pointer<WGPUImageCopyTexture>,
    destination: Pointer<WGPUImageCopyBuffer>,
    copySize: Pointer<WGPUExtent3D>,
): Unit =
    `wgpuCommandEncoderCopyTextureToBuffer$mh`.invokeExact(commandEncoder, source, destination, copySize)
            as Unit

public fun wgpuCommandEncoderCopyTextureToTexture(
    commandEncoder: WGPUCommandEncoder,
    source: Pointer<WGPUImageCopyTexture>,
    destination: Pointer<WGPUImageCopyTexture>,
    copySize: Pointer<WGPUExtent3D>,
): Unit =
    `wgpuCommandEncoderCopyTextureToTexture$mh`.invokeExact(commandEncoder, source, destination, copySize)
            as Unit

public fun wgpuCommandEncoderFinish(
    commandEncoder: WGPUCommandEncoder,
    descriptor: Pointer<WGPUCommandBufferDescriptor>
): WGPUCommandBuffer =
    `wgpuCommandEncoderFinish$mh`.invokeExact(commandEncoder, descriptor) as MemorySegment

public fun wgpuCommandEncoderInjectValidationError(
    commandEncoder: WGPUCommandEncoder,
    message: Pointer<Byte>
): Unit =
    `wgpuCommandEncoderInjectValidationError$mh`.invokeExact(commandEncoder, message) as Unit

public fun wgpuCommandEncoderInsertDebugMarker(
    commandEncoder: WGPUCommandEncoder,
    markerLabel: Pointer<Byte>
): Unit =
    `wgpuCommandEncoderInsertDebugMarker$mh`.invokeExact(commandEncoder, markerLabel) as Unit

public fun wgpuCommandEncoderPopDebugGroup(commandEncoder: WGPUCommandEncoder): Unit =
    `wgpuCommandEncoderPopDebugGroup$mh`.invokeExact(commandEncoder) as Unit

public fun wgpuCommandEncoderPushDebugGroup(
    commandEncoder: WGPUCommandEncoder,
    groupLabel: Pointer<Byte>
): Unit =
    `wgpuCommandEncoderPushDebugGroup$mh`.invokeExact(commandEncoder, groupLabel) as Unit

public fun wgpuCommandEncoderResolveQuerySet(
    commandEncoder: WGPUCommandEncoder,
    querySet: WGPUQuerySet,
    firstQuery: uint32_t,
    queryCount: uint32_t,
    destination: WGPUBuffer,
    destinationOffset: uint64_t,
): Unit =
    `wgpuCommandEncoderResolveQuerySet$mh`.invokeExact(
        commandEncoder,
        querySet,
        firstQuery.toInt(),
        queryCount.toInt(),
        destination,
        destinationOffset.toLong(),
    )
            as Unit

public fun wgpuCommandEncoderSetLabel(commandEncoder: WGPUCommandEncoder, label: Pointer<Byte>):
        Unit = `wgpuCommandEncoderSetLabel$mh`.invokeExact(commandEncoder, label) as Unit

public fun wgpuCommandEncoderWriteBuffer(
    commandEncoder: WGPUCommandEncoder,
    buffer: WGPUBuffer,
    bufferOffset: uint64_t,
    `data`: Pointer<uint8_t>,
    size: uint64_t,
): Unit =
    `wgpuCommandEncoderWriteBuffer$mh`.invokeExact(
        commandEncoder,
        buffer,
        bufferOffset.toLong(),
        `data`,
        size.toLong(),
    )
            as Unit

public fun wgpuCommandEncoderWriteTimestamp(
    commandEncoder: WGPUCommandEncoder,
    querySet: WGPUQuerySet,
    queryIndex: uint32_t,
): Unit =
    `wgpuCommandEncoderWriteTimestamp$mh`.invokeExact(commandEncoder, querySet, queryIndex.toInt())
            as Unit

public fun wgpuCommandEncoderAddRef(commandEncoder: WGPUCommandEncoder): Unit =
    `wgpuCommandEncoderAddRef$mh`.invokeExact(commandEncoder) as Unit

public fun wgpuCommandEncoderRelease(commandEncoder: WGPUCommandEncoder): Unit =
    `wgpuCommandEncoderRelease$mh`.invokeExact(commandEncoder) as Unit

public fun wgpuComputePassEncoderDispatchWorkgroups(
    computePassEncoder: WGPUComputePassEncoder,
    workgroupCountX: uint32_t,
    workgroupCountY: uint32_t,
    workgroupCountZ: uint32_t,
): Unit =
    `wgpuComputePassEncoderDispatchWorkgroups$mh`.invokeExact(
        computePassEncoder,
        workgroupCountX.toInt(),
        workgroupCountY.toInt(),
        workgroupCountZ.toInt(),
    )
            as Unit

public fun wgpuComputePassEncoderDispatchWorkgroupsIndirect(
    computePassEncoder: WGPUComputePassEncoder,
    indirectBuffer: WGPUBuffer,
    indirectOffset: uint64_t,
): Unit =
    `wgpuComputePassEncoderDispatchWorkgroupsIndirect$mh`.invokeExact(
        computePassEncoder,
        indirectBuffer,
        indirectOffset.toLong(),
    )
            as Unit

public fun wgpuComputePassEncoderEnd(computePassEncoder: WGPUComputePassEncoder): Unit =
    `wgpuComputePassEncoderEnd$mh`.invokeExact(computePassEncoder) as Unit

public fun wgpuComputePassEncoderInsertDebugMarker(
    computePassEncoder: WGPUComputePassEncoder,
    markerLabel: Pointer<Byte>
): Unit =
    `wgpuComputePassEncoderInsertDebugMarker$mh`.invokeExact(computePassEncoder, markerLabel) as
            Unit

public fun wgpuComputePassEncoderPopDebugGroup(computePassEncoder: WGPUComputePassEncoder): Unit =
    `wgpuComputePassEncoderPopDebugGroup$mh`.invokeExact(computePassEncoder) as Unit

public fun wgpuComputePassEncoderPushDebugGroup(
    computePassEncoder: WGPUComputePassEncoder,
    groupLabel: Pointer<Byte>
): Unit =
    `wgpuComputePassEncoderPushDebugGroup$mh`.invokeExact(computePassEncoder, groupLabel) as Unit

public fun wgpuComputePassEncoderSetBindGroup(
    computePassEncoder: WGPUComputePassEncoder,
    groupIndex: uint32_t,
    group: WGPUBindGroup,
    dynamicOffsetCount: ULong,
    dynamicOffsets: Pointer<uint32_t>,
): Unit =
    `wgpuComputePassEncoderSetBindGroup$mh`.invokeExact(
        computePassEncoder,
        groupIndex.toInt(),
        group,
        dynamicOffsetCount.toLong(),
        dynamicOffsets,
    )
            as Unit

public fun wgpuComputePassEncoderSetLabel(
    computePassEncoder: WGPUComputePassEncoder,
    label: Pointer<Byte>
): Unit =
    `wgpuComputePassEncoderSetLabel$mh`.invokeExact(computePassEncoder, label) as Unit

public fun wgpuComputePassEncoderSetPipeline(
    computePassEncoder: WGPUComputePassEncoder,
    pipeline: WGPUComputePipeline
): Unit =
    `wgpuComputePassEncoderSetPipeline$mh`.invokeExact(computePassEncoder, pipeline) as Unit

public fun wgpuComputePassEncoderWriteTimestamp(
    computePassEncoder: WGPUComputePassEncoder,
    querySet: WGPUQuerySet,
    queryIndex: uint32_t,
): Unit =
    `wgpuComputePassEncoderWriteTimestamp$mh`.invokeExact(computePassEncoder, querySet, queryIndex.toInt())
            as Unit

public fun wgpuComputePassEncoderAddRef(computePassEncoder: WGPUComputePassEncoder): Unit =
    `wgpuComputePassEncoderAddRef$mh`.invokeExact(computePassEncoder) as Unit

public fun wgpuComputePassEncoderRelease(computePassEncoder: WGPUComputePassEncoder): Unit =
    `wgpuComputePassEncoderRelease$mh`.invokeExact(computePassEncoder) as Unit

public fun wgpuComputePipelineGetBindGroupLayout(
    computePipeline: WGPUComputePipeline,
    groupIndex: uint32_t
): WGPUBindGroupLayout =
    `wgpuComputePipelineGetBindGroupLayout$mh`.invokeExact(computePipeline, groupIndex.toInt()) as
            MemorySegment

public fun wgpuComputePipelineSetLabel(computePipeline: WGPUComputePipeline, label: Pointer<Byte>):
        Unit = `wgpuComputePipelineSetLabel$mh`.invokeExact(computePipeline, label) as Unit

public fun wgpuComputePipelineAddRef(computePipeline: WGPUComputePipeline): Unit =
    `wgpuComputePipelineAddRef$mh`.invokeExact(computePipeline) as Unit

public fun wgpuComputePipelineRelease(computePipeline: WGPUComputePipeline): Unit =
    `wgpuComputePipelineRelease$mh`.invokeExact(computePipeline) as Unit

public fun wgpuDeviceCreateBindGroup(
    device: WGPUDevice,
    descriptor: Pointer<WGPUBindGroupDescriptor>
): WGPUBindGroup =
    `wgpuDeviceCreateBindGroup$mh`.invokeExact(device, descriptor) as MemorySegment

public fun wgpuDeviceCreateBindGroupLayout(
    device: WGPUDevice,
    descriptor: Pointer<WGPUBindGroupLayoutDescriptor>
): WGPUBindGroupLayout =
    `wgpuDeviceCreateBindGroupLayout$mh`.invokeExact(device, descriptor) as MemorySegment

public fun wgpuDeviceCreateBuffer(device: WGPUDevice, descriptor: Pointer<WGPUBufferDescriptor>):
        WGPUBuffer = `wgpuDeviceCreateBuffer$mh`.invokeExact(device, descriptor) as MemorySegment

public fun wgpuDeviceCreateCommandEncoder(
    device: WGPUDevice,
    descriptor: Pointer<WGPUCommandEncoderDescriptor>
): WGPUCommandEncoder =
    `wgpuDeviceCreateCommandEncoder$mh`.invokeExact(device, descriptor) as MemorySegment

public fun wgpuDeviceCreateComputePipeline(
    device: WGPUDevice,
    descriptor: Pointer<WGPUComputePipelineDescriptor>
): WGPUComputePipeline =
    `wgpuDeviceCreateComputePipeline$mh`.invokeExact(device, descriptor) as MemorySegment

public fun wgpuDeviceCreateComputePipelineAsync(
    device: WGPUDevice,
    descriptor: Pointer<WGPUComputePipelineDescriptor>,
    callback: WGPUCreateComputePipelineAsyncCallback,
    userdata: Pointer<Unit>,
): Unit =
    `wgpuDeviceCreateComputePipelineAsync$mh`.invokeExact(device, descriptor, callback, userdata) as
            Unit

context(SegmentAllocator)
public fun wgpuDeviceCreateComputePipelineAsync2(
    device: WGPUDevice,
    descriptor: Pointer<WGPUComputePipelineDescriptor>,
    callbackInfo: WGPUCreateComputePipelineAsyncCallbackInfo2,
): WGPUFuture =
    WGPUFuture(
        `wgpuDeviceCreateComputePipelineAsync2$mh`.invokeExact(
            this@SegmentAllocator,
            device,
            descriptor,
            callbackInfo.`$mem`,
        )
                as MemorySegment
    )

context(SegmentAllocator)
public fun wgpuDeviceCreateComputePipelineAsyncF(
    device: WGPUDevice,
    descriptor: Pointer<WGPUComputePipelineDescriptor>,
    callbackInfo: WGPUCreateComputePipelineAsyncCallbackInfo,
): WGPUFuture =
    WGPUFuture(
        `wgpuDeviceCreateComputePipelineAsyncF$mh`.invokeExact(
            this@SegmentAllocator,
            device,
            descriptor,
            callbackInfo.`$mem`,
        )
                as MemorySegment
    )

public fun wgpuDeviceCreateErrorBuffer(
    device: WGPUDevice,
    descriptor: Pointer<WGPUBufferDescriptor>
): WGPUBuffer =
    `wgpuDeviceCreateErrorBuffer$mh`.invokeExact(device, descriptor) as MemorySegment

public fun wgpuDeviceCreateErrorExternalTexture(device: WGPUDevice): WGPUExternalTexture =
    `wgpuDeviceCreateErrorExternalTexture$mh`.invokeExact(device) as MemorySegment

public fun wgpuDeviceCreateErrorShaderModule(
    device: WGPUDevice,
    descriptor: Pointer<WGPUShaderModuleDescriptor>,
    errorMessage: Pointer<Byte>,
): WGPUShaderModule =
    `wgpuDeviceCreateErrorShaderModule$mh`.invokeExact(device, descriptor, errorMessage) as
            MemorySegment

public fun wgpuDeviceCreateErrorTexture(
    device: WGPUDevice,
    descriptor: Pointer<WGPUTextureDescriptor>
): WGPUTexture =
    `wgpuDeviceCreateErrorTexture$mh`.invokeExact(device, descriptor) as MemorySegment

public fun wgpuDeviceCreateExternalTexture(
    device: WGPUDevice,
    externalTextureDescriptor: Pointer<WGPUExternalTextureDescriptor>
): WGPUExternalTexture =
    `wgpuDeviceCreateExternalTexture$mh`.invokeExact(device, externalTextureDescriptor) as
            MemorySegment

public fun wgpuDeviceCreatePipelineLayout(
    device: WGPUDevice,
    descriptor: Pointer<WGPUPipelineLayoutDescriptor>
): WGPUPipelineLayout =
    `wgpuDeviceCreatePipelineLayout$mh`.invokeExact(device, descriptor) as MemorySegment

public fun wgpuDeviceCreateQuerySet(
    device: WGPUDevice,
    descriptor: Pointer<WGPUQuerySetDescriptor>
): WGPUQuerySet =
    `wgpuDeviceCreateQuerySet$mh`.invokeExact(device, descriptor) as MemorySegment

public fun wgpuDeviceCreateRenderBundleEncoder(
    device: WGPUDevice,
    descriptor: Pointer<WGPURenderBundleEncoderDescriptor>
): WGPURenderBundleEncoder =
    `wgpuDeviceCreateRenderBundleEncoder$mh`.invokeExact(device, descriptor) as MemorySegment

public fun wgpuDeviceCreateRenderPipeline(
    device: WGPUDevice,
    descriptor: Pointer<WGPURenderPipelineDescriptor>
): WGPURenderPipeline =
    `wgpuDeviceCreateRenderPipeline$mh`.invokeExact(device, descriptor) as MemorySegment

public fun wgpuDeviceCreateRenderPipelineAsync(
    device: WGPUDevice,
    descriptor: Pointer<WGPURenderPipelineDescriptor>,
    callback: WGPUCreateRenderPipelineAsyncCallback,
    userdata: Pointer<Unit>,
): Unit = `wgpuDeviceCreateRenderPipelineAsync$mh`.invokeExact(device, descriptor, callback, userdata)
        as Unit

context(SegmentAllocator)
public fun wgpuDeviceCreateRenderPipelineAsync2(
    device: WGPUDevice,
    descriptor: Pointer<WGPURenderPipelineDescriptor>,
    callbackInfo: WGPUCreateRenderPipelineAsyncCallbackInfo2,
): WGPUFuture =
    WGPUFuture(
        `wgpuDeviceCreateRenderPipelineAsync2$mh`.invokeExact(
            this@SegmentAllocator,
            device,
            descriptor,
            callbackInfo.`$mem`,
        )
                as MemorySegment
    )

context(SegmentAllocator)
public fun wgpuDeviceCreateRenderPipelineAsyncF(
    device: WGPUDevice,
    descriptor: Pointer<WGPURenderPipelineDescriptor>,
    callbackInfo: WGPUCreateRenderPipelineAsyncCallbackInfo,
): WGPUFuture =
    WGPUFuture(
        `wgpuDeviceCreateRenderPipelineAsyncF$mh`.invokeExact(
            this@SegmentAllocator,
            device,
            descriptor,
            callbackInfo.`$mem`,
        )
                as MemorySegment
    )

public fun wgpuDeviceCreateSampler(device: WGPUDevice, descriptor: Pointer<WGPUSamplerDescriptor>):
        WGPUSampler = `wgpuDeviceCreateSampler$mh`.invokeExact(device, descriptor) as MemorySegment

public fun wgpuDeviceCreateShaderModule(
    device: WGPUDevice,
    descriptor: Pointer<WGPUShaderModuleDescriptor>
): WGPUShaderModule =
    `wgpuDeviceCreateShaderModule$mh`.invokeExact(device, descriptor) as MemorySegment

public fun wgpuDeviceCreateSwapChain(
    device: WGPUDevice,
    surface: WGPUSurface,
    descriptor: Pointer<WGPUSwapChainDescriptor>,
): WGPUSwapChain = `wgpuDeviceCreateSwapChain$mh`.invokeExact(device, surface, descriptor) as
        MemorySegment

public fun wgpuDeviceCreateTexture(device: WGPUDevice, descriptor: Pointer<WGPUTextureDescriptor>):
        WGPUTexture = `wgpuDeviceCreateTexture$mh`.invokeExact(device, descriptor) as MemorySegment

public fun wgpuDeviceDestroy(device: WGPUDevice): Unit = `wgpuDeviceDestroy$mh`.invokeExact(device)
        as Unit

public fun wgpuDeviceEnumerateFeatures(device: WGPUDevice, features: Pointer<WGPUFeatureName>):
        ULong = (`wgpuDeviceEnumerateFeatures$mh`.invokeExact(device, features) as Long).toULong()

public fun wgpuDeviceForceLoss(
    device: WGPUDevice,
    type: WGPUDeviceLostReason,
    message: Pointer<Byte>,
): Unit = `wgpuDeviceForceLoss$mh`.invokeExact(device, type.value, message) as Unit

public fun wgpuDeviceGetAHardwareBufferProperties(
    device: WGPUDevice,
    handle: Pointer<Unit>,
    properties: Pointer<WGPUAHardwareBufferProperties>,
): WGPUStatus =
    WGPUStatus.fromInt(
        `wgpuDeviceGetAHardwareBufferProperties$mh`.invokeExact(device, handle, properties)
                as Int
    )

public fun wgpuDeviceGetAdapter(device: WGPUDevice): WGPUAdapter =
    `wgpuDeviceGetAdapter$mh`.invokeExact(device) as MemorySegment

public fun wgpuDeviceGetLimits(device: WGPUDevice, limits: Pointer<WGPUSupportedLimits>): WGPUStatus =
    WGPUStatus.fromInt(`wgpuDeviceGetLimits$mh`.invokeExact(device, limits) as Int)

public fun wgpuDeviceGetQueue(device: WGPUDevice): WGPUQueue =
    `wgpuDeviceGetQueue$mh`.invokeExact(device) as MemorySegment

public fun wgpuDeviceGetSupportedSurfaceUsage(device: WGPUDevice, surface: WGPUSurface):
        WGPUTextureUsage = (`wgpuDeviceGetSupportedSurfaceUsage$mh`.invokeExact(device, surface) as
        Long).toULong()

public fun wgpuDeviceHasFeature(device: WGPUDevice, feature: WGPUFeatureName): WGPUBool =
    (`wgpuDeviceHasFeature$mh`.invokeExact(device, feature.value) as Int).toUInt()

public fun wgpuDeviceImportSharedBufferMemory(
    device: WGPUDevice,
    descriptor: Pointer<WGPUSharedBufferMemoryDescriptor>
): WGPUSharedBufferMemory =
    `wgpuDeviceImportSharedBufferMemory$mh`.invokeExact(device, descriptor) as MemorySegment

public fun wgpuDeviceImportSharedFence(
    device: WGPUDevice,
    descriptor: Pointer<WGPUSharedFenceDescriptor>
): WGPUSharedFence =
    `wgpuDeviceImportSharedFence$mh`.invokeExact(device, descriptor) as MemorySegment

public fun wgpuDeviceImportSharedTextureMemory(
    device: WGPUDevice,
    descriptor: Pointer<WGPUSharedTextureMemoryDescriptor>
): WGPUSharedTextureMemory =
    `wgpuDeviceImportSharedTextureMemory$mh`.invokeExact(device, descriptor) as MemorySegment

public fun wgpuDeviceInjectError(
    device: WGPUDevice,
    type: WGPUErrorType,
    message: Pointer<Byte>,
): Unit = `wgpuDeviceInjectError$mh`.invokeExact(device, type.value, message) as Unit

public fun wgpuDevicePopErrorScope(
    device: WGPUDevice,
    oldCallback: WGPUErrorCallback,
    userdata: Pointer<Unit>,
): Unit = `wgpuDevicePopErrorScope$mh`.invokeExact(device, oldCallback, userdata) as Unit

context(SegmentAllocator)
public fun wgpuDevicePopErrorScope2(
    device: WGPUDevice,
    callbackInfo: WGPUPopErrorScopeCallbackInfo2
): WGPUFuture =
    WGPUFuture(
        `wgpuDevicePopErrorScope2$mh`.invokeExact(this@SegmentAllocator, device, callbackInfo.`$mem`)
                as MemorySegment
    )

context(SegmentAllocator)
public fun wgpuDevicePopErrorScopeF(
    device: WGPUDevice,
    callbackInfo: WGPUPopErrorScopeCallbackInfo
): WGPUFuture =
    WGPUFuture(
        `wgpuDevicePopErrorScopeF$mh`.invokeExact(this@SegmentAllocator, device, callbackInfo.`$mem`)
                as MemorySegment
    )

public fun wgpuDevicePushErrorScope(device: WGPUDevice, filter: WGPUErrorFilter): Unit =
    `wgpuDevicePushErrorScope$mh`.invokeExact(device, filter.value) as Unit

public fun wgpuDeviceSetDeviceLostCallback(
    device: WGPUDevice,
    callback: WGPUDeviceLostCallback,
    userdata: Pointer<Unit>,
): Unit = `wgpuDeviceSetDeviceLostCallback$mh`.invokeExact(device, callback, userdata) as Unit

public fun wgpuDeviceSetLabel(device: WGPUDevice, label: Pointer<Byte>): Unit =
    `wgpuDeviceSetLabel$mh`.invokeExact(device, label) as Unit

public fun wgpuDeviceSetLoggingCallback(
    device: WGPUDevice,
    callback: WGPULoggingCallback,
    userdata: Pointer<Unit>,
): Unit = `wgpuDeviceSetLoggingCallback$mh`.invokeExact(device, callback, userdata) as Unit

public fun wgpuDeviceSetUncapturedErrorCallback(
    device: WGPUDevice,
    callback: WGPUErrorCallback,
    userdata: Pointer<Unit>,
): Unit = `wgpuDeviceSetUncapturedErrorCallback$mh`.invokeExact(device, callback, userdata) as Unit

public fun wgpuDeviceTick(device: WGPUDevice): Unit = `wgpuDeviceTick$mh`.invokeExact(device) as
        Unit

public fun wgpuDeviceValidateTextureDescriptor(
    device: WGPUDevice,
    descriptor: Pointer<WGPUTextureDescriptor>
): Unit =
    `wgpuDeviceValidateTextureDescriptor$mh`.invokeExact(device, descriptor) as Unit

public fun wgpuDeviceAddRef(device: WGPUDevice): Unit = `wgpuDeviceAddRef$mh`.invokeExact(device)
        as Unit

public fun wgpuDeviceRelease(device: WGPUDevice): Unit = `wgpuDeviceRelease$mh`.invokeExact(device)
        as Unit

public fun wgpuExternalTextureDestroy(externalTexture: WGPUExternalTexture): Unit =
    `wgpuExternalTextureDestroy$mh`.invokeExact(externalTexture) as Unit

public fun wgpuExternalTextureExpire(externalTexture: WGPUExternalTexture): Unit =
    `wgpuExternalTextureExpire$mh`.invokeExact(externalTexture) as Unit

public fun wgpuExternalTextureRefresh(externalTexture: WGPUExternalTexture): Unit =
    `wgpuExternalTextureRefresh$mh`.invokeExact(externalTexture) as Unit

public fun wgpuExternalTextureSetLabel(externalTexture: WGPUExternalTexture, label: Pointer<Byte>):
        Unit = `wgpuExternalTextureSetLabel$mh`.invokeExact(externalTexture, label) as Unit

public fun wgpuExternalTextureAddRef(externalTexture: WGPUExternalTexture): Unit =
    `wgpuExternalTextureAddRef$mh`.invokeExact(externalTexture) as Unit

public fun wgpuExternalTextureRelease(externalTexture: WGPUExternalTexture): Unit =
    `wgpuExternalTextureRelease$mh`.invokeExact(externalTexture) as Unit

public fun wgpuInstanceCreateSurface(
    instance: WGPUInstance,
    descriptor: Pointer<WGPUSurfaceDescriptor>
): WGPUSurface =
    `wgpuInstanceCreateSurface$mh`.invokeExact(instance, descriptor) as MemorySegment

public fun wgpuInstanceEnumerateWGSLLanguageFeatures(
    instance: WGPUInstance,
    features: Pointer<WGPUWGSLFeatureName>
): ULong =
    (`wgpuInstanceEnumerateWGSLLanguageFeatures$mh`.invokeExact(instance, features) as
            Long).toULong()

public fun wgpuInstanceHasWGSLLanguageFeature(instance: WGPUInstance, feature: WGPUWGSLFeatureName):
        WGPUBool = (`wgpuInstanceHasWGSLLanguageFeature$mh`.invokeExact(instance, feature.value) as
        Int).toUInt()

public fun wgpuInstanceProcessEvents(instance: WGPUInstance): Unit =
    `wgpuInstanceProcessEvents$mh`.invokeExact(instance) as Unit

public fun wgpuInstanceRequestAdapter(
    instance: WGPUInstance,
    options: Pointer<WGPURequestAdapterOptions>,
    callback: WGPURequestAdapterCallback,
    userdata: Pointer<Unit>,
): Unit = `wgpuInstanceRequestAdapter$mh`.invokeExact(instance, options, callback, userdata) as Unit

context(SegmentAllocator)
public fun wgpuInstanceRequestAdapter2(
    instance: WGPUInstance,
    options: Pointer<WGPURequestAdapterOptions>,
    callbackInfo: WGPURequestAdapterCallbackInfo2,
): WGPUFuture =
    WGPUFuture(
        `wgpuInstanceRequestAdapter2$mh`.invokeExact(this@SegmentAllocator, instance, options, callbackInfo.`$mem`)
                as MemorySegment
    )

context(SegmentAllocator)
public fun wgpuInstanceRequestAdapterF(
    instance: WGPUInstance,
    options: Pointer<WGPURequestAdapterOptions>,
    callbackInfo: WGPURequestAdapterCallbackInfo,
): WGPUFuture =
    WGPUFuture(
        `wgpuInstanceRequestAdapterF$mh`.invokeExact(this@SegmentAllocator, instance, options, callbackInfo.`$mem`)
                as MemorySegment
    )

public fun wgpuInstanceWaitAny(
    instance: WGPUInstance,
    futureCount: ULong,
    futures: Pointer<WGPUFutureWaitInfo>,
    timeoutNS: uint64_t,
): WGPUWaitStatus =
    WGPUWaitStatus.fromInt(
        `wgpuInstanceWaitAny$mh`.invokeExact(instance, futureCount.toLong(), futures, timeoutNS.toLong())
                as Int
    )

public fun wgpuInstanceAddRef(instance: WGPUInstance): Unit =
    `wgpuInstanceAddRef$mh`.invokeExact(instance) as Unit

public fun wgpuInstanceRelease(instance: WGPUInstance): Unit =
    `wgpuInstanceRelease$mh`.invokeExact(instance) as Unit

public fun wgpuPipelineLayoutSetLabel(pipelineLayout: WGPUPipelineLayout, label: Pointer<Byte>):
        Unit = `wgpuPipelineLayoutSetLabel$mh`.invokeExact(pipelineLayout, label) as Unit

public fun wgpuPipelineLayoutAddRef(pipelineLayout: WGPUPipelineLayout): Unit =
    `wgpuPipelineLayoutAddRef$mh`.invokeExact(pipelineLayout) as Unit

public fun wgpuPipelineLayoutRelease(pipelineLayout: WGPUPipelineLayout): Unit =
    `wgpuPipelineLayoutRelease$mh`.invokeExact(pipelineLayout) as Unit

public fun wgpuQuerySetDestroy(querySet: WGPUQuerySet): Unit =
    `wgpuQuerySetDestroy$mh`.invokeExact(querySet) as Unit

public fun wgpuQuerySetGetCount(querySet: WGPUQuerySet): uint32_t =
    (`wgpuQuerySetGetCount$mh`.invokeExact(querySet) as Int).toUInt()

public fun wgpuQuerySetGetType(querySet: WGPUQuerySet): WGPUQueryType =
    WGPUQueryType.fromInt(`wgpuQuerySetGetType$mh`.invokeExact(querySet) as Int)

public fun wgpuQuerySetSetLabel(querySet: WGPUQuerySet, label: Pointer<Byte>): Unit =
    `wgpuQuerySetSetLabel$mh`.invokeExact(querySet, label) as Unit

public fun wgpuQuerySetAddRef(querySet: WGPUQuerySet): Unit =
    `wgpuQuerySetAddRef$mh`.invokeExact(querySet) as Unit

public fun wgpuQuerySetRelease(querySet: WGPUQuerySet): Unit =
    `wgpuQuerySetRelease$mh`.invokeExact(querySet) as Unit

public fun wgpuQueueCopyExternalTextureForBrowser(
    queue: WGPUQueue,
    source: Pointer<WGPUImageCopyExternalTexture>,
    destination: Pointer<WGPUImageCopyTexture>,
    copySize: Pointer<WGPUExtent3D>,
    options: Pointer<WGPUCopyTextureForBrowserOptions>,
): Unit =
    `wgpuQueueCopyExternalTextureForBrowser$mh`.invokeExact(queue, source, destination, copySize, options)
            as Unit

public fun wgpuQueueCopyTextureForBrowser(
    queue: WGPUQueue,
    source: Pointer<WGPUImageCopyTexture>,
    destination: Pointer<WGPUImageCopyTexture>,
    copySize: Pointer<WGPUExtent3D>,
    options: Pointer<WGPUCopyTextureForBrowserOptions>,
): Unit =
    `wgpuQueueCopyTextureForBrowser$mh`.invokeExact(queue, source, destination, copySize, options) as
            Unit

public fun wgpuQueueOnSubmittedWorkDone(
    queue: WGPUQueue,
    callback: WGPUQueueWorkDoneCallback,
    userdata: Pointer<Unit>,
): Unit = `wgpuQueueOnSubmittedWorkDone$mh`.invokeExact(queue, callback, userdata) as Unit

context(SegmentAllocator)
public fun wgpuQueueOnSubmittedWorkDone2(
    queue: WGPUQueue,
    callbackInfo: WGPUQueueWorkDoneCallbackInfo2
): WGPUFuture =
    WGPUFuture(
        `wgpuQueueOnSubmittedWorkDone2$mh`.invokeExact(this@SegmentAllocator, queue, callbackInfo.`$mem`)
                as MemorySegment
    )

context(SegmentAllocator)
public fun wgpuQueueOnSubmittedWorkDoneF(
    queue: WGPUQueue,
    callbackInfo: WGPUQueueWorkDoneCallbackInfo
): WGPUFuture =
    WGPUFuture(
        `wgpuQueueOnSubmittedWorkDoneF$mh`.invokeExact(this@SegmentAllocator, queue, callbackInfo.`$mem`)
                as MemorySegment
    )

public fun wgpuQueueSetLabel(queue: WGPUQueue, label: Pointer<Byte>): Unit =
    `wgpuQueueSetLabel$mh`.invokeExact(queue, label) as Unit

public fun wgpuQueueSubmit(
    queue: WGPUQueue,
    commandCount: ULong,
    commands: Pointer<WGPUCommandBuffer>,
): Unit = `wgpuQueueSubmit$mh`.invokeExact(queue, commandCount.toLong(), commands) as Unit

public fun wgpuQueueWriteBuffer(
    queue: WGPUQueue,
    buffer: WGPUBuffer,
    bufferOffset: uint64_t,
    `data`: Pointer<Unit>,
    size: ULong,
): Unit =
    `wgpuQueueWriteBuffer$mh`.invokeExact(queue, buffer, bufferOffset.toLong(), `data`, size.toLong())
            as Unit

public fun wgpuQueueWriteTexture(
    queue: WGPUQueue,
    destination: Pointer<WGPUImageCopyTexture>,
    `data`: Pointer<Unit>,
    dataSize: ULong,
    dataLayout: Pointer<WGPUTextureDataLayout>,
    writeSize: Pointer<WGPUExtent3D>,
): Unit =
    `wgpuQueueWriteTexture$mh`.invokeExact(queue, destination, `data`, dataSize.toLong(), dataLayout, writeSize)
            as Unit

public fun wgpuQueueAddRef(queue: WGPUQueue): Unit = `wgpuQueueAddRef$mh`.invokeExact(queue) as
        Unit

public fun wgpuQueueRelease(queue: WGPUQueue): Unit = `wgpuQueueRelease$mh`.invokeExact(queue) as
        Unit

public fun wgpuRenderBundleSetLabel(renderBundle: WGPURenderBundle, label: Pointer<Byte>): Unit =
    `wgpuRenderBundleSetLabel$mh`.invokeExact(renderBundle, label) as Unit

public fun wgpuRenderBundleAddRef(renderBundle: WGPURenderBundle): Unit =
    `wgpuRenderBundleAddRef$mh`.invokeExact(renderBundle) as Unit

public fun wgpuRenderBundleRelease(renderBundle: WGPURenderBundle): Unit =
    `wgpuRenderBundleRelease$mh`.invokeExact(renderBundle) as Unit

public fun wgpuRenderBundleEncoderDraw(
    renderBundleEncoder: WGPURenderBundleEncoder,
    vertexCount: uint32_t,
    instanceCount: uint32_t,
    firstVertex: uint32_t,
    firstInstance: uint32_t,
): Unit =
    `wgpuRenderBundleEncoderDraw$mh`.invokeExact(
        renderBundleEncoder,
        vertexCount.toInt(),
        instanceCount.toInt(),
        firstVertex.toInt(),
        firstInstance.toInt(),
    )
            as Unit

public fun wgpuRenderBundleEncoderDrawIndexed(
    renderBundleEncoder: WGPURenderBundleEncoder,
    indexCount: uint32_t,
    instanceCount: uint32_t,
    firstIndex: uint32_t,
    baseVertex: int32_t,
    firstInstance: uint32_t,
): Unit =
    `wgpuRenderBundleEncoderDrawIndexed$mh`.invokeExact(
        renderBundleEncoder,
        indexCount.toInt(),
        instanceCount.toInt(),
        firstIndex.toInt(),
        baseVertex,
        firstInstance.toInt(),
    )
            as Unit

public fun wgpuRenderBundleEncoderDrawIndexedIndirect(
    renderBundleEncoder: WGPURenderBundleEncoder,
    indirectBuffer: WGPUBuffer,
    indirectOffset: uint64_t,
): Unit =
    `wgpuRenderBundleEncoderDrawIndexedIndirect$mh`.invokeExact(
        renderBundleEncoder,
        indirectBuffer,
        indirectOffset.toLong(),
    )
            as Unit

public fun wgpuRenderBundleEncoderDrawIndirect(
    renderBundleEncoder: WGPURenderBundleEncoder,
    indirectBuffer: WGPUBuffer,
    indirectOffset: uint64_t,
): Unit =
    `wgpuRenderBundleEncoderDrawIndirect$mh`.invokeExact(renderBundleEncoder, indirectBuffer, indirectOffset.toLong())
            as Unit

public fun wgpuRenderBundleEncoderFinish(
    renderBundleEncoder: WGPURenderBundleEncoder,
    descriptor: Pointer<WGPURenderBundleDescriptor>
): WGPURenderBundle =
    `wgpuRenderBundleEncoderFinish$mh`.invokeExact(renderBundleEncoder, descriptor) as MemorySegment

public fun wgpuRenderBundleEncoderInsertDebugMarker(
    renderBundleEncoder: WGPURenderBundleEncoder,
    markerLabel: Pointer<Byte>
): Unit =
    `wgpuRenderBundleEncoderInsertDebugMarker$mh`.invokeExact(renderBundleEncoder, markerLabel) as
            Unit

public fun wgpuRenderBundleEncoderPopDebugGroup(renderBundleEncoder: WGPURenderBundleEncoder): Unit =
    `wgpuRenderBundleEncoderPopDebugGroup$mh`.invokeExact(renderBundleEncoder) as Unit

public fun wgpuRenderBundleEncoderPushDebugGroup(
    renderBundleEncoder: WGPURenderBundleEncoder,
    groupLabel: Pointer<Byte>
): Unit =
    `wgpuRenderBundleEncoderPushDebugGroup$mh`.invokeExact(renderBundleEncoder, groupLabel) as Unit

public fun wgpuRenderBundleEncoderSetBindGroup(
    renderBundleEncoder: WGPURenderBundleEncoder,
    groupIndex: uint32_t,
    group: WGPUBindGroup,
    dynamicOffsetCount: ULong,
    dynamicOffsets: Pointer<uint32_t>,
): Unit =
    `wgpuRenderBundleEncoderSetBindGroup$mh`.invokeExact(
        renderBundleEncoder,
        groupIndex.toInt(),
        group,
        dynamicOffsetCount.toLong(),
        dynamicOffsets,
    )
            as Unit

public fun wgpuRenderBundleEncoderSetIndexBuffer(
    renderBundleEncoder: WGPURenderBundleEncoder,
    buffer: WGPUBuffer,
    format: WGPUIndexFormat,
    offset: uint64_t,
    size: uint64_t,
): Unit =
    `wgpuRenderBundleEncoderSetIndexBuffer$mh`.invokeExact(
        renderBundleEncoder,
        buffer,
        format.value,
        offset.toLong(),
        size.toLong(),
    )
            as Unit

public fun wgpuRenderBundleEncoderSetLabel(
    renderBundleEncoder: WGPURenderBundleEncoder,
    label: Pointer<Byte>
): Unit =
    `wgpuRenderBundleEncoderSetLabel$mh`.invokeExact(renderBundleEncoder, label) as Unit

public fun wgpuRenderBundleEncoderSetPipeline(
    renderBundleEncoder: WGPURenderBundleEncoder,
    pipeline: WGPURenderPipeline
): Unit =
    `wgpuRenderBundleEncoderSetPipeline$mh`.invokeExact(renderBundleEncoder, pipeline) as Unit

public fun wgpuRenderBundleEncoderSetVertexBuffer(
    renderBundleEncoder: WGPURenderBundleEncoder,
    slot: uint32_t,
    buffer: WGPUBuffer,
    offset: uint64_t,
    size: uint64_t,
): Unit =
    `wgpuRenderBundleEncoderSetVertexBuffer$mh`.invokeExact(
        renderBundleEncoder,
        slot.toInt(),
        buffer,
        offset.toLong(),
        size.toLong(),
    )
            as Unit

public fun wgpuRenderBundleEncoderAddRef(renderBundleEncoder: WGPURenderBundleEncoder): Unit =
    `wgpuRenderBundleEncoderAddRef$mh`.invokeExact(renderBundleEncoder) as Unit

public fun wgpuRenderBundleEncoderRelease(renderBundleEncoder: WGPURenderBundleEncoder): Unit =
    `wgpuRenderBundleEncoderRelease$mh`.invokeExact(renderBundleEncoder) as Unit

public fun wgpuRenderPassEncoderBeginOcclusionQuery(
    renderPassEncoder: WGPURenderPassEncoder,
    queryIndex: uint32_t
): Unit =
    `wgpuRenderPassEncoderBeginOcclusionQuery$mh`.invokeExact(renderPassEncoder, queryIndex.toInt())
            as Unit

public fun wgpuRenderPassEncoderDraw(
    renderPassEncoder: WGPURenderPassEncoder,
    vertexCount: uint32_t,
    instanceCount: uint32_t,
    firstVertex: uint32_t,
    firstInstance: uint32_t,
): Unit =
    `wgpuRenderPassEncoderDraw$mh`.invokeExact(
        renderPassEncoder,
        vertexCount.toInt(),
        instanceCount.toInt(),
        firstVertex.toInt(),
        firstInstance.toInt(),
    )
            as Unit

public fun wgpuRenderPassEncoderDrawIndexed(
    renderPassEncoder: WGPURenderPassEncoder,
    indexCount: uint32_t,
    instanceCount: uint32_t,
    firstIndex: uint32_t,
    baseVertex: int32_t,
    firstInstance: uint32_t,
): Unit =
    `wgpuRenderPassEncoderDrawIndexed$mh`.invokeExact(
        renderPassEncoder,
        indexCount.toInt(),
        instanceCount.toInt(),
        firstIndex.toInt(),
        baseVertex,
        firstInstance.toInt(),
    )
            as Unit

public fun wgpuRenderPassEncoderDrawIndexedIndirect(
    renderPassEncoder: WGPURenderPassEncoder,
    indirectBuffer: WGPUBuffer,
    indirectOffset: uint64_t,
): Unit =
    `wgpuRenderPassEncoderDrawIndexedIndirect$mh`.invokeExact(
        renderPassEncoder,
        indirectBuffer,
        indirectOffset.toLong(),
    )
            as Unit

public fun wgpuRenderPassEncoderDrawIndirect(
    renderPassEncoder: WGPURenderPassEncoder,
    indirectBuffer: WGPUBuffer,
    indirectOffset: uint64_t,
): Unit =
    `wgpuRenderPassEncoderDrawIndirect$mh`.invokeExact(renderPassEncoder, indirectBuffer, indirectOffset.toLong())
            as Unit

public fun wgpuRenderPassEncoderEnd(renderPassEncoder: WGPURenderPassEncoder): Unit =
    `wgpuRenderPassEncoderEnd$mh`.invokeExact(renderPassEncoder) as Unit

public fun wgpuRenderPassEncoderEndOcclusionQuery(renderPassEncoder: WGPURenderPassEncoder): Unit =
    `wgpuRenderPassEncoderEndOcclusionQuery$mh`.invokeExact(renderPassEncoder) as Unit

public fun wgpuRenderPassEncoderExecuteBundles(
    renderPassEncoder: WGPURenderPassEncoder,
    bundleCount: ULong,
    bundles: Pointer<WGPURenderBundle>,
): Unit =
    `wgpuRenderPassEncoderExecuteBundles$mh`.invokeExact(renderPassEncoder, bundleCount.toLong(), bundles)
            as Unit

public fun wgpuRenderPassEncoderInsertDebugMarker(
    renderPassEncoder: WGPURenderPassEncoder,
    markerLabel: Pointer<Byte>
): Unit =
    `wgpuRenderPassEncoderInsertDebugMarker$mh`.invokeExact(renderPassEncoder, markerLabel) as Unit

public fun wgpuRenderPassEncoderPixelLocalStorageBarrier(renderPassEncoder: WGPURenderPassEncoder):
        Unit = `wgpuRenderPassEncoderPixelLocalStorageBarrier$mh`.invokeExact(renderPassEncoder) as
        Unit

public fun wgpuRenderPassEncoderPopDebugGroup(renderPassEncoder: WGPURenderPassEncoder): Unit =
    `wgpuRenderPassEncoderPopDebugGroup$mh`.invokeExact(renderPassEncoder) as Unit

public fun wgpuRenderPassEncoderPushDebugGroup(
    renderPassEncoder: WGPURenderPassEncoder,
    groupLabel: Pointer<Byte>
): Unit =
    `wgpuRenderPassEncoderPushDebugGroup$mh`.invokeExact(renderPassEncoder, groupLabel) as Unit

public fun wgpuRenderPassEncoderSetBindGroup(
    renderPassEncoder: WGPURenderPassEncoder,
    groupIndex: uint32_t,
    group: WGPUBindGroup,
    dynamicOffsetCount: ULong,
    dynamicOffsets: Pointer<uint32_t>,
): Unit =
    `wgpuRenderPassEncoderSetBindGroup$mh`.invokeExact(
        renderPassEncoder,
        groupIndex.toInt(),
        group,
        dynamicOffsetCount.toLong(),
        dynamicOffsets,
    )
            as Unit

public fun wgpuRenderPassEncoderSetBlendConstant(
    renderPassEncoder: WGPURenderPassEncoder,
    color: Pointer<WGPUColor>
): Unit =
    `wgpuRenderPassEncoderSetBlendConstant$mh`.invokeExact(renderPassEncoder, color) as Unit

public fun wgpuRenderPassEncoderSetIndexBuffer(
    renderPassEncoder: WGPURenderPassEncoder,
    buffer: WGPUBuffer,
    format: WGPUIndexFormat,
    offset: uint64_t,
    size: uint64_t,
): Unit =
    `wgpuRenderPassEncoderSetIndexBuffer$mh`.invokeExact(
        renderPassEncoder,
        buffer,
        format.value,
        offset.toLong(),
        size.toLong(),
    )
            as Unit

public fun wgpuRenderPassEncoderSetLabel(
    renderPassEncoder: WGPURenderPassEncoder,
    label: Pointer<Byte>
): Unit =
    `wgpuRenderPassEncoderSetLabel$mh`.invokeExact(renderPassEncoder, label) as Unit

public fun wgpuRenderPassEncoderSetPipeline(
    renderPassEncoder: WGPURenderPassEncoder,
    pipeline: WGPURenderPipeline
): Unit =
    `wgpuRenderPassEncoderSetPipeline$mh`.invokeExact(renderPassEncoder, pipeline) as Unit

public fun wgpuRenderPassEncoderSetScissorRect(
    renderPassEncoder: WGPURenderPassEncoder,
    x: uint32_t,
    y: uint32_t,
    width: uint32_t,
    height: uint32_t,
): Unit =
    `wgpuRenderPassEncoderSetScissorRect$mh`.invokeExact(
        renderPassEncoder,
        x.toInt(),
        y.toInt(),
        width.toInt(),
        height.toInt(),
    )
            as Unit

public fun wgpuRenderPassEncoderSetStencilReference(
    renderPassEncoder: WGPURenderPassEncoder,
    reference: uint32_t
): Unit =
    `wgpuRenderPassEncoderSetStencilReference$mh`.invokeExact(renderPassEncoder, reference.toInt())
            as Unit

public fun wgpuRenderPassEncoderSetVertexBuffer(
    renderPassEncoder: WGPURenderPassEncoder,
    slot: uint32_t,
    buffer: WGPUBuffer,
    offset: uint64_t,
    size: uint64_t,
): Unit =
    `wgpuRenderPassEncoderSetVertexBuffer$mh`.invokeExact(
        renderPassEncoder,
        slot.toInt(),
        buffer,
        offset.toLong(),
        size.toLong(),
    )
            as Unit

public fun wgpuRenderPassEncoderSetViewport(
    renderPassEncoder: WGPURenderPassEncoder,
    x: Float,
    y: Float,
    width: Float,
    height: Float,
    minDepth: Float,
    maxDepth: Float,
): Unit =
    `wgpuRenderPassEncoderSetViewport$mh`.invokeExact(renderPassEncoder, x, y, width, height, minDepth, maxDepth)
            as Unit

public fun wgpuRenderPassEncoderWriteTimestamp(
    renderPassEncoder: WGPURenderPassEncoder,
    querySet: WGPUQuerySet,
    queryIndex: uint32_t,
): Unit =
    `wgpuRenderPassEncoderWriteTimestamp$mh`.invokeExact(renderPassEncoder, querySet, queryIndex.toInt())
            as Unit

public fun wgpuRenderPassEncoderAddRef(renderPassEncoder: WGPURenderPassEncoder): Unit =
    `wgpuRenderPassEncoderAddRef$mh`.invokeExact(renderPassEncoder) as Unit

public fun wgpuRenderPassEncoderRelease(renderPassEncoder: WGPURenderPassEncoder): Unit =
    `wgpuRenderPassEncoderRelease$mh`.invokeExact(renderPassEncoder) as Unit

public fun wgpuRenderPipelineGetBindGroupLayout(
    renderPipeline: WGPURenderPipeline,
    groupIndex: uint32_t
): WGPUBindGroupLayout =
    `wgpuRenderPipelineGetBindGroupLayout$mh`.invokeExact(renderPipeline, groupIndex.toInt()) as
            MemorySegment

public fun wgpuRenderPipelineSetLabel(renderPipeline: WGPURenderPipeline, label: Pointer<Byte>):
        Unit = `wgpuRenderPipelineSetLabel$mh`.invokeExact(renderPipeline, label) as Unit

public fun wgpuRenderPipelineAddRef(renderPipeline: WGPURenderPipeline): Unit =
    `wgpuRenderPipelineAddRef$mh`.invokeExact(renderPipeline) as Unit

public fun wgpuRenderPipelineRelease(renderPipeline: WGPURenderPipeline): Unit =
    `wgpuRenderPipelineRelease$mh`.invokeExact(renderPipeline) as Unit

public fun wgpuSamplerSetLabel(sampler: WGPUSampler, label: Pointer<Byte>): Unit =
    `wgpuSamplerSetLabel$mh`.invokeExact(sampler, label) as Unit

public fun wgpuSamplerAddRef(sampler: WGPUSampler): Unit =
    `wgpuSamplerAddRef$mh`.invokeExact(sampler) as Unit

public fun wgpuSamplerRelease(sampler: WGPUSampler): Unit =
    `wgpuSamplerRelease$mh`.invokeExact(sampler) as Unit

public fun wgpuShaderModuleGetCompilationInfo(
    shaderModule: WGPUShaderModule,
    callback: WGPUCompilationInfoCallback,
    userdata: Pointer<Unit>,
): Unit = `wgpuShaderModuleGetCompilationInfo$mh`.invokeExact(shaderModule, callback, userdata) as
        Unit

context(SegmentAllocator)
public fun wgpuShaderModuleGetCompilationInfo2(
    shaderModule: WGPUShaderModule,
    callbackInfo: WGPUCompilationInfoCallbackInfo2
): WGPUFuture =
    WGPUFuture(
        `wgpuShaderModuleGetCompilationInfo2$mh`.invokeExact(this@SegmentAllocator, shaderModule, callbackInfo.`$mem`)
                as MemorySegment
    )

context(SegmentAllocator)
public fun wgpuShaderModuleGetCompilationInfoF(
    shaderModule: WGPUShaderModule,
    callbackInfo: WGPUCompilationInfoCallbackInfo
): WGPUFuture =
    WGPUFuture(
        `wgpuShaderModuleGetCompilationInfoF$mh`.invokeExact(this@SegmentAllocator, shaderModule, callbackInfo.`$mem`)
                as MemorySegment
    )

public fun wgpuShaderModuleSetLabel(shaderModule: WGPUShaderModule, label: Pointer<Byte>): Unit =
    `wgpuShaderModuleSetLabel$mh`.invokeExact(shaderModule, label) as Unit

public fun wgpuShaderModuleAddRef(shaderModule: WGPUShaderModule): Unit =
    `wgpuShaderModuleAddRef$mh`.invokeExact(shaderModule) as Unit

public fun wgpuShaderModuleRelease(shaderModule: WGPUShaderModule): Unit =
    `wgpuShaderModuleRelease$mh`.invokeExact(shaderModule) as Unit

public fun wgpuSharedBufferMemoryBeginAccess(
    sharedBufferMemory: WGPUSharedBufferMemory,
    buffer: WGPUBuffer,
    descriptor: Pointer<WGPUSharedBufferMemoryBeginAccessDescriptor>,
): WGPUStatus =
    WGPUStatus.fromInt(
        `wgpuSharedBufferMemoryBeginAccess$mh`.invokeExact(sharedBufferMemory, buffer, descriptor)
                as Int
    )

public fun wgpuSharedBufferMemoryCreateBuffer(
    sharedBufferMemory: WGPUSharedBufferMemory,
    descriptor: Pointer<WGPUBufferDescriptor>
): WGPUBuffer =
    `wgpuSharedBufferMemoryCreateBuffer$mh`.invokeExact(sharedBufferMemory, descriptor) as
            MemorySegment

public fun wgpuSharedBufferMemoryEndAccess(
    sharedBufferMemory: WGPUSharedBufferMemory,
    buffer: WGPUBuffer,
    descriptor: Pointer<WGPUSharedBufferMemoryEndAccessState>,
): WGPUStatus =
    WGPUStatus.fromInt(
        `wgpuSharedBufferMemoryEndAccess$mh`.invokeExact(sharedBufferMemory, buffer, descriptor)
                as Int
    )

public fun wgpuSharedBufferMemoryGetProperties(
    sharedBufferMemory: WGPUSharedBufferMemory,
    properties: Pointer<WGPUSharedBufferMemoryProperties>
): WGPUStatus =
    WGPUStatus.fromInt(
        `wgpuSharedBufferMemoryGetProperties$mh`.invokeExact(sharedBufferMemory, properties)
                as Int
    )

public fun wgpuSharedBufferMemoryIsDeviceLost(sharedBufferMemory: WGPUSharedBufferMemory): WGPUBool =
    (`wgpuSharedBufferMemoryIsDeviceLost$mh`.invokeExact(sharedBufferMemory) as Int).toUInt()

public fun wgpuSharedBufferMemorySetLabel(
    sharedBufferMemory: WGPUSharedBufferMemory,
    label: Pointer<Byte>
): Unit =
    `wgpuSharedBufferMemorySetLabel$mh`.invokeExact(sharedBufferMemory, label) as Unit

public fun wgpuSharedBufferMemoryAddRef(sharedBufferMemory: WGPUSharedBufferMemory): Unit =
    `wgpuSharedBufferMemoryAddRef$mh`.invokeExact(sharedBufferMemory) as Unit

public fun wgpuSharedBufferMemoryRelease(sharedBufferMemory: WGPUSharedBufferMemory): Unit =
    `wgpuSharedBufferMemoryRelease$mh`.invokeExact(sharedBufferMemory) as Unit

public fun wgpuSharedFenceExportInfo(
    sharedFence: WGPUSharedFence,
    info: Pointer<WGPUSharedFenceExportInfo>
): Unit =
    `wgpuSharedFenceExportInfo$mh`.invokeExact(sharedFence, info) as Unit

public fun wgpuSharedFenceAddRef(sharedFence: WGPUSharedFence): Unit =
    `wgpuSharedFenceAddRef$mh`.invokeExact(sharedFence) as Unit

public fun wgpuSharedFenceRelease(sharedFence: WGPUSharedFence): Unit =
    `wgpuSharedFenceRelease$mh`.invokeExact(sharedFence) as Unit

public fun wgpuSharedTextureMemoryBeginAccess(
    sharedTextureMemory: WGPUSharedTextureMemory,
    texture: WGPUTexture,
    descriptor: Pointer<WGPUSharedTextureMemoryBeginAccessDescriptor>,
): WGPUStatus =
    WGPUStatus.fromInt(
        `wgpuSharedTextureMemoryBeginAccess$mh`.invokeExact(sharedTextureMemory, texture, descriptor)
                as Int
    )

public fun wgpuSharedTextureMemoryCreateTexture(
    sharedTextureMemory: WGPUSharedTextureMemory,
    descriptor: Pointer<WGPUTextureDescriptor>
): WGPUTexture =
    `wgpuSharedTextureMemoryCreateTexture$mh`.invokeExact(sharedTextureMemory, descriptor) as
            MemorySegment

public fun wgpuSharedTextureMemoryEndAccess(
    sharedTextureMemory: WGPUSharedTextureMemory,
    texture: WGPUTexture,
    descriptor: Pointer<WGPUSharedTextureMemoryEndAccessState>,
): WGPUStatus =
    WGPUStatus.fromInt(
        `wgpuSharedTextureMemoryEndAccess$mh`.invokeExact(sharedTextureMemory, texture, descriptor)
                as Int
    )

public fun wgpuSharedTextureMemoryGetProperties(
    sharedTextureMemory: WGPUSharedTextureMemory,
    properties: Pointer<WGPUSharedTextureMemoryProperties>
): WGPUStatus =
    WGPUStatus.fromInt(
        `wgpuSharedTextureMemoryGetProperties$mh`.invokeExact(sharedTextureMemory, properties)
                as Int
    )

public fun wgpuSharedTextureMemoryIsDeviceLost(sharedTextureMemory: WGPUSharedTextureMemory):
        WGPUBool = (`wgpuSharedTextureMemoryIsDeviceLost$mh`.invokeExact(sharedTextureMemory) as
        Int).toUInt()

public fun wgpuSharedTextureMemorySetLabel(
    sharedTextureMemory: WGPUSharedTextureMemory,
    label: Pointer<Byte>
): Unit =
    `wgpuSharedTextureMemorySetLabel$mh`.invokeExact(sharedTextureMemory, label) as Unit

public fun wgpuSharedTextureMemoryAddRef(sharedTextureMemory: WGPUSharedTextureMemory): Unit =
    `wgpuSharedTextureMemoryAddRef$mh`.invokeExact(sharedTextureMemory) as Unit

public fun wgpuSharedTextureMemoryRelease(sharedTextureMemory: WGPUSharedTextureMemory): Unit =
    `wgpuSharedTextureMemoryRelease$mh`.invokeExact(sharedTextureMemory) as Unit

public fun wgpuSurfaceConfigure(surface: WGPUSurface, config: Pointer<WGPUSurfaceConfiguration>):
        Unit = `wgpuSurfaceConfigure$mh`.invokeExact(surface, config) as Unit

public fun wgpuSurfaceGetCapabilities(
    surface: WGPUSurface,
    adapter: WGPUAdapter,
    capabilities: Pointer<WGPUSurfaceCapabilities>,
): WGPUStatus =
    WGPUStatus.fromInt(
        `wgpuSurfaceGetCapabilities$mh`.invokeExact(surface, adapter, capabilities) as
                Int
    )

public fun wgpuSurfaceGetCurrentTexture(
    surface: WGPUSurface,
    surfaceTexture: Pointer<WGPUSurfaceTexture>
): Unit =
    `wgpuSurfaceGetCurrentTexture$mh`.invokeExact(surface, surfaceTexture) as Unit

public fun wgpuSurfaceGetPreferredFormat(surface: WGPUSurface, adapter: WGPUAdapter):
        WGPUTextureFormat =
    WGPUTextureFormat.fromInt(
        `wgpuSurfaceGetPreferredFormat$mh`.invokeExact(surface, adapter) as
                Int
    )

public fun wgpuSurfacePresent(surface: WGPUSurface): Unit =
    `wgpuSurfacePresent$mh`.invokeExact(surface) as Unit

public fun wgpuSurfaceUnconfigure(surface: WGPUSurface): Unit =
    `wgpuSurfaceUnconfigure$mh`.invokeExact(surface) as Unit

public fun wgpuSurfaceAddRef(surface: WGPUSurface): Unit =
    `wgpuSurfaceAddRef$mh`.invokeExact(surface) as Unit

public fun wgpuSurfaceRelease(surface: WGPUSurface): Unit =
    `wgpuSurfaceRelease$mh`.invokeExact(surface) as Unit

public fun wgpuSwapChainGetCurrentTexture(swapChain: WGPUSwapChain): WGPUTexture =
    `wgpuSwapChainGetCurrentTexture$mh`.invokeExact(swapChain) as MemorySegment

public fun wgpuSwapChainGetCurrentTextureView(swapChain: WGPUSwapChain): WGPUTextureView =
    `wgpuSwapChainGetCurrentTextureView$mh`.invokeExact(swapChain) as MemorySegment

public fun wgpuSwapChainPresent(swapChain: WGPUSwapChain): Unit =
    `wgpuSwapChainPresent$mh`.invokeExact(swapChain) as Unit

public fun wgpuSwapChainAddRef(swapChain: WGPUSwapChain): Unit =
    `wgpuSwapChainAddRef$mh`.invokeExact(swapChain) as Unit

public fun wgpuSwapChainRelease(swapChain: WGPUSwapChain): Unit =
    `wgpuSwapChainRelease$mh`.invokeExact(swapChain) as Unit

public fun wgpuTextureCreateErrorView(
    texture: WGPUTexture,
    descriptor: Pointer<WGPUTextureViewDescriptor>
): WGPUTextureView =
    `wgpuTextureCreateErrorView$mh`.invokeExact(texture, descriptor) as MemorySegment

public fun wgpuTextureCreateView(
    texture: WGPUTexture,
    descriptor: Pointer<WGPUTextureViewDescriptor>
): WGPUTextureView =
    `wgpuTextureCreateView$mh`.invokeExact(texture, descriptor) as MemorySegment

public fun wgpuTextureDestroy(texture: WGPUTexture): Unit =
    `wgpuTextureDestroy$mh`.invokeExact(texture) as Unit

public fun wgpuTextureGetDepthOrArrayLayers(texture: WGPUTexture): uint32_t =
    (`wgpuTextureGetDepthOrArrayLayers$mh`.invokeExact(texture) as Int).toUInt()

public fun wgpuTextureGetDimension(texture: WGPUTexture): WGPUTextureDimension =
    WGPUTextureDimension.fromInt(`wgpuTextureGetDimension$mh`.invokeExact(texture) as Int)

public fun wgpuTextureGetFormat(texture: WGPUTexture): WGPUTextureFormat =
    WGPUTextureFormat.fromInt(`wgpuTextureGetFormat$mh`.invokeExact(texture) as Int)

public fun wgpuTextureGetHeight(texture: WGPUTexture): uint32_t =
    (`wgpuTextureGetHeight$mh`.invokeExact(texture) as Int).toUInt()

public fun wgpuTextureGetMipLevelCount(texture: WGPUTexture): uint32_t =
    (`wgpuTextureGetMipLevelCount$mh`.invokeExact(texture) as Int).toUInt()

public fun wgpuTextureGetSampleCount(texture: WGPUTexture): uint32_t =
    (`wgpuTextureGetSampleCount$mh`.invokeExact(texture) as Int).toUInt()

public fun wgpuTextureGetUsage(texture: WGPUTexture): WGPUTextureUsage =
    (`wgpuTextureGetUsage$mh`.invokeExact(texture) as Long).toULong()

public fun wgpuTextureGetWidth(texture: WGPUTexture): uint32_t =
    (`wgpuTextureGetWidth$mh`.invokeExact(texture) as Int).toUInt()

public fun wgpuTextureSetLabel(texture: WGPUTexture, label: Pointer<Byte>): Unit =
    `wgpuTextureSetLabel$mh`.invokeExact(texture, label) as Unit

public fun wgpuTextureAddRef(texture: WGPUTexture): Unit =
    `wgpuTextureAddRef$mh`.invokeExact(texture) as Unit

public fun wgpuTextureRelease(texture: WGPUTexture): Unit =
    `wgpuTextureRelease$mh`.invokeExact(texture) as Unit

public fun wgpuTextureViewSetLabel(textureView: WGPUTextureView, label: Pointer<Byte>): Unit =
    `wgpuTextureViewSetLabel$mh`.invokeExact(textureView, label) as Unit

public fun wgpuTextureViewAddRef(textureView: WGPUTextureView): Unit =
    `wgpuTextureViewAddRef$mh`.invokeExact(textureView) as Unit

public fun wgpuTextureViewRelease(textureView: WGPUTextureView): Unit =
    `wgpuTextureViewRelease$mh`.invokeExact(textureView) as Unit
