// this file is auto generated by endoqa kotlin ffi, modify it with caution
package webgpu.c

import java.lang.foreign.*
import java.lang.invoke.VarHandle

@JvmInline
public value class WGPUVertexAttribute(
    public val `$mem`: MemorySegment,
) {
    public var format: WGPUVertexFormat
        get() = WGPUVertexFormat.fromInt(formatHandle.get(this.`$mem`, 0L) as Int)
        set(`value`) {
            formatHandle.set(this.`$mem`, 0L, value.value)
        }

    public var offset: uint64_t
        get() = (offsetHandle.get(this.`$mem`, 0L) as Long).toULong()
        set(`value`) {
            offsetHandle.set(this.`$mem`, 0L, value.toLong())
        }

    public var shaderLocation: uint32_t
        get() = (shaderLocationHandle.get(this.`$mem`, 0L) as Int).toUInt()
        set(`value`) {
            shaderLocationHandle.set(this.`$mem`, 0L, value.toInt())
        }

    public constructor(gc: Boolean) : this(kotlin.run {
        require(gc) { "Do not call this if gc is not want" }
        Arena.ofAuto().allocate(layout)
    })

    public companion object {
        public val layout: StructLayout = MemoryLayout.structLayout(
            ValueLayout.JAVA_INT.withName("format"),
            MemoryLayout.paddingLayout(4),
            ValueLayout.JAVA_LONG.withName("offset"),
            ValueLayout.JAVA_INT.withName("shaderLocation"),
            MemoryLayout.paddingLayout(4),
        ).withName("WGPUVertexAttribute")

        @JvmField
        public val formatHandle: VarHandle =
            layout.varHandle(MemoryLayout.PathElement.groupElement("format"))

        @JvmField
        public val offsetHandle: VarHandle =
            layout.varHandle(MemoryLayout.PathElement.groupElement("offset"))

        @JvmField
        public val shaderLocationHandle: VarHandle =
            layout.varHandle(MemoryLayout.PathElement.groupElement("shaderLocation"))

        @JvmStatic
        public fun allocate(alloc: SegmentAllocator): WGPUVertexAttribute =
            WGPUVertexAttribute(alloc.allocate(layout))
    }
}
