// this file is auto generated by endoqa kotlin ffi, modify it with caution
package webgpu.c

import java.lang.foreign.*
import java.lang.invoke.MethodHandle
import java.lang.invoke.VarHandle

@JvmInline
public value class WGPUDeviceDescriptor(
    public val `$mem`: MemorySegment,
) {
    public var nextInChain: Pointer<WGPUChainedStruct>
        get() = nextInChainHandle.get(this.`$mem`, 0L) as MemorySegment
        set(`value`) {
            nextInChainHandle.set(this.`$mem`, 0L, value)
        }

    public var label: Pointer<Byte>
        get() = labelHandle.get(this.`$mem`, 0L) as MemorySegment
        set(`value`) {
            labelHandle.set(this.`$mem`, 0L, value)
        }

    public var requiredFeatureCount: ULong
        get() = (requiredFeatureCountHandle.get(this.`$mem`, 0L) as Long).toULong()
        set(`value`) {
            requiredFeatureCountHandle.set(this.`$mem`, 0L, value.toLong())
        }

    public var requiredFeatures: Pointer<WGPUFeatureName>
        get() = requiredFeaturesHandle.get(this.`$mem`, 0L) as MemorySegment
        set(`value`) {
            requiredFeaturesHandle.set(this.`$mem`, 0L, value)
        }

    public var requiredLimits: Pointer<WGPURequiredLimits>
        get() = requiredLimitsHandle.get(this.`$mem`, 0L) as MemorySegment
        set(`value`) {
            requiredLimitsHandle.set(this.`$mem`, 0L, value)
        }

    public var defaultQueue: WGPUQueueDescriptor
        get() = WGPUQueueDescriptor(
            defaultQueueHandle.invokeExact(this.`$mem`, 0L)
                    as MemorySegment
        )
        set(`value`) {
            MemorySegment.copy(
                value.`$mem`, 0L, this.defaultQueue.`$mem`, 0L,
                WGPUQueueDescriptor.layout.byteSize()
            )
        }

    public var deviceLostCallback: WGPUDeviceLostCallback
        get() = deviceLostCallbackHandle.get(this.`$mem`, 0L) as MemorySegment
        set(`value`) {
            deviceLostCallbackHandle.set(this.`$mem`, 0L, value)
        }

    public var deviceLostUserdata: Pointer<Unit>
        get() = deviceLostUserdataHandle.get(this.`$mem`, 0L) as MemorySegment
        set(`value`) {
            deviceLostUserdataHandle.set(this.`$mem`, 0L, value)
        }

    public var deviceLostCallbackInfo: WGPUDeviceLostCallbackInfo
        get() =
            WGPUDeviceLostCallbackInfo(
                deviceLostCallbackInfoHandle.invokeExact(
                    this.`$mem`,
                    0L
                ) as MemorySegment
            )
        set(`value`) {
            MemorySegment.copy(
                value.`$mem`, 0L, this.deviceLostCallbackInfo.`$mem`, 0L,
                WGPUDeviceLostCallbackInfo.layout.byteSize()
            )
        }

    public var uncapturedErrorCallbackInfo: WGPUUncapturedErrorCallbackInfo
        get() =
            WGPUUncapturedErrorCallbackInfo(
                uncapturedErrorCallbackInfoHandle.invokeExact(
                    this.`$mem`,
                    0L
                ) as MemorySegment
            )
        set(`value`) {
            MemorySegment.copy(
                value.`$mem`, 0L, this.uncapturedErrorCallbackInfo.`$mem`, 0L,
                WGPUUncapturedErrorCallbackInfo.layout.byteSize()
            )
        }

    public var deviceLostCallbackInfo2: WGPUDeviceLostCallbackInfo2
        get() =
            WGPUDeviceLostCallbackInfo2(
                deviceLostCallbackInfo2Handle.invokeExact(
                    this.`$mem`,
                    0L
                ) as MemorySegment
            )
        set(`value`) {
            MemorySegment.copy(
                value.`$mem`, 0L, this.deviceLostCallbackInfo2.`$mem`, 0L,
                WGPUDeviceLostCallbackInfo2.layout.byteSize()
            )
        }

    public var uncapturedErrorCallbackInfo2: WGPUUncapturedErrorCallbackInfo2
        get() =
            WGPUUncapturedErrorCallbackInfo2(
                uncapturedErrorCallbackInfo2Handle.invokeExact(
                    this.`$mem`,
                    0L
                ) as MemorySegment
            )
        set(`value`) {
            MemorySegment.copy(
                value.`$mem`, 0L, this.uncapturedErrorCallbackInfo2.`$mem`, 0L,
                WGPUUncapturedErrorCallbackInfo2.layout.byteSize()
            )
        }

    public constructor(gc: Boolean) : this(kotlin.run {
        require(gc) { "Do not call this if gc is not want" }
        Arena.ofAuto().allocate(layout)
    })

    public companion object {
        public val layout: StructLayout = MemoryLayout.structLayout(
            `$RuntimeHelper`.POINTER.withName("nextInChain"),
            `$RuntimeHelper`.POINTER.withName("label"),
            ValueLayout.JAVA_LONG.withName("requiredFeatureCount"),
            `$RuntimeHelper`.POINTER.withName("requiredFeatures"),
            `$RuntimeHelper`.POINTER.withName("requiredLimits"),
            WGPUQueueDescriptor.layout.withName("defaultQueue"),
            `$RuntimeHelper`.POINTER.withName("deviceLostCallback"),
            `$RuntimeHelper`.POINTER.withName("deviceLostUserdata"),
            WGPUDeviceLostCallbackInfo.layout.withName("deviceLostCallbackInfo"),
            WGPUUncapturedErrorCallbackInfo.layout.withName("uncapturedErrorCallbackInfo"),
            WGPUDeviceLostCallbackInfo2.layout.withName("deviceLostCallbackInfo2"),
            WGPUUncapturedErrorCallbackInfo2.layout.withName("uncapturedErrorCallbackInfo2"),
        ).withName("WGPUDeviceDescriptor")

        @JvmField
        public val nextInChainHandle: VarHandle =
            layout.varHandle(MemoryLayout.PathElement.groupElement("nextInChain"))

        @JvmField
        public val labelHandle: VarHandle =
            layout.varHandle(MemoryLayout.PathElement.groupElement("label"))

        @JvmField
        public val requiredFeatureCountHandle: VarHandle =
            layout.varHandle(MemoryLayout.PathElement.groupElement("requiredFeatureCount"))

        @JvmField
        public val requiredFeaturesHandle: VarHandle =
            layout.varHandle(MemoryLayout.PathElement.groupElement("requiredFeatures"))

        @JvmField
        public val requiredLimitsHandle: VarHandle =
            layout.varHandle(MemoryLayout.PathElement.groupElement("requiredLimits"))

        @JvmField
        public val defaultQueueHandle: MethodHandle =
            layout.sliceHandle(MemoryLayout.PathElement.groupElement("defaultQueue"))

        @JvmField
        public val deviceLostCallbackHandle: VarHandle =
            layout.varHandle(MemoryLayout.PathElement.groupElement("deviceLostCallback"))

        @JvmField
        public val deviceLostUserdataHandle: VarHandle =
            layout.varHandle(MemoryLayout.PathElement.groupElement("deviceLostUserdata"))

        @JvmField
        public val deviceLostCallbackInfoHandle: MethodHandle =
            layout.sliceHandle(MemoryLayout.PathElement.groupElement("deviceLostCallbackInfo"))

        @JvmField
        public val uncapturedErrorCallbackInfoHandle: MethodHandle =
            layout.sliceHandle(MemoryLayout.PathElement.groupElement("uncapturedErrorCallbackInfo"))

        @JvmField
        public val deviceLostCallbackInfo2Handle: MethodHandle =
            layout.sliceHandle(MemoryLayout.PathElement.groupElement("deviceLostCallbackInfo2"))

        @JvmField
        public val uncapturedErrorCallbackInfo2Handle: MethodHandle =
            layout.sliceHandle(MemoryLayout.PathElement.groupElement("uncapturedErrorCallbackInfo2"))

        @JvmStatic
        public fun allocate(alloc: SegmentAllocator): WGPUDeviceDescriptor =
            WGPUDeviceDescriptor(alloc.allocate(layout))
    }
}
