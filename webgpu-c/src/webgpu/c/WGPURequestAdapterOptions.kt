// this file is auto generated by endoqa kotlin ffi, modify it with caution
package webgpu.c

import java.lang.foreign.Arena
import java.lang.foreign.MemoryLayout
import java.lang.foreign.MemorySegment
import java.lang.foreign.SegmentAllocator
import java.lang.foreign.StructLayout
import java.lang.foreign.ValueLayout
import java.lang.invoke.VarHandle
import kotlin.Boolean
import kotlin.Int
import kotlin.jvm.JvmField
import kotlin.jvm.JvmInline
import kotlin.jvm.JvmStatic

@JvmInline
public value class WGPURequestAdapterOptions(
    public val `$mem`: MemorySegment,
) {
    public var nextInChain: Pointer<WGPUChainedStruct>
        get() = WGPURequestAdapterOptions.nextInChainHandle.get(this.`$mem`, 0L) as MemorySegment
        set(`value`) {
            WGPURequestAdapterOptions.nextInChainHandle.set(this.`$mem`, 0L, value)
        }

    public var compatibleSurface: WGPUSurface
        get() = WGPURequestAdapterOptions.compatibleSurfaceHandle.get(this.`$mem`, 0L) as MemorySegment
        set(`value`) {
            WGPURequestAdapterOptions.compatibleSurfaceHandle.set(this.`$mem`, 0L, value)
        }

    public var powerPreference: WGPUPowerPreference
        get() =
            WGPUPowerPreference.fromInt(
                WGPURequestAdapterOptions.powerPreferenceHandle.get(
                    this.`$mem`,
                    0L
                ) as Int
            )
        set(`value`) {
            WGPURequestAdapterOptions.powerPreferenceHandle.set(this.`$mem`, 0L, value.value)
        }

    public var backendType: WGPUBackendType
        get() = WGPUBackendType.fromInt(
            WGPURequestAdapterOptions.backendTypeHandle.get(this.`$mem`, 0L)
                    as Int
        )
        set(`value`) {
            WGPURequestAdapterOptions.backendTypeHandle.set(this.`$mem`, 0L, value.value)
        }

    public var forceFallbackAdapter: WGPUBool
        get() = (WGPURequestAdapterOptions.forceFallbackAdapterHandle.get(this.`$mem`, 0L) as
                Int).toUInt()
        set(`value`) {
            WGPURequestAdapterOptions.forceFallbackAdapterHandle.set(this.`$mem`, 0L, value.toInt())
        }

    public constructor(gc: Boolean) : this(kotlin.run {
        require(gc) { "Do not call this if gc is not want" }
        Arena.ofAuto().allocate(WGPURequestAdapterOptions.layout)
    })

    public companion object {
        public val layout: StructLayout = MemoryLayout.structLayout(
            `$RuntimeHelper`.POINTER.withName("nextInChain"),
            `$RuntimeHelper`.POINTER.withName("compatibleSurface"),
            ValueLayout.JAVA_INT.withName("powerPreference"),
            ValueLayout.JAVA_INT.withName("backendType"),
            ValueLayout.JAVA_INT.withName("forceFallbackAdapter"),
            java.lang.foreign.MemoryLayout.paddingLayout(4),
        ).withName("WGPURequestAdapterOptions")

        @JvmField
        public val nextInChainHandle: VarHandle =
            layout.varHandle(MemoryLayout.PathElement.groupElement("nextInChain"))

        @JvmField
        public val compatibleSurfaceHandle: VarHandle =
            layout.varHandle(MemoryLayout.PathElement.groupElement("compatibleSurface"))

        @JvmField
        public val powerPreferenceHandle: VarHandle =
            layout.varHandle(MemoryLayout.PathElement.groupElement("powerPreference"))

        @JvmField
        public val backendTypeHandle: VarHandle =
            layout.varHandle(MemoryLayout.PathElement.groupElement("backendType"))

        @JvmField
        public val forceFallbackAdapterHandle: VarHandle =
            layout.varHandle(MemoryLayout.PathElement.groupElement("forceFallbackAdapter"))

        @JvmStatic
        public fun allocate(alloc: SegmentAllocator): WGPURequestAdapterOptions =
            WGPURequestAdapterOptions(alloc.allocate(WGPURequestAdapterOptions.layout))
    }
}
