// this file is auto generated by endoqa kotlin ffi, modify it with caution
package webgpu.c

import java.lang.foreign.*
import java.lang.invoke.VarHandle

@JvmInline
public value class WGPUCompilationMessage(
    public val `$mem`: MemorySegment,
) {
    public var nextInChain: Pointer<WGPUChainedStruct>
        get() = nextInChainHandle.get(this.`$mem`, 0L) as MemorySegment
        set(`value`) {
            nextInChainHandle.set(this.`$mem`, 0L, value)
        }

    public var message: Pointer<Byte>
        get() = messageHandle.get(this.`$mem`, 0L) as MemorySegment
        set(`value`) {
            messageHandle.set(this.`$mem`, 0L, value)
        }

    public var type: WGPUCompilationMessageType
        get() = WGPUCompilationMessageType.fromInt(
            typeHandle.get(
                this.`$mem`,
                0L
            ) as Int
        )
        set(`value`) {
            typeHandle.set(this.`$mem`, 0L, value.value)
        }

    public var lineNum: uint64_t
        get() = (lineNumHandle.get(this.`$mem`, 0L) as Long).toULong()
        set(`value`) {
            lineNumHandle.set(this.`$mem`, 0L, value.toLong())
        }

    public var linePos: uint64_t
        get() = (linePosHandle.get(this.`$mem`, 0L) as Long).toULong()
        set(`value`) {
            linePosHandle.set(this.`$mem`, 0L, value.toLong())
        }

    public var offset: uint64_t
        get() = (offsetHandle.get(this.`$mem`, 0L) as Long).toULong()
        set(`value`) {
            offsetHandle.set(this.`$mem`, 0L, value.toLong())
        }

    public var length: uint64_t
        get() = (lengthHandle.get(this.`$mem`, 0L) as Long).toULong()
        set(`value`) {
            lengthHandle.set(this.`$mem`, 0L, value.toLong())
        }

    public var utf16LinePos: uint64_t
        get() = (utf16LinePosHandle.get(this.`$mem`, 0L) as Long).toULong()
        set(`value`) {
            utf16LinePosHandle.set(this.`$mem`, 0L, value.toLong())
        }

    public var utf16Offset: uint64_t
        get() = (utf16OffsetHandle.get(this.`$mem`, 0L) as Long).toULong()
        set(`value`) {
            utf16OffsetHandle.set(this.`$mem`, 0L, value.toLong())
        }

    public var utf16Length: uint64_t
        get() = (utf16LengthHandle.get(this.`$mem`, 0L) as Long).toULong()
        set(`value`) {
            utf16LengthHandle.set(this.`$mem`, 0L, value.toLong())
        }

    public constructor(gc: Boolean) : this(kotlin.run {
        require(gc) { "Do not call this if gc is not want" }
        Arena.ofAuto().allocate(layout)
    })

    public companion object {
        public val layout: StructLayout = MemoryLayout.structLayout(
            `$RuntimeHelper`.POINTER.withName("nextInChain"),
            `$RuntimeHelper`.POINTER.withName("message"),
            ValueLayout.JAVA_INT.withName("type"),
            MemoryLayout.paddingLayout(4),
            ValueLayout.JAVA_LONG.withName("lineNum"),
            ValueLayout.JAVA_LONG.withName("linePos"),
            ValueLayout.JAVA_LONG.withName("offset"),
            ValueLayout.JAVA_LONG.withName("length"),
            ValueLayout.JAVA_LONG.withName("utf16LinePos"),
            ValueLayout.JAVA_LONG.withName("utf16Offset"),
            ValueLayout.JAVA_LONG.withName("utf16Length"),
        ).withName("WGPUCompilationMessage")

        @JvmField
        public val nextInChainHandle: VarHandle =
            layout.varHandle(MemoryLayout.PathElement.groupElement("nextInChain"))

        @JvmField
        public val messageHandle: VarHandle =
            layout.varHandle(MemoryLayout.PathElement.groupElement("message"))

        @JvmField
        public val typeHandle: VarHandle =
            layout.varHandle(MemoryLayout.PathElement.groupElement("type"))

        @JvmField
        public val lineNumHandle: VarHandle =
            layout.varHandle(MemoryLayout.PathElement.groupElement("lineNum"))

        @JvmField
        public val linePosHandle: VarHandle =
            layout.varHandle(MemoryLayout.PathElement.groupElement("linePos"))

        @JvmField
        public val offsetHandle: VarHandle =
            layout.varHandle(MemoryLayout.PathElement.groupElement("offset"))

        @JvmField
        public val lengthHandle: VarHandle =
            layout.varHandle(MemoryLayout.PathElement.groupElement("length"))

        @JvmField
        public val utf16LinePosHandle: VarHandle =
            layout.varHandle(MemoryLayout.PathElement.groupElement("utf16LinePos"))

        @JvmField
        public val utf16OffsetHandle: VarHandle =
            layout.varHandle(MemoryLayout.PathElement.groupElement("utf16Offset"))

        @JvmField
        public val utf16LengthHandle: VarHandle =
            layout.varHandle(MemoryLayout.PathElement.groupElement("utf16Length"))

        @JvmStatic
        public fun allocate(alloc: SegmentAllocator): WGPUCompilationMessage =
            WGPUCompilationMessage(alloc.allocate(layout))
    }
}
