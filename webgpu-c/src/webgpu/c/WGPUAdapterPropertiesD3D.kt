// this file is auto generated by endoqa kotlin ffi, modify it with caution
package webgpu.c

import java.lang.foreign.*
import java.lang.invoke.MethodHandle
import java.lang.invoke.VarHandle

@JvmInline
public value class WGPUAdapterPropertiesD3D(
    public val `$mem`: MemorySegment,
) {
    public var chain: WGPUChainedStructOut
        get() = WGPUChainedStructOut(
            chainHandle.invokeExact(this.`$mem`, 0L)
                    as MemorySegment
        )
        set(`value`) {
            MemorySegment.copy(
                value.`$mem`, 0L, this.chain.`$mem`, 0L,
                WGPUChainedStructOut.layout.byteSize()
            )
        }

    public var shaderModel: uint32_t
        get() = (shaderModelHandle.get(this.`$mem`, 0L) as Int).toUInt()
        set(`value`) {
            shaderModelHandle.set(this.`$mem`, 0L, value.toInt())
        }

    public constructor(gc: Boolean) : this(kotlin.run {
        require(gc) { "Do not call this if gc is not want" }
        Arena.ofAuto().allocate(layout)
    })

    public companion object {
        public val layout: StructLayout = MemoryLayout.structLayout(
            WGPUChainedStructOut.layout.withName("chain"),
            ValueLayout.JAVA_INT.withName("shaderModel"),
            MemoryLayout.paddingLayout(4),
        ).withName("WGPUAdapterPropertiesD3D")

        @JvmField
        public val chainHandle: MethodHandle =
            layout.sliceHandle(MemoryLayout.PathElement.groupElement("chain"))

        @JvmField
        public val shaderModelHandle: VarHandle =
            layout.varHandle(MemoryLayout.PathElement.groupElement("shaderModel"))

        @JvmStatic
        public fun allocate(alloc: SegmentAllocator): WGPUAdapterPropertiesD3D =
            WGPUAdapterPropertiesD3D(alloc.allocate(layout))
    }
}
