// this file is auto generated by endoqa kotlin ffi, modify it with caution
package webgpu

import java.lang.foreign.*
import java.lang.invoke.MethodHandle
import java.lang.invoke.VarHandle

@JvmInline
public value class WGPUSharedTextureMemoryOpaqueFDDescriptor(
    public val `$mem`: MemorySegment,
) {
    public var chain: WGPUChainedStruct
        get() =
            WGPUChainedStruct(
                WGPUSharedTextureMemoryOpaqueFDDescriptor.chainHandle.invokeExact(
                    this.`$mem`,
                    0L
                ) as MemorySegment
            )
        set(`value`) {
            MemorySegment.copy(
                value.`$mem`, 0L, this.chain.`$mem`, 0L,
                WGPUChainedStruct.layout.byteSize()
            )
        }

    public var vkImageCreateInfo: Pointer<Unit>
        get() = WGPUSharedTextureMemoryOpaqueFDDescriptor.vkImageCreateInfoHandle.get(this.`$mem`, 0L)
                as MemorySegment
        set(`value`) {
            WGPUSharedTextureMemoryOpaqueFDDescriptor.vkImageCreateInfoHandle.set(this.`$mem`, 0L, value)
        }

    public var memoryFD: Int
        get() = WGPUSharedTextureMemoryOpaqueFDDescriptor.memoryFDHandle.get(this.`$mem`, 0L) as Int
        set(`value`) {
            WGPUSharedTextureMemoryOpaqueFDDescriptor.memoryFDHandle.set(this.`$mem`, 0L, value)
        }

    public var memoryTypeIndex: uint32_t
        get() = (WGPUSharedTextureMemoryOpaqueFDDescriptor.memoryTypeIndexHandle.get(this.`$mem`, 0L) as
                Int).toUInt()
        set(`value`) {
            WGPUSharedTextureMemoryOpaqueFDDescriptor.memoryTypeIndexHandle.set(
                this.`$mem`,
                0L, value.toInt()
            )
        }

    public var allocationSize: uint64_t
        get() = (WGPUSharedTextureMemoryOpaqueFDDescriptor.allocationSizeHandle.get(this.`$mem`, 0L) as
                Long).toULong()
        set(`value`) {
            WGPUSharedTextureMemoryOpaqueFDDescriptor.allocationSizeHandle.set(
                this.`$mem`,
                0L, value.toLong()
            )
        }

    public var dedicatedAllocation: WGPUBool
        get() = (WGPUSharedTextureMemoryOpaqueFDDescriptor.dedicatedAllocationHandle.get(
            this.`$mem`,
            0L
        ) as Int).toUInt()
        set(`value`) {
            WGPUSharedTextureMemoryOpaqueFDDescriptor.dedicatedAllocationHandle.set(
                this.`$mem`,
                0L, value.toInt()
            )
        }

    public constructor(gc: Boolean) : this(kotlin.run {
        require(gc) { "Do not call this if gc is not want" }
        Arena.ofAuto().allocate(WGPUSharedTextureMemoryOpaqueFDDescriptor.layout)
    })

    public companion object {
        public val layout: StructLayout = MemoryLayout.structLayout(
            WGPUChainedStruct.layout.withName("chain"),
            `$RuntimeHelper`.POINTER.withName("vkImageCreateInfo"),
            ValueLayout.JAVA_INT.withName("memoryFD"),
            ValueLayout.JAVA_INT.withName("memoryTypeIndex"),
            ValueLayout.JAVA_LONG.withName("allocationSize"),
            ValueLayout.JAVA_INT.withName("dedicatedAllocation"),
            java.lang.foreign.MemoryLayout.paddingLayout(4),
        ).withName("WGPUSharedTextureMemoryOpaqueFDDescriptor")

        @JvmField
        public val chainHandle: MethodHandle =
            layout.sliceHandle(MemoryLayout.PathElement.groupElement("chain"))

        @JvmField
        public val vkImageCreateInfoHandle: VarHandle =
            layout.varHandle(MemoryLayout.PathElement.groupElement("vkImageCreateInfo"))

        @JvmField
        public val memoryFDHandle: VarHandle =
            layout.varHandle(MemoryLayout.PathElement.groupElement("memoryFD"))

        @JvmField
        public val memoryTypeIndexHandle: VarHandle =
            layout.varHandle(MemoryLayout.PathElement.groupElement("memoryTypeIndex"))

        @JvmField
        public val allocationSizeHandle: VarHandle =
            layout.varHandle(MemoryLayout.PathElement.groupElement("allocationSize"))

        @JvmField
        public val dedicatedAllocationHandle: VarHandle =
            layout.varHandle(MemoryLayout.PathElement.groupElement("dedicatedAllocation"))

        @JvmStatic
        public fun allocate(alloc: SegmentAllocator): WGPUSharedTextureMemoryOpaqueFDDescriptor =
            WGPUSharedTextureMemoryOpaqueFDDescriptor(alloc.allocate(WGPUSharedTextureMemoryOpaqueFDDescriptor.layout))
    }
}
