{
    "copyright": "Copyright 2019-2023 WebGPU-Native developers\n\nSPDX-License-Identifier: BSD-3-Clause\n",
    "name": "webgpu",
    "enum_prefix": "0x0000",
    "constants": [
        {
            "name": "array_layer_count_undefined",
            "value": "uint32_max",
            "doc": "TODO\n"
        },
        {
            "name": "copy_stride_undefined",
            "value": "uint32_max",
            "doc": "TODO\n"
        },
        {
            "name": "depth_clear_value_undefined",
            "value": "nan",
            "doc": "Value to be assigned to member depthClearValue of @ref WGPURenderPassDepthStencilAttachment\nto mean that it is not defined.\n"
        },
        {
            "name": "depth_slice_undefined",
            "value": "uint32_max",
            "doc": "TODO\n"
        },
        {
            "name": "limit_u32_undefined",
            "value": "uint32_max",
            "doc": "TODO\n"
        },
        {
            "name": "limit_u64_undefined",
            "value": "uint64_max",
            "doc": "TODO\n"
        },
        {
            "name": "mip_level_count_undefined",
            "value": "uint32_max",
            "doc": "TODO\n"
        },
        {
            "name": "query_set_index_undefined",
            "value": "uint32_max",
            "doc": "TODO\n"
        },
        {
            "name": "whole_map_size",
            "value": "usize_max",
            "doc": "TODO\n"
        },
        {
            "name": "whole_size",
            "value": "uint64_max",
            "doc": "TODO\n"
        }
    ],
    "typedefs": [],
    "enums": [
        {
            "name": "adapter_type",
            "doc": "TODO\n",
            "entries": [
                null,
                {
                    "name": "discrete_GPU",
                    "doc": "TODO\n"
                },
                {
                    "name": "integrated_GPU",
                    "doc": "TODO\n"
                },
                {
                    "name": "CPU",
                    "doc": "TODO\n"
                },
                {
                    "name": "unknown",
                    "doc": "TODO\n"
                }
            ]
        },
        {
            "name": "address_mode",
            "doc": "TODO\n",
            "entries": [
                {
                    "name": "undefined",
                    "doc": "Indicates no value is passed for this argument. See @ref SentinelValues."
                },
                {
                    "name": "clamp_to_edge",
                    "doc": "TODO\n"
                },
                {
                    "name": "repeat",
                    "doc": "TODO\n"
                },
                {
                    "name": "mirror_repeat",
                    "doc": "TODO\n"
                }
            ]
        },
        {
            "name": "backend_type",
            "doc": "TODO\n",
            "entries": [
                {
                    "name": "undefined",
                    "doc": "Indicates no value is passed for this argument. See @ref SentinelValues."
                },
                {
                    "name": "null",
                    "doc": "TODO\n"
                },
                {
                    "name": "WebGPU",
                    "doc": "TODO\n"
                },
                {
                    "name": "D3D11",
                    "doc": "TODO\n"
                },
                {
                    "name": "D3D12",
                    "doc": "TODO\n"
                },
                {
                    "name": "metal",
                    "doc": "TODO\n"
                },
                {
                    "name": "vulkan",
                    "doc": "TODO\n"
                },
                {
                    "name": "openGL",
                    "doc": "TODO\n"
                },
                {
                    "name": "openGLES",
                    "doc": "TODO\n"
                }
            ]
        },
        {
            "name": "blend_factor",
            "doc": "TODO\n",
            "entries": [
                {
                    "name": "undefined",
                    "doc": "Indicates no value is passed for this argument. See @ref SentinelValues."
                },
                {
                    "name": "zero",
                    "doc": "TODO\n"
                },
                {
                    "name": "one",
                    "doc": "TODO\n"
                },
                {
                    "name": "src",
                    "doc": "TODO\n"
                },
                {
                    "name": "one_minus_src",
                    "doc": "TODO\n"
                },
                {
                    "name": "src_alpha",
                    "doc": "TODO\n"
                },
                {
                    "name": "one_minus_src_alpha",
                    "doc": "TODO\n"
                },
                {
                    "name": "dst",
                    "doc": "TODO\n"
                },
                {
                    "name": "one_minus_dst",
                    "doc": "TODO\n"
                },
                {
                    "name": "dst_alpha",
                    "doc": "TODO\n"
                },
                {
                    "name": "one_minus_dst_alpha",
                    "doc": "TODO\n"
                },
                {
                    "name": "src_alpha_saturated",
                    "doc": "TODO\n"
                },
                {
                    "name": "constant",
                    "doc": "TODO\n"
                },
                {
                    "name": "one_minus_constant",
                    "doc": "TODO\n"
                },
                {
                    "name": "src1",
                    "doc": "TODO\n"
                },
                {
                    "name": "one_minus_src1",
                    "doc": "TODO\n"
                },
                {
                    "name": "src1_alpha",
                    "doc": "TODO\n"
                },
                {
                    "name": "one_minus_src1_alpha",
                    "doc": "TODO\n"
                }
            ]
        },
        {
            "name": "blend_operation",
            "doc": "TODO\n",
            "entries": [
                {
                    "name": "undefined",
                    "doc": "Indicates no value is passed for this argument. See @ref SentinelValues."
                },
                {
                    "name": "add",
                    "doc": "TODO\n"
                },
                {
                    "name": "subtract",
                    "doc": "TODO\n"
                },
                {
                    "name": "reverse_subtract",
                    "doc": "TODO\n"
                },
                {
                    "name": "min",
                    "doc": "TODO\n"
                },
                {
                    "name": "max",
                    "doc": "TODO\n"
                }
            ]
        },
        {
            "name": "buffer_binding_type",
            "doc": "TODO\n",
            "entries": [
                {
                    "name": "binding_not_used",
                    "doc": "Indicates that this @ref WGPUBufferBindingLayout member of\nits parent @ref WGPUBindGroupLayoutEntry is not used.\n(See also @ref SentinelValues.)\n"
                },
                {
                    "name": "undefined",
                    "doc": "Indicates no value is passed for this argument. See @ref SentinelValues."
                },
                {
                    "name": "uniform",
                    "doc": "TODO\n"
                },
                {
                    "name": "storage",
                    "doc": "TODO\n"
                },
                {
                    "name": "read_only_storage",
                    "doc": "TODO\n"
                }
            ]
        },
        {
            "name": "buffer_map_state",
            "doc": "TODO\n",
            "entries": [
                null,
                {
                    "name": "unmapped",
                    "doc": "TODO\n"
                },
                {
                    "name": "pending",
                    "doc": "TODO\n"
                },
                {
                    "name": "mapped",
                    "doc": "TODO\n"
                }
            ]
        },
        {
            "name": "callback_mode",
            "doc": "The callback mode controls how a callback for an asynchronous operation may be fired. See @ref Asynchronous-Operations for how these are used.",
            "entries": [
                null,
                {
                    "name": "wait_any_only",
                    "doc": "Callbacks created with `WGPUCallbackMode_WaitAnyOnly`:\n- fire when the asynchronous operation's future is passed to a call to @ref wgpuInstanceWaitAny\n  AND the operation has already completed or it completes inside the call to @ref wgpuInstanceWaitAny.\n"
                },
                {
                    "name": "allow_process_events",
                    "doc": "Callbacks created with `WGPUCallbackMode_AllowProcessEvents`:\n- fire for the same reasons as callbacks created with `WGPUCallbackMode_WaitAnyOnly`\n- fire inside a call to @ref wgpuInstanceProcessEvents if the asynchronous operation is complete.\n"
                },
                {
                    "name": "allow_spontaneous",
                    "doc": "Callbacks created with `WGPUCallbackMode_AllowSpontaneous`:\n- fire for the same reasons as callbacks created with `WGPUCallbackMode_AllowProcessEvents`\n- **may** fire spontaneously on an arbitrary or application thread, when the WebGPU implementations discovers that the asynchronous operation is complete.\n\n  Implementations _should_ fire spontaneous callbacks as soon as possible.\n\n@note Because spontaneous callbacks may fire at an arbitrary time on an arbitrary thread, applications should take extra care when acquiring locks or mutating state inside the callback. It undefined behavior to re-entrantly call into the webgpu.h API if the callback fires while inside the callstack of another webgpu.h function that is not `wgpuInstanceWaitAny` or `wgpuInstanceProcessEvents`.\n"
                }
            ]
        },
        {
            "name": "compare_function",
            "doc": "TODO\n",
            "entries": [
                {
                    "name": "undefined",
                    "doc": "Indicates no value is passed for this argument. See @ref SentinelValues."
                },
                {
                    "name": "never",
                    "doc": "TODO\n"
                },
                {
                    "name": "less",
                    "doc": "TODO\n"
                },
                {
                    "name": "equal",
                    "doc": "TODO\n"
                },
                {
                    "name": "less_equal",
                    "doc": "TODO\n"
                },
                {
                    "name": "greater",
                    "doc": "TODO\n"
                },
                {
                    "name": "not_equal",
                    "doc": "TODO\n"
                },
                {
                    "name": "greater_equal",
                    "doc": "TODO\n"
                },
                {
                    "name": "always",
                    "doc": "TODO\n"
                }
            ]
        },
        {
            "name": "compilation_info_request_status",
            "doc": "TODO\n",
            "entries": [
                null,
                {
                    "name": "success",
                    "doc": "TODO\n"
                },
                {
                    "name": "instance_dropped",
                    "doc": "TODO\n"
                },
                {
                    "name": "error",
                    "doc": "TODO\n"
                }
            ]
        },
        {
            "name": "compilation_message_type",
            "doc": "TODO\n",
            "entries": [
                null,
                {
                    "name": "error",
                    "doc": "TODO\n"
                },
                {
                    "name": "warning",
                    "doc": "TODO\n"
                },
                {
                    "name": "info",
                    "doc": "TODO\n"
                }
            ]
        },
        {
            "name": "composite_alpha_mode",
            "doc": "Describes how frames are composited with other contents on the screen when @ref wgpuSurfacePresent is called.",
            "entries": [
                {
                    "name": "auto",
                    "doc": "Lets the WebGPU implementation choose the best mode (supported, and with the best performance) between @ref WGPUCompositeAlphaMode_Opaque or @ref WGPUCompositeAlphaMode_Inherit."
                },
                {
                    "name": "opaque",
                    "doc": "The alpha component of the image is ignored and teated as if it is always 1.0."
                },
                {
                    "name": "premultiplied",
                    "doc": "The alpha component is respected and non-alpha components are assumed to be already multiplied with the alpha component. For example, (0.5, 0, 0, 0.5) is semi-transparent bright red."
                },
                {
                    "name": "unpremultiplied",
                    "doc": "The alpha component is respected and non-alpha components are assumed to NOT be already multiplied with the alpha component. For example, (1.0, 0, 0, 0.5) is semi-transparent bright red."
                },
                {
                    "name": "inherit",
                    "doc": "The handling of the alpha component is unknown to WebGPU and should be handled by the application using system-specific APIs. This mode may be unavailable (for example on Wasm)."
                }
            ]
        },
        {
            "name": "create_pipeline_async_status",
            "doc": "TODO\n",
            "entries": [
                null,
                {
                    "name": "success",
                    "doc": "TODO\n"
                },
                {
                    "name": "instance_dropped",
                    "doc": "TODO\n"
                },
                {
                    "name": "validation_error",
                    "doc": "TODO\n"
                },
                {
                    "name": "internal_error",
                    "doc": "TODO\n"
                }
            ]
        },
        {
            "name": "cull_mode",
            "doc": "TODO\n",
            "entries": [
                {
                    "name": "undefined",
                    "doc": "Indicates no value is passed for this argument. See @ref SentinelValues."
                },
                {
                    "name": "none",
                    "doc": "TODO\n"
                },
                {
                    "name": "front",
                    "doc": "TODO\n"
                },
                {
                    "name": "back",
                    "doc": "TODO\n"
                }
            ]
        },
        {
            "name": "device_lost_reason",
            "doc": "TODO\n",
            "entries": [
                null,
                {
                    "name": "unknown",
                    "doc": "TODO\n"
                },
                {
                    "name": "destroyed",
                    "doc": "TODO\n"
                },
                {
                    "name": "instance_dropped",
                    "doc": "TODO\n"
                },
                {
                    "name": "failed_creation",
                    "doc": "TODO\n"
                }
            ]
        },
        {
            "name": "error_filter",
            "doc": "TODO\n",
            "entries": [
                null,
                {
                    "name": "validation",
                    "doc": "TODO\n"
                },
                {
                    "name": "out_of_memory",
                    "doc": "TODO\n"
                },
                {
                    "name": "internal",
                    "doc": "TODO\n"
                }
            ]
        },
        {
            "name": "error_type",
            "doc": "TODO\n",
            "entries": [
                null,
                {
                    "name": "no_error",
                    "doc": "TODO\n"
                },
                {
                    "name": "validation",
                    "doc": "TODO\n"
                },
                {
                    "name": "out_of_memory",
                    "doc": "TODO\n"
                },
                {
                    "name": "internal",
                    "doc": "TODO\n"
                },
                {
                    "name": "unknown",
                    "doc": "TODO\n"
                }
            ]
        },
        {
            "name": "feature_level",
            "doc": "See @ref WGPURequestAdapterOptions::featureLevel.\n",
            "entries": [
                {
                    "name": "undefined",
                    "doc": "Indicates no value is passed for this argument. See @ref SentinelValues."
                },
                {
                    "name": "compatibility",
                    "doc": "\"Compatibility\" profile which can be supported on OpenGL ES 3.1 and D3D11.\n"
                },
                {
                    "name": "core",
                    "doc": "\"Core\" profile which can be supported on Vulkan/Metal/D3D12 (at least).\n"
                }
            ]
        },
        {
            "name": "feature_name",
            "doc": "TODO\n",
            "entries": [
                {
                    "name": "undefined",
                    "doc": "TODO\n"
                },
                {
                    "name": "depth_clip_control",
                    "doc": "TODO\n"
                },
                {
                    "name": "depth32_float_stencil8",
                    "doc": "TODO\n"
                },
                {
                    "name": "timestamp_query",
                    "doc": "TODO\n"
                },
                {
                    "name": "texture_compression_BC",
                    "doc": "TODO\n"
                },
                {
                    "name": "texture_compression_BC_sliced_3D",
                    "doc": "TODO\n"
                },
                {
                    "name": "texture_compression_ETC2",
                    "doc": "TODO\n"
                },
                {
                    "name": "texture_compression_ASTC",
                    "doc": "TODO\n"
                },
                {
                    "name": "texture_compression_ASTC_sliced_3D",
                    "doc": "TODO\n"
                },
                {
                    "name": "indirect_first_instance",
                    "doc": "TODO\n"
                },
                {
                    "name": "shader_f16",
                    "doc": "TODO\n"
                },
                {
                    "name": "RG11B10_ufloat_renderable",
                    "doc": "TODO\n"
                },
                {
                    "name": "BGRA8_unorm_storage",
                    "doc": "TODO\n"
                },
                {
                    "name": "float32_filterable",
                    "doc": "TODO\n"
                },
                {
                    "name": "float32_blendable",
                    "doc": "TODO\n"
                },
                {
                    "name": "clip_distances",
                    "doc": "TODO\n"
                },
                {
                    "name": "dual_source_blending",
                    "doc": "TODO\n"
                }
            ]
        },
        {
            "name": "filter_mode",
            "doc": "TODO\n",
            "entries": [
                {
                    "name": "undefined",
                    "doc": "Indicates no value is passed for this argument. See @ref SentinelValues."
                },
                {
                    "name": "nearest",
                    "doc": "TODO\n"
                },
                {
                    "name": "linear",
                    "doc": "TODO\n"
                }
            ]
        },
        {
            "name": "front_face",
            "doc": "TODO\n",
            "entries": [
                {
                    "name": "undefined",
                    "doc": "Indicates no value is passed for this argument. See @ref SentinelValues."
                },
                {
                    "name": "CCW",
                    "doc": "TODO\n"
                },
                {
                    "name": "CW",
                    "doc": "TODO\n"
                }
            ]
        },
        {
            "name": "index_format",
            "doc": "TODO\n",
            "entries": [
                {
                    "name": "undefined",
                    "doc": "Indicates no value is passed for this argument. See @ref SentinelValues."
                },
                {
                    "name": "uint16",
                    "doc": "TODO\n"
                },
                {
                    "name": "uint32",
                    "doc": "TODO\n"
                }
            ]
        },
        {
            "name": "load_op",
            "doc": "TODO\n",
            "entries": [
                {
                    "name": "undefined",
                    "doc": "Indicates no value is passed for this argument. See @ref SentinelValues."
                },
                {
                    "name": "load",
                    "doc": "TODO\n"
                },
                {
                    "name": "clear",
                    "doc": "TODO\n"
                }
            ]
        },
        {
            "name": "map_async_status",
            "doc": "TODO\n",
            "entries": [
                null,
                {
                    "name": "success",
                    "doc": "TODO\n"
                },
                {
                    "name": "instance_dropped",
                    "doc": "TODO\n"
                },
                {
                    "name": "error",
                    "doc": "TODO\n"
                },
                {
                    "name": "aborted",
                    "doc": "TODO\n"
                }
            ]
        },
        {
            "name": "mipmap_filter_mode",
            "doc": "TODO\n",
            "entries": [
                {
                    "name": "undefined",
                    "doc": "Indicates no value is passed for this argument. See @ref SentinelValues."
                },
                {
                    "name": "nearest",
                    "doc": "TODO\n"
                },
                {
                    "name": "linear",
                    "doc": "TODO\n"
                }
            ]
        },
        {
            "name": "optional_bool",
            "doc": "TODO\n",
            "entries": [
                {
                    "name": "false",
                    "doc": "TODO\n"
                },
                {
                    "name": "true",
                    "doc": "TODO\n"
                },
                {
                    "name": "undefined",
                    "doc": "TODO\n"
                }
            ]
        },
        {
            "name": "pop_error_scope_status",
            "doc": "TODO\n",
            "entries": [
                null,
                {
                    "name": "success",
                    "doc": "The error scope stack was successfully popped and a result was reported.\n"
                },
                {
                    "name": "instance_dropped",
                    "doc": "TODO\n"
                },
                {
                    "name": "error",
                    "doc": "The error scope stack could not be popped, because it was empty.\n"
                }
            ]
        },
        {
            "name": "power_preference",
            "doc": "TODO\n",
            "entries": [
                {
                    "name": "undefined",
                    "doc": "No preference. (See also @ref SentinelValues.)"
                },
                {
                    "name": "low_power",
                    "doc": "TODO\n"
                },
                {
                    "name": "high_performance",
                    "doc": "TODO\n"
                }
            ]
        },
        {
            "name": "present_mode",
            "doc": "Describes when and in which order frames are presented on the screen when @ref wgpuSurfacePresent is called.",
            "entries": [
                {
                    "name": "undefined",
                    "doc": "Present mode is not specified. Use the default.\n"
                },
                {
                    "name": "fifo",
                    "doc": "The presentation of the image to the user waits for the next vertical blanking period to update in a first-in, first-out manner.\nTearing cannot be observed and frame-loop will be limited to the display's refresh rate.\nThis is the only mode that's always available.\n"
                },
                {
                    "name": "fifo_relaxed",
                    "doc": "The presentation of the image to the user tries to wait for the next vertical blanking period but may decide to not wait if a frame is presented late.\nTearing can sometimes be observed but late-frame don't produce a full-frame stutter in the presentation.\nThis is still a first-in, first-out mechanism so a frame-loop will be limited to the display's refresh rate.\n"
                },
                {
                    "name": "immediate",
                    "doc": "The presentation of the image to the user is updated immediately without waiting for a vertical blank.\nTearing can be observed but latency is minimized.\n"
                },
                {
                    "name": "mailbox",
                    "doc": "The presentation of the image to the user waits for the next vertical blanking period to update to the latest provided image.\nTearing cannot be observed and a frame-loop is not limited to the display's refresh rate.\n"
                }
            ]
        },
        {
            "name": "primitive_topology",
            "doc": "TODO\n",
            "entries": [
                {
                    "name": "undefined",
                    "doc": "Indicates no value is passed for this argument. See @ref SentinelValues."
                },
                {
                    "name": "point_list",
                    "doc": "TODO\n"
                },
                {
                    "name": "line_list",
                    "doc": "TODO\n"
                },
                {
                    "name": "line_strip",
                    "doc": "TODO\n"
                },
                {
                    "name": "triangle_list",
                    "doc": "TODO\n"
                },
                {
                    "name": "triangle_strip",
                    "doc": "TODO\n"
                }
            ]
        },
        {
            "name": "query_type",
            "doc": "TODO\n",
            "entries": [
                null,
                {
                    "name": "occlusion",
                    "doc": "TODO\n"
                },
                {
                    "name": "timestamp",
                    "doc": "TODO\n"
                }
            ]
        },
        {
            "name": "queue_work_done_status",
            "doc": "TODO\n",
            "entries": [
                null,
                {
                    "name": "success",
                    "doc": "TODO\n"
                },
                {
                    "name": "instance_dropped",
                    "doc": "TODO\n"
                },
                {
                    "name": "error",
                    "doc": "TODO\n"
                }
            ]
        },
        {
            "name": "request_adapter_status",
            "doc": "TODO\n",
            "entries": [
                null,
                {
                    "name": "success",
                    "doc": "TODO\n"
                },
                {
                    "name": "instance_dropped",
                    "doc": "TODO\n"
                },
                {
                    "name": "unavailable",
                    "doc": "TODO\n"
                },
                {
                    "name": "error",
                    "doc": "TODO\n"
                }
            ]
        },
        {
            "name": "request_device_status",
            "doc": "TODO\n",
            "entries": [
                null,
                {
                    "name": "success",
                    "doc": "TODO\n"
                },
                {
                    "name": "instance_dropped",
                    "doc": "TODO\n"
                },
                {
                    "name": "error",
                    "doc": "TODO\n"
                }
            ]
        },
        {
            "name": "s_type",
            "doc": "TODO\n",
            "entries": [
                null,
                {
                    "name": "shader_source_SPIRV",
                    "doc": "TODO\n"
                },
                {
                    "name": "shader_source_WGSL",
                    "doc": "TODO\n"
                },
                {
                    "name": "render_pass_max_draw_count",
                    "doc": "TODO\n"
                },
                {
                    "name": "surface_source_metal_layer",
                    "doc": "TODO\n"
                },
                {
                    "name": "surface_source_windows_HWND",
                    "doc": "TODO\n"
                },
                {
                    "name": "surface_source_xlib_window",
                    "doc": "TODO\n"
                },
                {
                    "name": "surface_source_wayland_surface",
                    "doc": "TODO\n"
                },
                {
                    "name": "surface_source_android_native_window",
                    "doc": "TODO\n"
                },
                {
                    "name": "surface_source_XCB_window",
                    "doc": "TODO\n"
                }
            ]
        },
        {
            "name": "sampler_binding_type",
            "doc": "TODO\n",
            "entries": [
                {
                    "name": "binding_not_used",
                    "doc": "Indicates that this @ref WGPUSamplerBindingLayout member of\nits parent @ref WGPUBindGroupLayoutEntry is not used.\n(See also @ref SentinelValues.)\n"
                },
                {
                    "name": "undefined",
                    "doc": "Indicates no value is passed for this argument. See @ref SentinelValues."
                },
                {
                    "name": "filtering",
                    "doc": "TODO\n"
                },
                {
                    "name": "non_filtering",
                    "doc": "TODO\n"
                },
                {
                    "name": "comparison",
                    "doc": "TODO\n"
                }
            ]
        },
        {
            "name": "status",
            "doc": "Status code returned (synchronously) from many operations. Generally\nindicates an invalid input like an unknown enum value or @ref OutStructChainError.\nRead the function's documentation for specific error conditions.\n",
            "entries": [
                null,
                {
                    "name": "success",
                    "doc": ""
                },
                {
                    "name": "error",
                    "doc": ""
                }
            ]
        },
        {
            "name": "stencil_operation",
            "doc": "TODO\n",
            "entries": [
                {
                    "name": "undefined",
                    "doc": "Indicates no value is passed for this argument. See @ref SentinelValues."
                },
                {
                    "name": "keep",
                    "doc": "TODO\n"
                },
                {
                    "name": "zero",
                    "doc": "TODO\n"
                },
                {
                    "name": "replace",
                    "doc": "TODO\n"
                },
                {
                    "name": "invert",
                    "doc": "TODO\n"
                },
                {
                    "name": "increment_clamp",
                    "doc": "TODO\n"
                },
                {
                    "name": "decrement_clamp",
                    "doc": "TODO\n"
                },
                {
                    "name": "increment_wrap",
                    "doc": "TODO\n"
                },
                {
                    "name": "decrement_wrap",
                    "doc": "TODO\n"
                }
            ]
        },
        {
            "name": "storage_texture_access",
            "doc": "TODO\n",
            "entries": [
                {
                    "name": "binding_not_used",
                    "doc": "Indicates that this @ref WGPUStorageTextureBindingLayout member of\nits parent @ref WGPUBindGroupLayoutEntry is not used.\n(See also @ref SentinelValues.)\n"
                },
                {
                    "name": "undefined",
                    "doc": "Indicates no value is passed for this argument. See @ref SentinelValues."
                },
                {
                    "name": "write_only",
                    "doc": "TODO\n"
                },
                {
                    "name": "read_only",
                    "doc": "TODO\n"
                },
                {
                    "name": "read_write",
                    "doc": "TODO\n"
                }
            ]
        },
        {
            "name": "store_op",
            "doc": "TODO\n",
            "entries": [
                {
                    "name": "undefined",
                    "doc": "Indicates no value is passed for this argument. See @ref SentinelValues."
                },
                {
                    "name": "store",
                    "doc": "TODO\n"
                },
                {
                    "name": "discard",
                    "doc": "TODO\n"
                }
            ]
        },
        {
            "name": "surface_get_current_texture_status",
            "doc": "The status enum for @ref wgpuSurfaceGetCurrentTexture.",
            "entries": [
                null,
                {
                    "name": "success_optimal",
                    "doc": "Yay! Everything is good and we can render this frame."
                },
                {
                    "name": "success_suboptimal",
                    "doc": "Still OK - the surface can present the frame, but in a suboptimal way. The surface may need reconfiguration."
                },
                {
                    "name": "timeout",
                    "doc": "Some operation timed out while trying to acquire the frame."
                },
                {
                    "name": "outdated",
                    "doc": "The surface is too different to be used, compared to when it was originally created."
                },
                {
                    "name": "lost",
                    "doc": "The connection to whatever owns the surface was lost."
                },
                {
                    "name": "out_of_memory",
                    "doc": "The system ran out of memory."
                },
                {
                    "name": "error",
                    "doc": "The surface is not configured, or there was an @ref OutStructChainError."
                }
            ]
        },
        {
            "name": "texture_aspect",
            "doc": "TODO\n",
            "entries": [
                {
                    "name": "undefined",
                    "doc": "Indicates no value is passed for this argument. See @ref SentinelValues."
                },
                {
                    "name": "all",
                    "doc": "TODO\n"
                },
                {
                    "name": "stencil_only",
                    "doc": "TODO\n"
                },
                {
                    "name": "depth_only",
                    "doc": "TODO\n"
                }
            ]
        },
        {
            "name": "texture_dimension",
            "doc": "TODO\n",
            "entries": [
                {
                    "name": "undefined",
                    "doc": "Indicates no value is passed for this argument. See @ref SentinelValues."
                },
                {
                    "name": "1D",
                    "doc": "TODO\n"
                },
                {
                    "name": "2D",
                    "doc": "TODO\n"
                },
                {
                    "name": "3D",
                    "doc": "TODO\n"
                }
            ]
        },
        {
            "name": "texture_format",
            "doc": "TODO\n",
            "entries": [
                {
                    "name": "undefined",
                    "doc": "Indicates no value is passed for this argument. See @ref SentinelValues."
                },
                {
                    "name": "R8_unorm",
                    "doc": "TODO\n"
                },
                {
                    "name": "R8_snorm",
                    "doc": "TODO\n"
                },
                {
                    "name": "R8_uint",
                    "doc": "TODO\n"
                },
                {
                    "name": "R8_sint",
                    "doc": "TODO\n"
                },
                {
                    "name": "R16_uint",
                    "doc": "TODO\n"
                },
                {
                    "name": "R16_sint",
                    "doc": "TODO\n"
                },
                {
                    "name": "R16_float",
                    "doc": "TODO\n"
                },
                {
                    "name": "RG8_unorm",
                    "doc": "TODO\n"
                },
                {
                    "name": "RG8_snorm",
                    "doc": "TODO\n"
                },
                {
                    "name": "RG8_uint",
                    "doc": "TODO\n"
                },
                {
                    "name": "RG8_sint",
                    "doc": "TODO\n"
                },
                {
                    "name": "R32_float",
                    "doc": "TODO\n"
                },
                {
                    "name": "R32_uint",
                    "doc": "TODO\n"
                },
                {
                    "name": "R32_sint",
                    "doc": "TODO\n"
                },
                {
                    "name": "RG16_uint",
                    "doc": "TODO\n"
                },
                {
                    "name": "RG16_sint",
                    "doc": "TODO\n"
                },
                {
                    "name": "RG16_float",
                    "doc": "TODO\n"
                },
                {
                    "name": "RGBA8_unorm",
                    "doc": "TODO\n"
                },
                {
                    "name": "RGBA8_unorm_srgb",
                    "doc": "TODO\n"
                },
                {
                    "name": "RGBA8_snorm",
                    "doc": "TODO\n"
                },
                {
                    "name": "RGBA8_uint",
                    "doc": "TODO\n"
                },
                {
                    "name": "RGBA8_sint",
                    "doc": "TODO\n"
                },
                {
                    "name": "BGRA8_unorm",
                    "doc": "TODO\n"
                },
                {
                    "name": "BGRA8_unorm_srgb",
                    "doc": "TODO\n"
                },
                {
                    "name": "RGB10_A2_uint",
                    "doc": "TODO\n"
                },
                {
                    "name": "RGB10_A2_unorm",
                    "doc": "TODO\n"
                },
                {
                    "name": "RG11_B10_ufloat",
                    "doc": "TODO\n"
                },
                {
                    "name": "RGB9_E5_ufloat",
                    "doc": "TODO\n"
                },
                {
                    "name": "RG32_float",
                    "doc": "TODO\n"
                },
                {
                    "name": "RG32_uint",
                    "doc": "TODO\n"
                },
                {
                    "name": "RG32_sint",
                    "doc": "TODO\n"
                },
                {
                    "name": "RGBA16_uint",
                    "doc": "TODO\n"
                },
                {
                    "name": "RGBA16_sint",
                    "doc": "TODO\n"
                },
                {
                    "name": "RGBA16_float",
                    "doc": "TODO\n"
                },
                {
                    "name": "RGBA32_float",
                    "doc": "TODO\n"
                },
                {
                    "name": "RGBA32_uint",
                    "doc": "TODO\n"
                },
                {
                    "name": "RGBA32_sint",
                    "doc": "TODO\n"
                },
                {
                    "name": "stencil8",
                    "doc": "TODO\n"
                },
                {
                    "name": "depth16_unorm",
                    "doc": "TODO\n"
                },
                {
                    "name": "depth24_plus",
                    "doc": "TODO\n"
                },
                {
                    "name": "depth24_plus_stencil8",
                    "doc": "TODO\n"
                },
                {
                    "name": "depth32_float",
                    "doc": "TODO\n"
                },
                {
                    "name": "depth32_float_stencil8",
                    "doc": "TODO\n"
                },
                {
                    "name": "BC1_RGBA_unorm",
                    "doc": "TODO\n"
                },
                {
                    "name": "BC1_RGBA_unorm_srgb",
                    "doc": "TODO\n"
                },
                {
                    "name": "BC2_RGBA_unorm",
                    "doc": "TODO\n"
                },
                {
                    "name": "BC2_RGBA_unorm_srgb",
                    "doc": "TODO\n"
                },
                {
                    "name": "BC3_RGBA_unorm",
                    "doc": "TODO\n"
                },
                {
                    "name": "BC3_RGBA_unorm_srgb",
                    "doc": "TODO\n"
                },
                {
                    "name": "BC4_R_unorm",
                    "doc": "TODO\n"
                },
                {
                    "name": "BC4_R_snorm",
                    "doc": "TODO\n"
                },
                {
                    "name": "BC5_RG_unorm",
                    "doc": "TODO\n"
                },
                {
                    "name": "BC5_RG_snorm",
                    "doc": "TODO\n"
                },
                {
                    "name": "BC6H_RGB_ufloat",
                    "doc": "TODO\n"
                },
                {
                    "name": "BC6H_RGB_float",
                    "doc": "TODO\n"
                },
                {
                    "name": "BC7_RGBA_unorm",
                    "doc": "TODO\n"
                },
                {
                    "name": "BC7_RGBA_unorm_srgb",
                    "doc": "TODO\n"
                },
                {
                    "name": "ETC2_RGB8_unorm",
                    "doc": "TODO\n"
                },
                {
                    "name": "ETC2_RGB8_unorm_srgb",
                    "doc": "TODO\n"
                },
                {
                    "name": "ETC2_RGB8A1_unorm",
                    "doc": "TODO\n"
                },
                {
                    "name": "ETC2_RGB8A1_unorm_srgb",
                    "doc": "TODO\n"
                },
                {
                    "name": "ETC2_RGBA8_unorm",
                    "doc": "TODO\n"
                },
                {
                    "name": "ETC2_RGBA8_unorm_srgb",
                    "doc": "TODO\n"
                },
                {
                    "name": "EAC_R11_unorm",
                    "doc": "TODO\n"
                },
                {
                    "name": "EAC_R11_snorm",
                    "doc": "TODO\n"
                },
                {
                    "name": "EAC_RG11_unorm",
                    "doc": "TODO\n"
                },
                {
                    "name": "EAC_RG11_snorm",
                    "doc": "TODO\n"
                },
                {
                    "name": "ASTC_4x4_unorm",
                    "doc": "TODO\n"
                },
                {
                    "name": "ASTC_4x4_unorm_srgb",
                    "doc": "TODO\n"
                },
                {
                    "name": "ASTC_5x4_unorm",
                    "doc": "TODO\n"
                },
                {
                    "name": "ASTC_5x4_unorm_srgb",
                    "doc": "TODO\n"
                },
                {
                    "name": "ASTC_5x5_unorm",
                    "doc": "TODO\n"
                },
                {
                    "name": "ASTC_5x5_unorm_srgb",
                    "doc": "TODO\n"
                },
                {
                    "name": "ASTC_6x5_unorm",
                    "doc": "TODO\n"
                },
                {
                    "name": "ASTC_6x5_unorm_srgb",
                    "doc": "TODO\n"
                },
                {
                    "name": "ASTC_6x6_unorm",
                    "doc": "TODO\n"
                },
                {
                    "name": "ASTC_6x6_unorm_srgb",
                    "doc": "TODO\n"
                },
                {
                    "name": "ASTC_8x5_unorm",
                    "doc": "TODO\n"
                },
                {
                    "name": "ASTC_8x5_unorm_srgb",
                    "doc": "TODO\n"
                },
                {
                    "name": "ASTC_8x6_unorm",
                    "doc": "TODO\n"
                },
                {
                    "name": "ASTC_8x6_unorm_srgb",
                    "doc": "TODO\n"
                },
                {
                    "name": "ASTC_8x8_unorm",
                    "doc": "TODO\n"
                },
                {
                    "name": "ASTC_8x8_unorm_srgb",
                    "doc": "TODO\n"
                },
                {
                    "name": "ASTC_10x5_unorm",
                    "doc": "TODO\n"
                },
                {
                    "name": "ASTC_10x5_unorm_srgb",
                    "doc": "TODO\n"
                },
                {
                    "name": "ASTC_10x6_unorm",
                    "doc": "TODO\n"
                },
                {
                    "name": "ASTC_10x6_unorm_srgb",
                    "doc": "TODO\n"
                },
                {
                    "name": "ASTC_10x8_unorm",
                    "doc": "TODO\n"
                },
                {
                    "name": "ASTC_10x8_unorm_srgb",
                    "doc": "TODO\n"
                },
                {
                    "name": "ASTC_10x10_unorm",
                    "doc": "TODO\n"
                },
                {
                    "name": "ASTC_10x10_unorm_srgb",
                    "doc": "TODO\n"
                },
                {
                    "name": "ASTC_12x10_unorm",
                    "doc": "TODO\n"
                },
                {
                    "name": "ASTC_12x10_unorm_srgb",
                    "doc": "TODO\n"
                },
                {
                    "name": "ASTC_12x12_unorm",
                    "doc": "TODO\n"
                },
                {
                    "name": "ASTC_12x12_unorm_srgb",
                    "doc": "TODO\n"
                }
            ]
        },
        {
            "name": "texture_sample_type",
            "doc": "TODO\n",
            "entries": [
                {
                    "name": "binding_not_used",
                    "doc": "Indicates that this @ref WGPUTextureBindingLayout member of\nits parent @ref WGPUBindGroupLayoutEntry is not used.\n(See also @ref SentinelValues.)\n"
                },
                {
                    "name": "undefined",
                    "doc": "Indicates no value is passed for this argument. See @ref SentinelValues."
                },
                {
                    "name": "float",
                    "doc": "TODO\n"
                },
                {
                    "name": "unfilterable_float",
                    "doc": "TODO\n"
                },
                {
                    "name": "depth",
                    "doc": "TODO\n"
                },
                {
                    "name": "sint",
                    "doc": "TODO\n"
                },
                {
                    "name": "uint",
                    "doc": "TODO\n"
                }
            ]
        },
        {
            "name": "texture_view_dimension",
            "doc": "TODO\n",
            "entries": [
                {
                    "name": "undefined",
                    "doc": "Indicates no value is passed for this argument. See @ref SentinelValues."
                },
                {
                    "name": "1D",
                    "doc": "TODO\n"
                },
                {
                    "name": "2D",
                    "doc": "TODO\n"
                },
                {
                    "name": "2D_array",
                    "doc": "TODO\n"
                },
                {
                    "name": "cube",
                    "doc": "TODO\n"
                },
                {
                    "name": "cube_array",
                    "doc": "TODO\n"
                },
                {
                    "name": "3D",
                    "doc": "TODO\n"
                }
            ]
        },
        {
            "name": "vertex_format",
            "doc": "TODO\n",
            "entries": [
                null,
                {
                    "name": "uint8",
                    "doc": "TODO\n"
                },
                {
                    "name": "uint8x2",
                    "doc": "TODO\n"
                },
                {
                    "name": "uint8x4",
                    "doc": "TODO\n"
                },
                {
                    "name": "sint8",
                    "doc": "TODO\n"
                },
                {
                    "name": "sint8x2",
                    "doc": "TODO\n"
                },
                {
                    "name": "sint8x4",
                    "doc": "TODO\n"
                },
                {
                    "name": "unorm8",
                    "doc": "TODO\n"
                },
                {
                    "name": "unorm8x2",
                    "doc": "TODO\n"
                },
                {
                    "name": "unorm8x4",
                    "doc": "TODO\n"
                },
                {
                    "name": "snorm8",
                    "doc": "TODO\n"
                },
                {
                    "name": "snorm8x2",
                    "doc": "TODO\n"
                },
                {
                    "name": "snorm8x4",
                    "doc": "TODO\n"
                },
                {
                    "name": "uint16",
                    "doc": "TODO\n"
                },
                {
                    "name": "uint16x2",
                    "doc": "TODO\n"
                },
                {
                    "name": "uint16x4",
                    "doc": "TODO\n"
                },
                {
                    "name": "sint16",
                    "doc": "TODO\n"
                },
                {
                    "name": "sint16x2",
                    "doc": "TODO\n"
                },
                {
                    "name": "sint16x4",
                    "doc": "TODO\n"
                },
                {
                    "name": "unorm16",
                    "doc": "TODO\n"
                },
                {
                    "name": "unorm16x2",
                    "doc": "TODO\n"
                },
                {
                    "name": "unorm16x4",
                    "doc": "TODO\n"
                },
                {
                    "name": "snorm16",
                    "doc": "TODO\n"
                },
                {
                    "name": "snorm16x2",
                    "doc": "TODO\n"
                },
                {
                    "name": "snorm16x4",
                    "doc": "TODO\n"
                },
                {
                    "name": "float16",
                    "doc": "TODO\n"
                },
                {
                    "name": "float16x2",
                    "doc": "TODO\n"
                },
                {
                    "name": "float16x4",
                    "doc": "TODO\n"
                },
                {
                    "name": "float32",
                    "doc": "TODO\n"
                },
                {
                    "name": "float32x2",
                    "doc": "TODO\n"
                },
                {
                    "name": "float32x3",
                    "doc": "TODO\n"
                },
                {
                    "name": "float32x4",
                    "doc": "TODO\n"
                },
                {
                    "name": "uint32",
                    "doc": "TODO\n"
                },
                {
                    "name": "uint32x2",
                    "doc": "TODO\n"
                },
                {
                    "name": "uint32x3",
                    "doc": "TODO\n"
                },
                {
                    "name": "uint32x4",
                    "doc": "TODO\n"
                },
                {
                    "name": "sint32",
                    "doc": "TODO\n"
                },
                {
                    "name": "sint32x2",
                    "doc": "TODO\n"
                },
                {
                    "name": "sint32x3",
                    "doc": "TODO\n"
                },
                {
                    "name": "sint32x4",
                    "doc": "TODO\n"
                },
                {
                    "name": "unorm10__10__10__2",
                    "doc": "TODO\n"
                },
                {
                    "name": "unorm8x4_B_G_R_A",
                    "doc": "TODO\n"
                }
            ]
        },
        {
            "name": "vertex_step_mode",
            "doc": "TODO\n",
            "entries": [
                {
                    "name": "undefined",
                    "doc": "Indicates no value is passed for this argument. See @ref SentinelValues."
                },
                {
                    "name": "vertex",
                    "doc": "TODO\n"
                },
                {
                    "name": "instance",
                    "doc": "TODO\n"
                }
            ]
        },
        {
            "name": "wait_status",
            "doc": "Status returned from a call to ::wgpuInstanceWaitAny.",
            "entries": [
                null,
                {
                    "name": "success",
                    "doc": "At least one WGPUFuture completed successfully."
                },
                {
                    "name": "timed_out",
                    "doc": "No WGPUFutures completed within the timeout."
                },
                {
                    "name": "unsupported_timeout",
                    "doc": "A @ref Timed-Wait was performed when WGPUInstanceFeatures::timedWaitAnyEnable is false."
                },
                {
                    "name": "unsupported_count",
                    "doc": "The number of futures waited on in a @ref Timed-Wait is greater than the supported WGPUInstanceFeatures::timedWaitAnyMaxCount."
                },
                {
                    "name": "unsupported_mixed_sources",
                    "doc": "An invalid wait was performed with @ref Mixed-Sources."
                }
            ]
        },
        {
            "name": "WGSL_language_feature_name",
            "doc": "TODO\n",
            "entries": [
                null,
                {
                    "name": "readonly_and_readwrite_storage_textures",
                    "doc": "TODO\n"
                },
                {
                    "name": "packed4x8_integer_dot_product",
                    "doc": "TODO\n"
                },
                {
                    "name": "unrestricted_pointer_parameters",
                    "doc": "TODO\n"
                },
                {
                    "name": "pointer_composite_access",
                    "doc": "TODO\n"
                }
            ]
        }
    ],
    "bitflags": [
        {
            "name": "buffer_usage",
            "doc": "TODO\n",
            "entries": [
                {
                    "name": "none",
                    "doc": "TODO\n"
                },
                {
                    "name": "map_read",
                    "doc": "TODO\n"
                },
                {
                    "name": "map_write",
                    "doc": "TODO\n"
                },
                {
                    "name": "copy_src",
                    "doc": "TODO\n"
                },
                {
                    "name": "copy_dst",
                    "doc": "TODO\n"
                },
                {
                    "name": "index",
                    "doc": "TODO\n"
                },
                {
                    "name": "vertex",
                    "doc": "TODO\n"
                },
                {
                    "name": "uniform",
                    "doc": "TODO\n"
                },
                {
                    "name": "storage",
                    "doc": "TODO\n"
                },
                {
                    "name": "indirect",
                    "doc": "TODO\n"
                },
                {
                    "name": "query_resolve",
                    "doc": "TODO\n"
                }
            ]
        },
        {
            "name": "color_write_mask",
            "doc": "TODO\n",
            "entries": [
                {
                    "name": "none",
                    "doc": "TODO\n"
                },
                {
                    "name": "red",
                    "doc": "TODO\n"
                },
                {
                    "name": "green",
                    "doc": "TODO\n"
                },
                {
                    "name": "blue",
                    "doc": "TODO\n"
                },
                {
                    "name": "alpha",
                    "doc": "TODO\n"
                },
                {
                    "name": "all",
                    "value_combination": [
                        "red",
                        "green",
                        "blue",
                        "alpha"
                    ],
                    "doc": "TODO\n"
                }
            ]
        },
        {
            "name": "map_mode",
            "doc": "TODO\n",
            "entries": [
                {
                    "name": "none",
                    "doc": "TODO\n"
                },
                {
                    "name": "read",
                    "doc": "TODO\n"
                },
                {
                    "name": "write",
                    "doc": "TODO\n"
                }
            ]
        },
        {
            "name": "shader_stage",
            "doc": "TODO\n",
            "entries": [
                {
                    "name": "none",
                    "doc": "TODO\n"
                },
                {
                    "name": "vertex",
                    "doc": "TODO\n"
                },
                {
                    "name": "fragment",
                    "doc": "TODO\n"
                },
                {
                    "name": "compute",
                    "doc": "TODO\n"
                }
            ]
        },
        {
            "name": "texture_usage",
            "doc": "TODO\n",
            "entries": [
                {
                    "name": "none",
                    "doc": "TODO\n"
                },
                {
                    "name": "copy_src",
                    "doc": "TODO\n"
                },
                {
                    "name": "copy_dst",
                    "doc": "TODO\n"
                },
                {
                    "name": "texture_binding",
                    "doc": "TODO\n"
                },
                {
                    "name": "storage_binding",
                    "doc": "TODO\n"
                },
                {
                    "name": "render_attachment",
                    "doc": "TODO\n"
                }
            ]
        }
    ],
    "structs": [
        {
            "name": "adapter_info",
            "doc": "TODO\n",
            "type": "base_out",
            "free_members": true,
            "members": [
                {
                    "name": "vendor",
                    "doc": "TODO\n",
                    "type": "out_string"
                },
                {
                    "name": "architecture",
                    "doc": "TODO\n",
                    "type": "out_string"
                },
                {
                    "name": "device",
                    "doc": "TODO\n",
                    "type": "out_string"
                },
                {
                    "name": "description",
                    "doc": "TODO\n",
                    "type": "out_string"
                },
                {
                    "name": "backend_type",
                    "doc": "TODO\n",
                    "type": "enum.backend_type",
                    "default": "undefined"
                },
                {
                    "name": "adapter_type",
                    "doc": "TODO\n",
                    "type": "enum.adapter_type"
                },
                {
                    "name": "vendor_ID",
                    "doc": "TODO\n",
                    "type": "uint32"
                },
                {
                    "name": "device_ID",
                    "doc": "TODO\n",
                    "type": "uint32"
                }
            ]
        },
        {
            "name": "bind_group_descriptor",
            "doc": "TODO\n",
            "type": "base_in",
            "members": [
                {
                    "name": "label",
                    "doc": "TODO\n",
                    "type": "string_with_default_empty"
                },
                {
                    "name": "layout",
                    "doc": "TODO\n",
                    "type": "object.bind_group_layout"
                },
                {
                    "name": "entries",
                    "doc": "TODO\n",
                    "type": "array<struct.bind_group_entry>",
                    "pointer": "immutable"
                }
            ]
        },
        {
            "name": "bind_group_entry",
            "doc": "TODO\n",
            "type": "base_in",
            "members": [
                {
                    "name": "binding",
                    "doc": "Binding index in the bind group.\n",
                    "type": "uint32"
                },
                {
                    "name": "buffer",
                    "doc": "Set this if the binding is a buffer object.\nOtherwise must be null.\n",
                    "type": "object.buffer",
                    "optional": true
                },
                {
                    "name": "offset",
                    "doc": "If the binding is a buffer, this is the byte offset of the binding range.\nOtherwise ignored.\n",
                    "type": "uint64"
                },
                {
                    "name": "size",
                    "doc": "If the binding is a buffer, this is the byte size of the binding range\n(@ref WGPU_WHOLE_SIZE means the binding ends at the end of the buffer).\nOtherwise ignored.\n",
                    "type": "uint64",
                    "default": "constant.whole_size"
                },
                {
                    "name": "sampler",
                    "doc": "Set this if the binding is a sampler object.\nOtherwise must be null.\n",
                    "type": "object.sampler",
                    "optional": true
                },
                {
                    "name": "texture_view",
                    "doc": "Set this if the binding is a texture view object.\nOtherwise must be null.\n",
                    "type": "object.texture_view",
                    "optional": true
                }
            ]
        },
        {
            "name": "bind_group_layout_descriptor",
            "doc": "TODO\n",
            "type": "base_in",
            "members": [
                {
                    "name": "label",
                    "doc": "TODO\n",
                    "type": "string_with_default_empty"
                },
                {
                    "name": "entries",
                    "doc": "TODO\n",
                    "type": "array<struct.bind_group_layout_entry>",
                    "pointer": "immutable"
                }
            ]
        },
        {
            "name": "bind_group_layout_entry",
            "doc": "TODO\n",
            "type": "base_in",
            "members": [
                {
                    "name": "binding",
                    "doc": "TODO\n",
                    "type": "uint32"
                },
                {
                    "name": "visibility",
                    "doc": "TODO\n",
                    "type": "bitflag.shader_stage",
                    "default": "none"
                },
                {
                    "name": "buffer",
                    "doc": "TODO\n",
                    "type": "struct.buffer_binding_layout"
                },
                {
                    "name": "sampler",
                    "doc": "TODO\n",
                    "type": "struct.sampler_binding_layout"
                },
                {
                    "name": "texture",
                    "doc": "TODO\n",
                    "type": "struct.texture_binding_layout"
                },
                {
                    "name": "storage_texture",
                    "doc": "TODO\n",
                    "type": "struct.storage_texture_binding_layout"
                }
            ]
        },
        {
            "name": "blend_component",
            "doc": "TODO\n",
            "type": "standalone",
            "members": [
                {
                    "name": "operation",
                    "doc": "If set to @ref WGPUBlendOperation_Undefined,\n[defaults](@ref SentinelValues) to @ref WGPUBlendOperation_Add.\n",
                    "type": "enum.blend_operation",
                    "default": "undefined"
                },
                {
                    "name": "src_factor",
                    "doc": "If set to @ref WGPUBlendFactor_Undefined,\n[defaults](@ref SentinelValues) to @ref WGPUBlendFactor_One.\n",
                    "type": "enum.blend_factor",
                    "default": "undefined"
                },
                {
                    "name": "dst_factor",
                    "doc": "If set to @ref WGPUBlendFactor_Undefined,\n[defaults](@ref SentinelValues) to @ref WGPUBlendFactor_Zero.\n",
                    "type": "enum.blend_factor",
                    "default": "undefined"
                }
            ]
        },
        {
            "name": "blend_state",
            "doc": "TODO\n",
            "type": "standalone",
            "members": [
                {
                    "name": "color",
                    "doc": "TODO\n",
                    "type": "struct.blend_component"
                },
                {
                    "name": "alpha",
                    "doc": "TODO\n",
                    "type": "struct.blend_component"
                }
            ]
        },
        {
            "name": "buffer_binding_layout",
            "doc": "TODO\n",
            "type": "base_in",
            "members": [
                {
                    "name": "type",
                    "doc": "If set to @ref WGPUBufferBindingType_Undefined,\n[defaults](@ref SentinelValues) to @ref WGPUBufferBindingType_Uniform.\n",
                    "type": "enum.buffer_binding_type",
                    "default": "binding_not_used"
                },
                {
                    "name": "has_dynamic_offset",
                    "doc": "TODO\n",
                    "type": "bool",
                    "default": false
                },
                {
                    "name": "min_binding_size",
                    "doc": "TODO\n",
                    "type": "uint64",
                    "default": 0
                }
            ]
        },
        {
            "name": "buffer_descriptor",
            "doc": "TODO\n",
            "type": "base_in",
            "members": [
                {
                    "name": "label",
                    "doc": "TODO\n",
                    "type": "string_with_default_empty"
                },
                {
                    "name": "usage",
                    "doc": "TODO\n",
                    "type": "bitflag.buffer_usage",
                    "default": "none"
                },
                {
                    "name": "size",
                    "doc": "TODO\n",
                    "type": "uint64"
                },
                {
                    "name": "mapped_at_creation",
                    "doc": "TODO\n",
                    "type": "bool",
                    "default": false
                }
            ]
        },
        {
            "name": "color",
            "doc": "TODO\n",
            "type": "standalone",
            "members": [
                {
                    "name": "r",
                    "doc": "TODO\n",
                    "type": "float64"
                },
                {
                    "name": "g",
                    "doc": "TODO\n",
                    "type": "float64"
                },
                {
                    "name": "b",
                    "doc": "TODO\n",
                    "type": "float64"
                },
                {
                    "name": "a",
                    "doc": "TODO\n",
                    "type": "float64"
                }
            ]
        },
        {
            "name": "color_target_state",
            "doc": "TODO\n",
            "type": "base_in",
            "members": [
                {
                    "name": "format",
                    "doc": "The texture format of the target. If @ref WGPUTextureFormat_Undefined,\nindicates a \"hole\" in the parent @ref WGPUFragmentState `targets` array:\nthe pipeline does not output a value at this `location`.\n",
                    "type": "enum.texture_format",
                    "default": "undefined"
                },
                {
                    "name": "blend",
                    "doc": "TODO\n",
                    "type": "struct.blend_state",
                    "pointer": "immutable",
                    "optional": true
                },
                {
                    "name": "write_mask",
                    "doc": "TODO\n",
                    "type": "bitflag.color_write_mask",
                    "default": "all"
                }
            ]
        },
        {
            "name": "command_buffer_descriptor",
            "doc": "TODO\n",
            "type": "base_in",
            "members": [
                {
                    "name": "label",
                    "doc": "TODO\n",
                    "type": "string_with_default_empty"
                }
            ]
        },
        {
            "name": "command_encoder_descriptor",
            "doc": "TODO\n",
            "type": "base_in",
            "members": [
                {
                    "name": "label",
                    "doc": "TODO\n",
                    "type": "string_with_default_empty"
                }
            ]
        },
        {
            "name": "compilation_info",
            "doc": "TODO\n",
            "type": "base_in",
            "members": [
                {
                    "name": "messages",
                    "doc": "TODO\n",
                    "type": "array<struct.compilation_message>",
                    "pointer": "immutable"
                }
            ]
        },
        {
            "name": "compilation_message",
            "doc": "TODO\n",
            "type": "base_in",
            "members": [
                {
                    "name": "message",
                    "doc": "A @ref LocalizableHumanReadableMessageString.\n",
                    "type": "out_string"
                },
                {
                    "name": "type",
                    "doc": "Severity level of the message.\n",
                    "type": "enum.compilation_message_type"
                },
                {
                    "name": "line_num",
                    "doc": "Line number where the message is attached, starting at 1.\n",
                    "type": "uint64"
                },
                {
                    "name": "line_pos",
                    "doc": "Offset in UTF-8 code units (bytes) from the beginning of the line, starting at 1.\n",
                    "type": "uint64"
                },
                {
                    "name": "offset",
                    "doc": "Offset in UTF-8 code units (bytes) from the beginning of the shader code, starting at 0.\n",
                    "type": "uint64"
                },
                {
                    "name": "length",
                    "doc": "Length in UTF-8 code units (bytes) of the span the message corresponds to.\n",
                    "type": "uint64"
                }
            ]
        },
        {
            "name": "compute_pass_descriptor",
            "doc": "TODO\n",
            "type": "base_in",
            "members": [
                {
                    "name": "label",
                    "doc": "TODO\n",
                    "type": "string_with_default_empty"
                },
                {
                    "name": "timestamp_writes",
                    "doc": "TODO\n",
                    "type": "struct.pass_timestamp_writes",
                    "pointer": "immutable",
                    "optional": true
                }
            ]
        },
        {
            "name": "compute_pipeline_descriptor",
            "doc": "TODO\n",
            "type": "base_in",
            "members": [
                {
                    "name": "label",
                    "doc": "TODO\n",
                    "type": "string_with_default_empty"
                },
                {
                    "name": "layout",
                    "doc": "TODO\n",
                    "type": "object.pipeline_layout",
                    "optional": true
                },
                {
                    "name": "compute",
                    "doc": "TODO\n",
                    "type": "struct.compute_state"
                }
            ]
        },
        {
            "name": "compute_state",
            "doc": "TODO\n",
            "type": "base_in",
            "members": [
                {
                    "name": "module",
                    "doc": "TODO\n",
                    "type": "object.shader_module"
                },
                {
                    "name": "entry_point",
                    "doc": "TODO\n",
                    "type": "nullable_string"
                },
                {
                    "name": "constants",
                    "doc": "TODO\n",
                    "type": "array<struct.constant_entry>",
                    "pointer": "immutable"
                }
            ]
        },
        {
            "name": "constant_entry",
            "doc": "TODO\n",
            "type": "base_in",
            "members": [
                {
                    "name": "key",
                    "doc": "TODO\n",
                    "type": "string_with_default_empty"
                },
                {
                    "name": "value",
                    "doc": "TODO\n",
                    "type": "float64"
                }
            ]
        },
        {
            "name": "depth_stencil_state",
            "doc": "TODO\n",
            "type": "base_in",
            "members": [
                {
                    "name": "format",
                    "doc": "TODO\n",
                    "type": "enum.texture_format",
                    "default": "undefined"
                },
                {
                    "name": "depth_write_enabled",
                    "doc": "TODO\n",
                    "type": "enum.optional_bool"
                },
                {
                    "name": "depth_compare",
                    "doc": "TODO\n",
                    "type": "enum.compare_function"
                },
                {
                    "name": "stencil_front",
                    "doc": "TODO\n",
                    "type": "struct.stencil_face_state"
                },
                {
                    "name": "stencil_back",
                    "doc": "TODO\n",
                    "type": "struct.stencil_face_state"
                },
                {
                    "name": "stencil_read_mask",
                    "doc": "TODO\n",
                    "type": "uint32",
                    "default": "0xFFFFFFFF"
                },
                {
                    "name": "stencil_write_mask",
                    "doc": "TODO\n",
                    "type": "uint32",
                    "default": "0xFFFFFFFF"
                },
                {
                    "name": "depth_bias",
                    "doc": "TODO\n",
                    "type": "int32",
                    "default": 0
                },
                {
                    "name": "depth_bias_slope_scale",
                    "doc": "TODO\n",
                    "type": "float32",
                    "default": 0
                },
                {
                    "name": "depth_bias_clamp",
                    "doc": "TODO\n",
                    "type": "float32",
                    "default": 0
                }
            ]
        },
        {
            "name": "device_descriptor",
            "doc": "TODO\n",
            "type": "base_in",
            "members": [
                {
                    "name": "label",
                    "doc": "TODO\n",
                    "type": "string_with_default_empty"
                },
                {
                    "name": "required_features",
                    "doc": "TODO\n",
                    "type": "array<enum.feature_name>",
                    "pointer": "immutable"
                },
                {
                    "name": "required_limits",
                    "doc": "TODO\n",
                    "type": "struct.limits",
                    "pointer": "immutable",
                    "optional": true
                },
                {
                    "name": "default_queue",
                    "doc": "TODO\n",
                    "type": "struct.queue_descriptor"
                },
                {
                    "name": "device_lost_callback_info",
                    "doc": "TODO\n",
                    "type": "callback.device_lost"
                },
                {
                    "name": "uncaptured_error_callback_info",
                    "doc": "Called when there is an uncaptured error on this device, from any thread.\nSee @ref ErrorScopes.\n",
                    "type": "callback.uncaptured_error"
                }
            ]
        },
        {
            "name": "extent_3D",
            "doc": "TODO\n",
            "type": "standalone",
            "members": [
                {
                    "name": "width",
                    "doc": "TODO\n",
                    "type": "uint32"
                },
                {
                    "name": "height",
                    "doc": "TODO\n",
                    "type": "uint32",
                    "default": 1
                },
                {
                    "name": "depth_or_array_layers",
                    "doc": "TODO\n",
                    "type": "uint32",
                    "default": 1
                }
            ]
        },
        {
            "name": "fragment_state",
            "doc": "TODO\n",
            "type": "base_in",
            "members": [
                {
                    "name": "module",
                    "doc": "TODO\n",
                    "type": "object.shader_module"
                },
                {
                    "name": "entry_point",
                    "doc": "TODO\n",
                    "type": "nullable_string"
                },
                {
                    "name": "constants",
                    "doc": "TODO\n",
                    "type": "array<struct.constant_entry>",
                    "pointer": "immutable"
                },
                {
                    "name": "targets",
                    "doc": "TODO\n",
                    "type": "array<struct.color_target_state>",
                    "pointer": "immutable"
                }
            ]
        },
        {
            "name": "future",
            "doc": "Opaque handle to an asynchronous operation. See @ref Asynchronous-Operations for more information.",
            "type": "standalone",
            "members": [
                {
                    "name": "id",
                    "doc": "Opaque id of the @ref WGPUFuture",
                    "type": "uint64"
                }
            ]
        },
        {
            "name": "future_wait_info",
            "doc": "Struct holding a future to wait on, and a `completed` boolean flag.",
            "type": "standalone",
            "members": [
                {
                    "name": "future",
                    "doc": "The future to wait on.",
                    "type": "struct.future"
                },
                {
                    "name": "completed",
                    "doc": "Whether or not the future completed.",
                    "type": "bool"
                }
            ]
        },
        {
            "name": "instance_capabilities",
            "doc": "Features enabled on the WGPUInstance\n",
            "type": "base_in_or_out",
            "members": [
                {
                    "name": "timed_wait_any_enable",
                    "doc": "Enable use of ::wgpuInstanceWaitAny with `timeoutNS > 0`.",
                    "type": "bool"
                },
                {
                    "name": "timed_wait_any_max_count",
                    "doc": "The maximum number @ref WGPUFutureWaitInfo supported in a call to ::wgpuInstanceWaitAny with `timeoutNS > 0`.",
                    "type": "usize"
                }
            ]
        },
        {
            "name": "instance_descriptor",
            "doc": "TODO\n",
            "type": "base_in",
            "members": [
                {
                    "name": "features",
                    "doc": "Instance features to enable",
                    "type": "struct.instance_capabilities"
                }
            ]
        },
        {
            "name": "limits",
            "doc": "TODO\n",
            "type": "base_in_or_out",
            "members": [
                {
                    "name": "max_texture_dimension_1D",
                    "doc": "TODO\n",
                    "type": "uint32",
                    "default": "constant.limit_u32_undefined"
                },
                {
                    "name": "max_texture_dimension_2D",
                    "doc": "TODO\n",
                    "type": "uint32",
                    "default": "constant.limit_u32_undefined"
                },
                {
                    "name": "max_texture_dimension_3D",
                    "doc": "TODO\n",
                    "type": "uint32",
                    "default": "constant.limit_u32_undefined"
                },
                {
                    "name": "max_texture_array_layers",
                    "doc": "TODO\n",
                    "type": "uint32",
                    "default": "constant.limit_u32_undefined"
                },
                {
                    "name": "max_bind_groups",
                    "doc": "TODO\n",
                    "type": "uint32",
                    "default": "constant.limit_u32_undefined"
                },
                {
                    "name": "max_bind_groups_plus_vertex_buffers",
                    "doc": "TODO\n",
                    "type": "uint32",
                    "default": "constant.limit_u32_undefined"
                },
                {
                    "name": "max_bindings_per_bind_group",
                    "doc": "TODO\n",
                    "type": "uint32",
                    "default": "constant.limit_u32_undefined"
                },
                {
                    "name": "max_dynamic_uniform_buffers_per_pipeline_layout",
                    "doc": "TODO\n",
                    "type": "uint32",
                    "default": "constant.limit_u32_undefined"
                },
                {
                    "name": "max_dynamic_storage_buffers_per_pipeline_layout",
                    "doc": "TODO\n",
                    "type": "uint32",
                    "default": "constant.limit_u32_undefined"
                },
                {
                    "name": "max_sampled_textures_per_shader_stage",
                    "doc": "TODO\n",
                    "type": "uint32",
                    "default": "constant.limit_u32_undefined"
                },
                {
                    "name": "max_samplers_per_shader_stage",
                    "doc": "TODO\n",
                    "type": "uint32",
                    "default": "constant.limit_u32_undefined"
                },
                {
                    "name": "max_storage_buffers_per_shader_stage",
                    "doc": "TODO\n",
                    "type": "uint32",
                    "default": "constant.limit_u32_undefined"
                },
                {
                    "name": "max_storage_textures_per_shader_stage",
                    "doc": "TODO\n",
                    "type": "uint32",
                    "default": "constant.limit_u32_undefined"
                },
                {
                    "name": "max_uniform_buffers_per_shader_stage",
                    "doc": "TODO\n",
                    "type": "uint32",
                    "default": "constant.limit_u32_undefined"
                },
                {
                    "name": "max_uniform_buffer_binding_size",
                    "doc": "TODO\n",
                    "type": "uint64",
                    "default": "constant.limit_u64_undefined"
                },
                {
                    "name": "max_storage_buffer_binding_size",
                    "doc": "TODO\n",
                    "type": "uint64",
                    "default": "constant.limit_u64_undefined"
                },
                {
                    "name": "min_uniform_buffer_offset_alignment",
                    "doc": "TODO\n",
                    "type": "uint32",
                    "default": "constant.limit_u32_undefined"
                },
                {
                    "name": "min_storage_buffer_offset_alignment",
                    "doc": "TODO\n",
                    "type": "uint32",
                    "default": "constant.limit_u32_undefined"
                },
                {
                    "name": "max_vertex_buffers",
                    "doc": "TODO\n",
                    "type": "uint32",
                    "default": "constant.limit_u32_undefined"
                },
                {
                    "name": "max_buffer_size",
                    "doc": "TODO\n",
                    "type": "uint64",
                    "default": "constant.limit_u64_undefined"
                },
                {
                    "name": "max_vertex_attributes",
                    "doc": "TODO\n",
                    "type": "uint32",
                    "default": "constant.limit_u32_undefined"
                },
                {
                    "name": "max_vertex_buffer_array_stride",
                    "doc": "TODO\n",
                    "type": "uint32",
                    "default": "constant.limit_u32_undefined"
                },
                {
                    "name": "max_inter_stage_shader_variables",
                    "doc": "TODO\n",
                    "type": "uint32",
                    "default": "constant.limit_u32_undefined"
                },
                {
                    "name": "max_color_attachments",
                    "doc": "TODO\n",
                    "type": "uint32",
                    "default": "constant.limit_u32_undefined"
                },
                {
                    "name": "max_color_attachment_bytes_per_sample",
                    "doc": "TODO\n",
                    "type": "uint32",
                    "default": "constant.limit_u32_undefined"
                },
                {
                    "name": "max_compute_workgroup_storage_size",
                    "doc": "TODO\n",
                    "type": "uint32",
                    "default": "constant.limit_u32_undefined"
                },
                {
                    "name": "max_compute_invocations_per_workgroup",
                    "doc": "TODO\n",
                    "type": "uint32",
                    "default": "constant.limit_u32_undefined"
                },
                {
                    "name": "max_compute_workgroup_size_x",
                    "doc": "TODO\n",
                    "type": "uint32",
                    "default": "constant.limit_u32_undefined"
                },
                {
                    "name": "max_compute_workgroup_size_y",
                    "doc": "TODO\n",
                    "type": "uint32",
                    "default": "constant.limit_u32_undefined"
                },
                {
                    "name": "max_compute_workgroup_size_z",
                    "doc": "TODO\n",
                    "type": "uint32",
                    "default": "constant.limit_u32_undefined"
                },
                {
                    "name": "max_compute_workgroups_per_dimension",
                    "doc": "TODO\n",
                    "type": "uint32",
                    "default": "constant.limit_u32_undefined"
                }
            ]
        },
        {
            "name": "multisample_state",
            "doc": "TODO\n",
            "type": "base_in",
            "members": [
                {
                    "name": "count",
                    "doc": "TODO\n",
                    "type": "uint32",
                    "default": 1
                },
                {
                    "name": "mask",
                    "doc": "TODO\n",
                    "type": "uint32",
                    "default": "0xFFFFFFFF"
                },
                {
                    "name": "alpha_to_coverage_enabled",
                    "doc": "TODO\n",
                    "type": "bool",
                    "default": false
                }
            ]
        },
        {
            "name": "origin_3D",
            "doc": "TODO\n",
            "type": "standalone",
            "members": [
                {
                    "name": "x",
                    "doc": "TODO\n",
                    "type": "uint32",
                    "default": 0
                },
                {
                    "name": "y",
                    "doc": "TODO\n",
                    "type": "uint32",
                    "default": 0
                },
                {
                    "name": "z",
                    "doc": "TODO\n",
                    "type": "uint32",
                    "default": 0
                }
            ]
        },
        {
            "name": "pass_timestamp_writes",
            "doc": "TODO\n",
            "type": "base_in",
            "members": [
                {
                    "name": "query_set",
                    "doc": "Query set to write timestamps to.\n",
                    "type": "object.query_set"
                },
                {
                    "name": "beginning_of_pass_write_index",
                    "doc": "TODO\n",
                    "type": "uint32",
                    "default": "constant.query_set_index_undefined"
                },
                {
                    "name": "end_of_pass_write_index",
                    "doc": "TODO\n",
                    "type": "uint32",
                    "default": "constant.query_set_index_undefined"
                }
            ]
        },
        {
            "name": "pipeline_layout_descriptor",
            "doc": "TODO\n",
            "type": "base_in",
            "members": [
                {
                    "name": "label",
                    "doc": "TODO\n",
                    "type": "string_with_default_empty"
                },
                {
                    "name": "bind_group_layouts",
                    "doc": "TODO\n",
                    "type": "array<object.bind_group_layout>",
                    "pointer": "immutable"
                }
            ]
        },
        {
            "name": "primitive_state",
            "doc": "TODO\n",
            "type": "base_in",
            "members": [
                {
                    "name": "topology",
                    "doc": "If set to @ref WGPUPrimitiveTopology_Undefined,\n[defaults](@ref SentinelValues) to @ref WGPUPrimitiveTopology_TriangleList.\n",
                    "type": "enum.primitive_topology",
                    "default": "undefined"
                },
                {
                    "name": "strip_index_format",
                    "doc": "TODO\n",
                    "type": "enum.index_format"
                },
                {
                    "name": "front_face",
                    "doc": "If set to @ref WGPUFrontFace_Undefined,\n[defaults](@ref SentinelValues) to @ref WGPUFrontFace_CCW.\n",
                    "type": "enum.front_face",
                    "default": "undefined"
                },
                {
                    "name": "cull_mode",
                    "doc": "If set to @ref WGPUCullMode_Undefined,\n[defaults](@ref SentinelValues) to @ref WGPUCullMode_None.\n",
                    "type": "enum.cull_mode",
                    "default": "undefined"
                },
                {
                    "name": "unclipped_depth",
                    "doc": "TODO\n",
                    "type": "bool",
                    "default": false
                }
            ]
        },
        {
            "name": "query_set_descriptor",
            "doc": "TODO\n",
            "type": "base_in",
            "members": [
                {
                    "name": "label",
                    "doc": "TODO\n",
                    "type": "string_with_default_empty"
                },
                {
                    "name": "type",
                    "doc": "TODO\n",
                    "type": "enum.query_type"
                },
                {
                    "name": "count",
                    "doc": "TODO\n",
                    "type": "uint32"
                }
            ]
        },
        {
            "name": "queue_descriptor",
            "doc": "TODO\n",
            "type": "base_in",
            "members": [
                {
                    "name": "label",
                    "doc": "TODO\n",
                    "type": "string_with_default_empty"
                }
            ]
        },
        {
            "name": "render_bundle_descriptor",
            "doc": "TODO\n",
            "type": "base_in",
            "members": [
                {
                    "name": "label",
                    "doc": "TODO\n",
                    "type": "string_with_default_empty"
                }
            ]
        },
        {
            "name": "render_bundle_encoder_descriptor",
            "doc": "TODO\n",
            "type": "base_in",
            "members": [
                {
                    "name": "label",
                    "doc": "TODO\n",
                    "type": "string_with_default_empty"
                },
                {
                    "name": "color_formats",
                    "doc": "TODO\n",
                    "type": "array<enum.texture_format>",
                    "pointer": "immutable"
                },
                {
                    "name": "depth_stencil_format",
                    "doc": "TODO\n",
                    "type": "enum.texture_format",
                    "default": "undefined"
                },
                {
                    "name": "sample_count",
                    "doc": "TODO\n",
                    "type": "uint32",
                    "default": 1
                },
                {
                    "name": "depth_read_only",
                    "doc": "TODO\n",
                    "type": "bool",
                    "default": false
                },
                {
                    "name": "stencil_read_only",
                    "doc": "TODO\n",
                    "type": "bool",
                    "default": false
                }
            ]
        },
        {
            "name": "render_pass_color_attachment",
            "doc": "TODO\n",
            "type": "base_in",
            "members": [
                {
                    "name": "view",
                    "doc": "If `NULL`, indicates a hole in the parent\n@ref WGPURenderPassDescriptor::colorAttachments array.\n",
                    "type": "object.texture_view",
                    "optional": true
                },
                {
                    "name": "depth_slice",
                    "doc": "TODO\n",
                    "type": "uint32",
                    "default": "constant.depth_slice_undefined"
                },
                {
                    "name": "resolve_target",
                    "doc": "TODO\n",
                    "type": "object.texture_view",
                    "optional": true
                },
                {
                    "name": "load_op",
                    "doc": "TODO\n",
                    "type": "enum.load_op"
                },
                {
                    "name": "store_op",
                    "doc": "TODO\n",
                    "type": "enum.store_op"
                },
                {
                    "name": "clear_value",
                    "doc": "TODO\n",
                    "type": "struct.color"
                }
            ]
        },
        {
            "name": "render_pass_depth_stencil_attachment",
            "doc": "TODO\n",
            "type": "base_in",
            "members": [
                {
                    "name": "view",
                    "doc": "TODO\n",
                    "type": "object.texture_view"
                },
                {
                    "name": "depth_load_op",
                    "doc": "TODO\n",
                    "type": "enum.load_op",
                    "default": "undefined"
                },
                {
                    "name": "depth_store_op",
                    "doc": "TODO\n",
                    "type": "enum.store_op",
                    "default": "undefined"
                },
                {
                    "name": "depth_clear_value",
                    "doc": "TODO\n",
                    "type": "float32",
                    "default": "constant.depth_clear_value_undefined"
                },
                {
                    "name": "depth_read_only",
                    "doc": "TODO\n",
                    "type": "bool",
                    "default": false
                },
                {
                    "name": "stencil_load_op",
                    "doc": "TODO\n",
                    "type": "enum.load_op",
                    "default": "undefined"
                },
                {
                    "name": "stencil_store_op",
                    "doc": "TODO\n",
                    "type": "enum.store_op",
                    "default": "undefined"
                },
                {
                    "name": "stencil_clear_value",
                    "doc": "TODO\n",
                    "type": "uint32"
                },
                {
                    "name": "stencil_read_only",
                    "doc": "TODO\n",
                    "type": "bool",
                    "default": false
                }
            ]
        },
        {
            "name": "render_pass_descriptor",
            "doc": "TODO\n",
            "type": "base_in",
            "members": [
                {
                    "name": "label",
                    "doc": "TODO\n",
                    "type": "string_with_default_empty"
                },
                {
                    "name": "color_attachments",
                    "doc": "TODO\n",
                    "type": "array<struct.render_pass_color_attachment>",
                    "pointer": "immutable"
                },
                {
                    "name": "depth_stencil_attachment",
                    "doc": "TODO\n",
                    "type": "struct.render_pass_depth_stencil_attachment",
                    "pointer": "immutable",
                    "optional": true
                },
                {
                    "name": "occlusion_query_set",
                    "doc": "TODO\n",
                    "type": "object.query_set",
                    "optional": true
                },
                {
                    "name": "timestamp_writes",
                    "doc": "TODO\n",
                    "type": "struct.pass_timestamp_writes",
                    "pointer": "immutable",
                    "optional": true
                }
            ]
        },
        {
            "name": "render_pass_max_draw_count",
            "doc": "TODO\n",
            "type": "extension_in",
            "extends": [
                "render_pass_descriptor"
            ],
            "members": [
                {
                    "name": "max_draw_count",
                    "doc": "TODO\n",
                    "type": "uint64",
                    "default": 50000000
                }
            ]
        },
        {
            "name": "render_pipeline_descriptor",
            "doc": "TODO\n",
            "type": "base_in",
            "members": [
                {
                    "name": "label",
                    "doc": "TODO\n",
                    "type": "string_with_default_empty"
                },
                {
                    "name": "layout",
                    "doc": "TODO\n",
                    "type": "object.pipeline_layout",
                    "optional": true
                },
                {
                    "name": "vertex",
                    "doc": "TODO\n",
                    "type": "struct.vertex_state"
                },
                {
                    "name": "primitive",
                    "doc": "TODO\n",
                    "type": "struct.primitive_state"
                },
                {
                    "name": "depth_stencil",
                    "doc": "TODO\n",
                    "type": "struct.depth_stencil_state",
                    "pointer": "immutable",
                    "optional": true
                },
                {
                    "name": "multisample",
                    "doc": "TODO\n",
                    "type": "struct.multisample_state"
                },
                {
                    "name": "fragment",
                    "doc": "TODO\n",
                    "type": "struct.fragment_state",
                    "pointer": "immutable",
                    "optional": true
                }
            ]
        },
        {
            "name": "request_adapter_options",
            "doc": "TODO\n",
            "type": "base_in",
            "members": [
                {
                    "name": "feature_level",
                    "doc": "\"Feature level\" for the adapter request. If an adapter is returned, it must support the features and limits in the requested feature level.\n\nIf set to @ref WGPUFeatureLevel_Undefined,\n[defaults](@ref SentinelValues) to @ref WGPUFeatureLevel_Core.\nAdditionally, implementations may ignore @ref WGPUFeatureLevel_Compatibility\nand provide @ref WGPUFeatureLevel_Core instead.\n",
                    "type": "enum.feature_level",
                    "default": "undefined"
                },
                {
                    "name": "power_preference",
                    "doc": "TODO\n",
                    "type": "enum.power_preference",
                    "default": "undefined"
                },
                {
                    "name": "force_fallback_adapter",
                    "doc": "If true, requires the adapter to be a \"fallback\" adapter as defined by the JS spec.\nIf this is not possible, the request returns null.\n",
                    "type": "bool",
                    "default": false
                },
                {
                    "name": "backend_type",
                    "doc": "If set, requires the adapter to have a particular backend type.\nIf this is not possible, the request returns null.\n",
                    "type": "enum.backend_type",
                    "default": "undefined"
                },
                {
                    "name": "compatible_surface",
                    "doc": "If set, requires the adapter to be able to output to a particular surface.\nIf this is not possible, the request returns null.\n",
                    "type": "object.surface",
                    "optional": true
                }
            ]
        },
        {
            "name": "sampler_binding_layout",
            "doc": "TODO\n",
            "type": "base_in",
            "members": [
                {
                    "name": "type",
                    "doc": "If set to @ref WGPUSamplerBindingType_Undefined,\n[defaults](@ref SentinelValues) to @ref WGPUSamplerBindingType_Filtering.\n",
                    "type": "enum.sampler_binding_type",
                    "default": "binding_not_used"
                }
            ]
        },
        {
            "name": "sampler_descriptor",
            "doc": "TODO\n",
            "type": "base_in",
            "members": [
                {
                    "name": "label",
                    "doc": "TODO\n",
                    "type": "string_with_default_empty"
                },
                {
                    "name": "address_mode_u",
                    "doc": "If set to @ref WGPUAddressMode_Undefined,\n[defaults](@ref SentinelValues) to @ref WGPUAddressMode_ClampToEdge.\n",
                    "type": "enum.address_mode",
                    "default": "undefined"
                },
                {
                    "name": "address_mode_v",
                    "doc": "If set to @ref WGPUAddressMode_Undefined,\n[defaults](@ref SentinelValues) to @ref WGPUAddressMode_ClampToEdge.\n",
                    "type": "enum.address_mode",
                    "default": "undefined"
                },
                {
                    "name": "address_mode_w",
                    "doc": "If set to @ref WGPUAddressMode_Undefined,\n[defaults](@ref SentinelValues) to @ref WGPUAddressMode_ClampToEdge.\n",
                    "type": "enum.address_mode",
                    "default": "undefined"
                },
                {
                    "name": "mag_filter",
                    "doc": "If set to @ref WGPUFilterMode_Undefined,\n[defaults](@ref SentinelValues) to @ref WGPUFilterMode_Nearest.\n",
                    "type": "enum.filter_mode",
                    "default": "undefined"
                },
                {
                    "name": "min_filter",
                    "doc": "If set to @ref WGPUFilterMode_Undefined,\n[defaults](@ref SentinelValues) to @ref WGPUFilterMode_Nearest.\n",
                    "type": "enum.filter_mode",
                    "default": "undefined"
                },
                {
                    "name": "mipmap_filter",
                    "doc": "If set to @ref WGPUFilterMode_Undefined,\n[defaults](@ref SentinelValues) to @ref WGPUMipmapFilterMode_Nearest.\n",
                    "type": "enum.mipmap_filter_mode",
                    "default": "undefined"
                },
                {
                    "name": "lod_min_clamp",
                    "doc": "TODO\n",
                    "type": "float32",
                    "default": 0
                },
                {
                    "name": "lod_max_clamp",
                    "doc": "TODO\n",
                    "type": "float32",
                    "default": 32
                },
                {
                    "name": "compare",
                    "doc": "TODO\n",
                    "type": "enum.compare_function",
                    "default": "undefined"
                },
                {
                    "name": "max_anisotropy",
                    "doc": "TODO\n",
                    "type": "uint16",
                    "default": 1
                }
            ]
        },
        {
            "name": "shader_module_descriptor",
            "doc": "TODO\n",
            "type": "base_in",
            "members": [
                {
                    "name": "label",
                    "doc": "TODO\n",
                    "type": "string_with_default_empty"
                }
            ]
        },
        {
            "name": "shader_source_SPIRV",
            "doc": "TODO\n",
            "type": "extension_in",
            "extends": [
                "shader_module_descriptor"
            ],
            "members": [
                {
                    "name": "code_size",
                    "doc": "TODO\n",
                    "type": "uint32",
                    "default": 0
                },
                {
                    "name": "code",
                    "doc": "TODO\n",
                    "type": "uint32",
                    "pointer": "immutable"
                }
            ]
        },
        {
            "name": "shader_source_WGSL",
            "doc": "TODO\n",
            "type": "extension_in",
            "extends": [
                "shader_module_descriptor"
            ],
            "members": [
                {
                    "name": "code",
                    "doc": "TODO\n",
                    "type": "string_with_default_empty"
                }
            ]
        },
        {
            "name": "stencil_face_state",
            "doc": "TODO\n",
            "type": "standalone",
            "members": [
                {
                    "name": "compare",
                    "doc": "If set to @ref WGPUCompareFunction_Undefined,\n[defaults](@ref SentinelValues) to @ref WGPUCompareFunction_Always.\n",
                    "type": "enum.compare_function",
                    "default": "undefined"
                },
                {
                    "name": "fail_op",
                    "doc": "If set to @ref WGPUStencilOperation_Undefined,\n[defaults](@ref SentinelValues) to @ref WGPUStencilOperation_Keep.\n",
                    "type": "enum.stencil_operation",
                    "default": "undefined"
                },
                {
                    "name": "depth_fail_op",
                    "doc": "If set to @ref WGPUStencilOperation_Undefined,\n[defaults](@ref SentinelValues) to @ref WGPUStencilOperation_Keep.\n",
                    "type": "enum.stencil_operation",
                    "default": "undefined"
                },
                {
                    "name": "pass_op",
                    "doc": "If set to @ref WGPUStencilOperation_Undefined,\n[defaults](@ref SentinelValues) to @ref WGPUStencilOperation_Keep.\n",
                    "type": "enum.stencil_operation",
                    "default": "undefined"
                }
            ]
        },
        {
            "name": "storage_texture_binding_layout",
            "doc": "TODO\n",
            "type": "base_in",
            "members": [
                {
                    "name": "access",
                    "doc": "If set to @ref WGPUStorageTextureAccess_Undefined,\n[defaults](@ref SentinelValues) to @ref WGPUStorageTextureAccess_WriteOnly.\n",
                    "type": "enum.storage_texture_access",
                    "default": "binding_not_used"
                },
                {
                    "name": "format",
                    "doc": "TODO\n",
                    "type": "enum.texture_format",
                    "default": "undefined"
                },
                {
                    "name": "view_dimension",
                    "doc": "If set to @ref WGPUTextureViewDimension_Undefined,\n[defaults](@ref SentinelValues) to @ref WGPUTextureViewDimension_2D.\n",
                    "type": "enum.texture_view_dimension",
                    "default": "undefined"
                }
            ]
        },
        {
            "name": "supported_features",
            "doc": "TODO\n",
            "type": "standalone",
            "free_members": true,
            "members": [
                {
                    "name": "features",
                    "doc": "TODO\n",
                    "type": "array<enum.feature_name>",
                    "pointer": "immutable"
                }
            ]
        },
        {
            "name": "supported_WGSL_language_features",
            "doc": "TODO\n",
            "type": "standalone",
            "free_members": true,
            "members": [
                {
                    "name": "features",
                    "doc": "TODO\n",
                    "type": "array<enum.WGSL_language_feature_name>",
                    "pointer": "immutable"
                }
            ]
        },
        {
            "name": "surface_capabilities",
            "doc": "Filled by @ref wgpuSurfaceGetCapabilities with what's supported for @ref wgpuSurfaceConfigure for a pair of @ref WGPUSurface and @ref WGPUAdapter.",
            "type": "base_out",
            "free_members": true,
            "members": [
                {
                    "name": "usages",
                    "doc": "The bit set of supported @ref WGPUTextureUsage bits.\nGuaranteed to contain @ref WGPUTextureUsage_RenderAttachment.\n",
                    "type": "bitflag.texture_usage"
                },
                {
                    "name": "formats",
                    "doc": "A list of supported @ref WGPUTextureFormat values, in order of preference.",
                    "type": "array<enum.texture_format>",
                    "pointer": "immutable"
                },
                {
                    "name": "present_modes",
                    "doc": "A list of supported @ref WGPUPresentMode values.\nGuaranteed to contain @ref WGPUPresentMode_Fifo.\n",
                    "type": "array<enum.present_mode>",
                    "pointer": "immutable"
                },
                {
                    "name": "alpha_modes",
                    "doc": "A list of supported @ref WGPUCompositeAlphaMode values.\n@ref WGPUCompositeAlphaMode_Auto will be an alias for the first element and will never be present in this array.\n",
                    "type": "array<enum.composite_alpha_mode>",
                    "pointer": "immutable"
                }
            ]
        },
        {
            "name": "surface_configuration",
            "doc": "Options to @ref wgpuSurfaceConfigure for defining how a @ref WGPUSurface will be rendered to and presented to the user.\nSee @ref Surface-Configuration for more details.\n",
            "type": "base_in",
            "members": [
                {
                    "name": "device",
                    "doc": "The @ref WGPUDevice to use to render to surface's textures.",
                    "type": "object.device"
                },
                {
                    "name": "format",
                    "doc": "The @ref WGPUTextureFormat of the surface's textures.",
                    "type": "enum.texture_format",
                    "default": "undefined"
                },
                {
                    "name": "usage",
                    "doc": "The @ref WGPUTextureUsage of the surface's textures.",
                    "type": "bitflag.texture_usage",
                    "default": "render_attachment"
                },
                {
                    "name": "width",
                    "doc": "The width of the surface's textures.",
                    "type": "uint32"
                },
                {
                    "name": "height",
                    "doc": "The height of the surface's textures.",
                    "type": "uint32"
                },
                {
                    "name": "view_formats",
                    "doc": "The additional @ref WGPUTextureFormat for @ref WGPUTextureView format reinterpretation of the surface's textures.",
                    "type": "array<enum.texture_format>",
                    "pointer": "immutable"
                },
                {
                    "name": "alpha_mode",
                    "doc": "How the surface's frames will be composited on the screen.\n\nIf set to @ref WGPUCompositeAlphaMode_Auto,\n[defaults] to @ref WGPUCompositeAlphaMode_Inherit in native (allowing the mode\nto be configured externally), and to @ref WGPUCompositeAlphaMode_Opaque in Wasm.\n",
                    "type": "enum.composite_alpha_mode",
                    "default": "auto"
                },
                {
                    "name": "present_mode",
                    "doc": "When and in which order the surface's frames will be shown on the screen.\n\nIf set to @ref WGPUPresentMode_Undefined,\n[defaults](@ref SentinelValues) to @ref WGPUPresentMode_Fifo.\n",
                    "type": "enum.present_mode",
                    "default": "undefined"
                }
            ]
        },
        {
            "name": "surface_descriptor",
            "doc": "The root descriptor for the creation of an @ref WGPUSurface with @ref wgpuInstanceCreateSurface.\nIt isn't sufficient by itself and must have one of the `WGPUSurfaceSource*` in its chain.\nSee @ref Surface-Creation for more details.\n",
            "type": "base_in",
            "members": [
                {
                    "name": "label",
                    "doc": "Label used to refer to the object.",
                    "type": "string_with_default_empty"
                }
            ]
        },
        {
            "name": "surface_source_android_native_window",
            "doc": "Chained in @ref WGPUSurfaceDescriptor to make an @ref WGPUSurface wrapping an Android [`ANativeWindow`](https://developer.android.com/ndk/reference/group/a-native-window).",
            "type": "extension_in",
            "extends": [
                "surface_descriptor"
            ],
            "members": [
                {
                    "name": "window",
                    "doc": "The pointer to the [`ANativeWindow`](https://developer.android.com/ndk/reference/group/a-native-window) that will be wrapped by the @ref WGPUSurface.",
                    "type": "c_void",
                    "pointer": "mutable"
                }
            ]
        },
        {
            "name": "surface_source_metal_layer",
            "doc": "Chained in @ref WGPUSurfaceDescriptor to make an @ref WGPUSurface wrapping a [`CAMetalLayer`](https://developer.apple.com/documentation/quartzcore/cametallayer?language=objc).",
            "type": "extension_in",
            "extends": [
                "surface_descriptor"
            ],
            "members": [
                {
                    "name": "layer",
                    "doc": "The pointer to the [`CAMetalLayer`](https://developer.apple.com/documentation/quartzcore/cametallayer?language=objc) that will be wrapped by the @ref WGPUSurface.",
                    "type": "c_void",
                    "pointer": "mutable"
                }
            ]
        },
        {
            "name": "surface_source_wayland_surface",
            "doc": "Chained in @ref WGPUSurfaceDescriptor to make an @ref WGPUSurface wrapping a [Wayland](https://wayland.freedesktop.org/) [`wl_surface`](https://wayland.freedesktop.org/docs/html/apa.html#protocol-spec-wl_surface).",
            "type": "extension_in",
            "extends": [
                "surface_descriptor"
            ],
            "members": [
                {
                    "name": "display",
                    "doc": "A [`wl_display`](https://wayland.freedesktop.org/docs/html/apa.html#protocol-spec-wl_display) for this Wayland instance.",
                    "type": "c_void",
                    "pointer": "mutable"
                },
                {
                    "name": "surface",
                    "doc": "A [`wl_surface`](https://wayland.freedesktop.org/docs/html/apa.html#protocol-spec-wl_surface) that will be wrapped by the @ref WGPUSurface",
                    "type": "c_void",
                    "pointer": "mutable"
                }
            ]
        },
        {
            "name": "surface_source_windows_HWND",
            "doc": "Chained in @ref WGPUSurfaceDescriptor to make an @ref WGPUSurface wrapping a Windows [`HWND`](https://learn.microsoft.com/en-us/windows/apps/develop/ui-input/retrieve-hwnd).",
            "type": "extension_in",
            "extends": [
                "surface_descriptor"
            ],
            "members": [
                {
                    "name": "hinstance",
                    "doc": "The [`HINSTANCE`](https://learn.microsoft.com/en-us/windows/win32/learnwin32/winmain--the-application-entry-point) for this application.\nMost commonly `GetModuleHandle(nullptr)`.\n",
                    "type": "c_void",
                    "pointer": "mutable"
                },
                {
                    "name": "hwnd",
                    "doc": "The [`HWND`](https://learn.microsoft.com/en-us/windows/apps/develop/ui-input/retrieve-hwnd) that will be wrapped by the @ref WGPUSurface.",
                    "type": "c_void",
                    "pointer": "mutable"
                }
            ]
        },
        {
            "name": "surface_source_XCB_window",
            "doc": "Chained in @ref WGPUSurfaceDescriptor to make an @ref WGPUSurface wrapping an [XCB](https://xcb.freedesktop.org/) `xcb_window_t`.",
            "type": "extension_in",
            "extends": [
                "surface_descriptor"
            ],
            "members": [
                {
                    "name": "connection",
                    "doc": "The `xcb_connection_t` for the connection to the X server.",
                    "type": "c_void",
                    "pointer": "mutable"
                },
                {
                    "name": "window",
                    "doc": "The `xcb_window_t` for the window that will be wrapped by the @ref WGPUSurface.",
                    "type": "uint32"
                }
            ]
        },
        {
            "name": "surface_source_xlib_window",
            "doc": "Chained in @ref WGPUSurfaceDescriptor to make an @ref WGPUSurface wrapping an [Xlib](https://www.x.org/releases/current/doc/libX11/libX11/libX11.html) `Window`.",
            "type": "extension_in",
            "extends": [
                "surface_descriptor"
            ],
            "members": [
                {
                    "name": "display",
                    "doc": "A pointer to the [`Display`](https://www.x.org/releases/current/doc/libX11/libX11/libX11.html#Opening_the_Display) connected to the X server.",
                    "type": "c_void",
                    "pointer": "mutable"
                },
                {
                    "name": "window",
                    "doc": "The [`Window`](https://www.x.org/releases/current/doc/libX11/libX11/libX11.html#Creating_Windows) that will be wrapped by the @ref WGPUSurface.",
                    "type": "uint64"
                }
            ]
        },
        {
            "name": "surface_texture",
            "doc": "Queried each frame from a @ref WGPUSurface to get a @ref WGPUTexture to render to along with some metadata.\nSee @ref Surface-Presenting for more details.\n",
            "type": "base_out",
            "members": [
                {
                    "name": "texture",
                    "doc": "The @ref WGPUTexture representing the frame that will be shown on the surface.\nIt is @ref ReturnedWithOwnership from @ref wgpuSurfaceGetCurrentTexture.\n",
                    "type": "object.texture"
                },
                {
                    "name": "status",
                    "doc": "Whether the call to @ref wgpuSurfaceGetCurrentTexture succeeded and a hint as to why it might not have.",
                    "type": "enum.surface_get_current_texture_status"
                }
            ]
        },
        {
            "name": "texel_copy_buffer_info",
            "doc": "TODO\n",
            "type": "standalone",
            "members": [
                {
                    "name": "layout",
                    "doc": "TODO\n",
                    "type": "struct.texel_copy_buffer_layout"
                },
                {
                    "name": "buffer",
                    "doc": "TODO\n",
                    "type": "object.buffer"
                }
            ]
        },
        {
            "name": "texel_copy_buffer_layout",
            "doc": "TODO\n",
            "type": "standalone",
            "members": [
                {
                    "name": "offset",
                    "doc": "TODO\n",
                    "type": "uint64",
                    "default": 0
                },
                {
                    "name": "bytes_per_row",
                    "doc": "TODO\n",
                    "type": "uint32",
                    "default": "constant.copy_stride_undefined"
                },
                {
                    "name": "rows_per_image",
                    "doc": "TODO\n",
                    "type": "uint32",
                    "default": "constant.copy_stride_undefined"
                }
            ]
        },
        {
            "name": "texel_copy_texture_info",
            "doc": "TODO\n",
            "type": "standalone",
            "members": [
                {
                    "name": "texture",
                    "doc": "TODO\n",
                    "type": "object.texture"
                },
                {
                    "name": "mip_level",
                    "doc": "TODO\n",
                    "type": "uint32",
                    "default": 0
                },
                {
                    "name": "origin",
                    "doc": "TODO\n",
                    "type": "struct.origin_3D"
                },
                {
                    "name": "aspect",
                    "doc": "If set to @ref WGPUTextureAspect_Undefined,\n[defaults](@ref SentinelValues) to @ref WGPUTextureAspect_All.\n",
                    "type": "enum.texture_aspect",
                    "default": "undefined"
                }
            ]
        },
        {
            "name": "texture_binding_layout",
            "doc": "TODO\n",
            "type": "base_in",
            "members": [
                {
                    "name": "sample_type",
                    "doc": "If set to @ref WGPUTextureSampleType_Undefined,\n[defaults](@ref SentinelValues) to @ref WGPUTextureSampleType_Float.\n",
                    "type": "enum.texture_sample_type",
                    "default": "binding_not_used"
                },
                {
                    "name": "view_dimension",
                    "doc": "If set to @ref WGPUTextureViewDimension_Undefined,\n[defaults](@ref SentinelValues) to @ref WGPUTextureViewDimension_2D.\n",
                    "type": "enum.texture_view_dimension",
                    "default": "undefined"
                },
                {
                    "name": "multisampled",
                    "doc": "TODO\n",
                    "type": "bool",
                    "default": false
                }
            ]
        },
        {
            "name": "texture_descriptor",
            "doc": "TODO\n",
            "type": "base_in",
            "members": [
                {
                    "name": "label",
                    "doc": "TODO\n",
                    "type": "string_with_default_empty"
                },
                {
                    "name": "usage",
                    "doc": "TODO\n",
                    "type": "bitflag.texture_usage",
                    "default": "none"
                },
                {
                    "name": "dimension",
                    "doc": "If set to @ref WGPUTextureDimension_Undefined,\n[defaults](@ref SentinelValues) to @ref WGPUTextureDimension_2D.\n",
                    "type": "enum.texture_dimension",
                    "default": "undefined"
                },
                {
                    "name": "size",
                    "doc": "TODO\n",
                    "type": "struct.extent_3D"
                },
                {
                    "name": "format",
                    "doc": "TODO\n",
                    "type": "enum.texture_format",
                    "default": "undefined"
                },
                {
                    "name": "mip_level_count",
                    "doc": "TODO\n",
                    "type": "uint32",
                    "default": 1
                },
                {
                    "name": "sample_count",
                    "doc": "TODO\n",
                    "type": "uint32",
                    "default": 1
                },
                {
                    "name": "view_formats",
                    "doc": "TODO\n",
                    "type": "array<enum.texture_format>",
                    "pointer": "immutable"
                }
            ]
        },
        {
            "name": "texture_view_descriptor",
            "doc": "TODO\n",
            "type": "base_in",
            "members": [
                {
                    "name": "label",
                    "doc": "TODO\n",
                    "type": "string_with_default_empty"
                },
                {
                    "name": "format",
                    "doc": "TODO\n",
                    "type": "enum.texture_format",
                    "default": "undefined"
                },
                {
                    "name": "dimension",
                    "doc": "TODO\n",
                    "type": "enum.texture_view_dimension",
                    "default": "undefined"
                },
                {
                    "name": "base_mip_level",
                    "doc": "TODO\n",
                    "type": "uint32",
                    "default": 0
                },
                {
                    "name": "mip_level_count",
                    "doc": "TODO\n",
                    "type": "uint32",
                    "default": "constant.mip_level_count_undefined"
                },
                {
                    "name": "base_array_layer",
                    "doc": "TODO\n",
                    "type": "uint32",
                    "default": 0
                },
                {
                    "name": "array_layer_count",
                    "doc": "TODO\n",
                    "type": "uint32",
                    "default": "constant.array_layer_count_undefined"
                },
                {
                    "name": "aspect",
                    "doc": "If set to @ref WGPUTextureAspect_Undefined,\n[defaults](@ref SentinelValues) to @ref WGPUTextureAspect_All.\n",
                    "type": "enum.texture_aspect",
                    "default": "undefined"
                },
                {
                    "name": "usage",
                    "doc": "TODO\n",
                    "type": "bitflag.texture_usage",
                    "default": "none"
                }
            ]
        },
        {
            "name": "vertex_attribute",
            "doc": "TODO\n",
            "type": "base_in",
            "members": [
                {
                    "name": "format",
                    "doc": "TODO\n",
                    "type": "enum.vertex_format"
                },
                {
                    "name": "offset",
                    "doc": "TODO\n",
                    "type": "uint64"
                },
                {
                    "name": "shader_location",
                    "doc": "TODO\n",
                    "type": "uint32"
                }
            ]
        },
        {
            "name": "vertex_buffer_layout",
            "doc": "If `attributes` is empty *and* `stepMode` is @ref WGPUVertexStepMode_Undefined,\nindicates a \"hole\" in the parent @ref WGPUVertexState `buffers` array,\nwith behavior equivalent to `null` in the JS API.\n\nIf `attributes` is empty but `stepMode` is *not* @ref WGPUVertexStepMode_Undefined,\nindicates a vertex buffer with no attributes, with behavior equivalent to\n`{ attributes: [] }` in the JS API. (TODO: If the JS API changes not to\ndistinguish these cases, then this distinction doesn't matter and we can\nremove this documentation.)\n\nIf `stepMode` is @ref WGPUVertexStepMode_Undefined but `attributes` is *not* empty,\n`stepMode` [defaults](@ref SentinelValues) to @ref WGPUVertexStepMode_Vertex.\n",
            "type": "base_in",
            "members": [
                {
                    "name": "step_mode",
                    "doc": "TODO\n",
                    "type": "enum.vertex_step_mode",
                    "default": "undefined"
                },
                {
                    "name": "array_stride",
                    "doc": "TODO\n",
                    "type": "uint64"
                },
                {
                    "name": "attributes",
                    "doc": "TODO\n",
                    "type": "array<struct.vertex_attribute>",
                    "pointer": "immutable"
                }
            ]
        },
        {
            "name": "vertex_state",
            "doc": "TODO\n",
            "type": "base_in",
            "members": [
                {
                    "name": "module",
                    "doc": "TODO\n",
                    "type": "object.shader_module"
                },
                {
                    "name": "entry_point",
                    "doc": "TODO\n",
                    "type": "nullable_string"
                },
                {
                    "name": "constants",
                    "doc": "TODO\n",
                    "type": "array<struct.constant_entry>",
                    "pointer": "immutable"
                },
                {
                    "name": "buffers",
                    "doc": "TODO\n",
                    "type": "array<struct.vertex_buffer_layout>",
                    "pointer": "immutable"
                }
            ]
        }
    ],
    "callbacks": [
        {
            "name": "buffer_map",
            "doc": "TODO\n",
            "style": "callback_mode",
            "args": [
                {
                    "name": "status",
                    "doc": "TODO\n",
                    "type": "enum.map_async_status"
                },
                {
                    "name": "message",
                    "doc": "TODO\n",
                    "type": "out_string",
                    "passed_with_ownership": false
                }
            ]
        },
        {
            "name": "compilation_info",
            "doc": "TODO\n",
            "style": "callback_mode",
            "args": [
                {
                    "name": "status",
                    "doc": "TODO\n",
                    "type": "enum.compilation_info_request_status"
                },
                {
                    "name": "compilation_info",
                    "doc": "TODO\n",
                    "type": "struct.compilation_info",
                    "pointer": "immutable",
                    "passed_with_ownership": false
                }
            ]
        },
        {
            "name": "create_compute_pipeline_async",
            "doc": "TODO\n",
            "style": "callback_mode",
            "args": [
                {
                    "name": "status",
                    "doc": "TODO\n",
                    "type": "enum.create_pipeline_async_status"
                },
                {
                    "name": "pipeline",
                    "doc": "TODO\n",
                    "type": "object.compute_pipeline",
                    "passed_with_ownership": true
                },
                {
                    "name": "message",
                    "doc": "TODO\n",
                    "type": "out_string"
                }
            ]
        },
        {
            "name": "create_render_pipeline_async",
            "doc": "TODO\n",
            "style": "callback_mode",
            "args": [
                {
                    "name": "status",
                    "doc": "TODO\n",
                    "type": "enum.create_pipeline_async_status"
                },
                {
                    "name": "pipeline",
                    "doc": "TODO\n",
                    "type": "object.render_pipeline",
                    "passed_with_ownership": true
                },
                {
                    "name": "message",
                    "doc": "TODO\n",
                    "type": "out_string"
                }
            ]
        },
        {
            "name": "device_lost",
            "doc": "TODO",
            "style": "callback_mode",
            "args": [
                {
                    "name": "device",
                    "doc": "Reference to the device which was lost. If, and only if, the `reason` is @ref WGPUDeviceLostReason_FailedCreation, this is a non-null pointer to a null @ref WGPUDevice.\n",
                    "type": "object.device",
                    "pointer": "immutable",
                    "passed_with_ownership": false
                },
                {
                    "name": "reason",
                    "doc": "TODO\n",
                    "type": "enum.device_lost_reason"
                },
                {
                    "name": "message",
                    "doc": "TODO\n",
                    "type": "out_string",
                    "passed_with_ownership": false
                }
            ]
        },
        {
            "name": "pop_error_scope",
            "doc": "TODO\n",
            "style": "callback_mode",
            "args": [
                {
                    "name": "status",
                    "doc": "See @ref WGPUPopErrorScopeStatus.\n",
                    "type": "enum.pop_error_scope_status"
                },
                {
                    "name": "type",
                    "doc": "The type of the error caught by the scope, or @ref WGPUErrorType_NoError if there was none.\nIf the `status` is not @ref WGPUPopErrorScopeStatus_Success, this is @ref WGPUErrorType_NoError.\n",
                    "type": "enum.error_type"
                },
                {
                    "name": "message",
                    "doc": "If the `status` is not @ref WGPUPopErrorScopeStatus_Success **or**\nthe `type` is not @ref WGPUErrorType_NoError, this is a non-empty\n@ref LocalizableHumanReadableMessageString;\notherwise, this is an empty string.\n",
                    "type": "out_string",
                    "passed_with_ownership": false
                }
            ]
        },
        {
            "name": "queue_work_done",
            "doc": "TODO\n",
            "style": "callback_mode",
            "args": [
                {
                    "name": "status",
                    "doc": "TODO\n",
                    "type": "enum.queue_work_done_status"
                }
            ]
        },
        {
            "name": "request_adapter",
            "doc": "TODO\n",
            "style": "callback_mode",
            "args": [
                {
                    "name": "status",
                    "doc": "TODO\n",
                    "type": "enum.request_adapter_status"
                },
                {
                    "name": "adapter",
                    "doc": "TODO\n",
                    "type": "object.adapter",
                    "passed_with_ownership": true
                },
                {
                    "name": "message",
                    "doc": "TODO\n",
                    "type": "out_string",
                    "passed_with_ownership": false
                }
            ]
        },
        {
            "name": "request_device",
            "doc": "TODO\n",
            "style": "callback_mode",
            "args": [
                {
                    "name": "status",
                    "doc": "TODO\n",
                    "type": "enum.request_device_status"
                },
                {
                    "name": "device",
                    "doc": "TODO\n",
                    "type": "object.device",
                    "passed_with_ownership": true
                },
                {
                    "name": "message",
                    "doc": "TODO\n",
                    "type": "out_string",
                    "passed_with_ownership": false
                }
            ]
        },
        {
            "name": "uncaptured_error",
            "doc": "TODO\n",
            "style": "immediate",
            "args": [
                {
                    "name": "device",
                    "doc": "TODO\n",
                    "type": "object.device",
                    "pointer": "immutable",
                    "passed_with_ownership": false
                },
                {
                    "name": "type",
                    "doc": "TODO\n",
                    "type": "enum.error_type"
                },
                {
                    "name": "message",
                    "doc": "TODO\n",
                    "type": "out_string",
                    "passed_with_ownership": false
                }
            ]
        }
    ],
    "functions": [
        {
            "name": "create_instance",
            "doc": "Create a WGPUInstance",
            "returns": {
                "doc": "TODO\n",
                "type": "object.instance",
                "passed_with_ownership": true
            },
            "args": [
                {
                    "name": "descriptor",
                    "doc": "TODO\n",
                    "type": "struct.instance_descriptor",
                    "pointer": "immutable",
                    "optional": true
                }
            ]
        },
        {
            "name": "get_instance_capabilities",
            "doc": "Query the supported instance capabilities.",
            "returns": {
                "doc": "Indicates if there was an @ref OutStructChainError.",
                "type": "enum.status"
            },
            "args": [
                {
                    "name": "capabilities",
                    "doc": "The supported instance capabilities",
                    "type": "struct.instance_capabilities",
                    "pointer": "mutable"
                }
            ]
        }
    ],
    "objects": [
        {
            "name": "adapter",
            "doc": "TODO\n",
            "methods": [
                {
                    "name": "get_limits",
                    "doc": "TODO\n",
                    "returns": {
                        "doc": "Indicates if there was an @ref OutStructChainError.",
                        "type": "enum.status"
                    },
                    "args": [
                        {
                            "name": "limits",
                            "doc": "TODO\n",
                            "type": "struct.limits",
                            "pointer": "mutable"
                        }
                    ]
                },
                {
                    "name": "has_feature",
                    "doc": "TODO\n",
                    "returns": {
                        "doc": "TODO\n",
                        "type": "bool"
                    },
                    "args": [
                        {
                            "name": "feature",
                            "doc": "TODO\n",
                            "type": "enum.feature_name"
                        }
                    ]
                },
                {
                    "name": "get_features",
                    "doc": "Get the list of @ref WGPUFeatureName values supported by the adapter.\n",
                    "args": [
                        {
                            "name": "features",
                            "doc": "TODO\n",
                            "type": "struct.supported_features",
                            "pointer": "mutable",
                            "passed_with_ownership": true
                        }
                    ]
                },
                {
                    "name": "get_info",
                    "doc": "TODO\n",
                    "returns": {
                        "doc": "Indicates if there was an @ref OutStructChainError.",
                        "type": "enum.status"
                    },
                    "args": [
                        {
                            "name": "info",
                            "doc": "TODO\n",
                            "type": "struct.adapter_info",
                            "pointer": "mutable",
                            "passed_with_ownership": true
                        }
                    ]
                },
                {
                    "name": "request_device",
                    "doc": "TODO\n",
                    "callback": "callback.request_device",
                    "args": [
                        {
                            "name": "descriptor",
                            "doc": "TODO\n",
                            "type": "struct.device_descriptor",
                            "pointer": "immutable",
                            "optional": true
                        }
                    ]
                }
            ]
        },
        {
            "name": "bind_group",
            "doc": "TODO\n",
            "methods": [
                {
                    "name": "set_label",
                    "doc": "TODO\n",
                    "args": [
                        {
                            "name": "label",
                            "doc": "TODO\n",
                            "type": "string_with_default_empty"
                        }
                    ]
                }
            ]
        },
        {
            "name": "bind_group_layout",
            "doc": "TODO\n",
            "methods": [
                {
                    "name": "set_label",
                    "doc": "TODO\n",
                    "args": [
                        {
                            "name": "label",
                            "doc": "TODO\n",
                            "type": "string_with_default_empty"
                        }
                    ]
                }
            ]
        },
        {
            "name": "buffer",
            "doc": "TODO\n",
            "methods": [
                {
                    "name": "map_async",
                    "doc": "TODO\n",
                    "callback": "callback.buffer_map",
                    "args": [
                        {
                            "name": "mode",
                            "doc": "TODO\n",
                            "type": "bitflag.map_mode"
                        },
                        {
                            "name": "offset",
                            "doc": "TODO\n",
                            "type": "usize"
                        },
                        {
                            "name": "size",
                            "doc": "TODO\n",
                            "type": "usize"
                        }
                    ]
                },
                {
                    "name": "get_mapped_range",
                    "doc": "TODO\n",
                    "returns": {
                        "doc": "Returns a mutable pointer to beginning of the mapped range.\nReturns `NULL` with @ref ImplementationDefinedLogging if:\n\n- There is any content-timeline error as defined in the WebGPU specification for `getMappedRange()` (alignments, overlaps, etc.)\n- The buffer is not mapped with @ref WGPUMapMode_Write.\n",
                        "type": "c_void",
                        "pointer": "mutable"
                    },
                    "args": [
                        {
                            "name": "offset",
                            "doc": "Byte offset relative to the beginning of the buffer.\n",
                            "type": "usize"
                        },
                        {
                            "name": "size",
                            "doc": "Byte size of the range to get. The returned pointer is valid for exactly this many bytes.\n",
                            "type": "usize"
                        }
                    ]
                },
                {
                    "name": "get_const_mapped_range",
                    "doc": "TODO\n",
                    "returns": {
                        "doc": "Returns a const pointer to beginning of the mapped range.\nIt must not be written; writing to this range causes undefined behavior.\nReturns `NULL` with @ref ImplementationDefinedLogging if:\n\n- There is any content-timeline error as defined in the WebGPU specification for `getMappedRange()` (alignments, overlaps, etc.)\n  **except** for overlaps with other *const* ranges, which are allowed in C.\n  (JS does not allow this because const ranges do not exist.)\n",
                        "type": "c_void",
                        "pointer": "immutable"
                    },
                    "args": [
                        {
                            "name": "offset",
                            "doc": "Byte offset relative to the beginning of the buffer.\n",
                            "type": "usize"
                        },
                        {
                            "name": "size",
                            "doc": "Byte size of the range to get. The returned pointer is valid for exactly this many bytes.\n",
                            "type": "usize"
                        }
                    ]
                },
                {
                    "name": "set_label",
                    "doc": "TODO\n",
                    "args": [
                        {
                            "name": "label",
                            "doc": "TODO\n",
                            "type": "string_with_default_empty"
                        }
                    ]
                },
                {
                    "name": "get_usage",
                    "doc": "TODO\n",
                    "returns": {
                        "doc": "TODO\n",
                        "type": "bitflag.buffer_usage"
                    }
                },
                {
                    "name": "get_size",
                    "doc": "TODO\n",
                    "returns": {
                        "doc": "TODO\n",
                        "type": "uint64"
                    }
                },
                {
                    "name": "get_map_state",
                    "doc": "TODO\n",
                    "returns": {
                        "doc": "TODO\n",
                        "type": "enum.buffer_map_state"
                    }
                },
                {
                    "name": "unmap",
                    "doc": "TODO\n"
                },
                {
                    "name": "destroy",
                    "doc": "TODO\n"
                }
            ]
        },
        {
            "name": "command_buffer",
            "doc": "TODO\n",
            "methods": [
                {
                    "name": "set_label",
                    "doc": "TODO\n",
                    "args": [
                        {
                            "name": "label",
                            "doc": "TODO\n",
                            "type": "string_with_default_empty"
                        }
                    ]
                }
            ]
        },
        {
            "name": "command_encoder",
            "doc": "TODO\n",
            "methods": [
                {
                    "name": "finish",
                    "doc": "TODO\n",
                    "returns": {
                        "doc": "TODO\n",
                        "type": "object.command_buffer",
                        "passed_with_ownership": true
                    },
                    "args": [
                        {
                            "name": "descriptor",
                            "doc": "TODO\n",
                            "type": "struct.command_buffer_descriptor",
                            "pointer": "immutable",
                            "optional": true
                        }
                    ]
                },
                {
                    "name": "begin_compute_pass",
                    "doc": "TODO\n",
                    "returns": {
                        "doc": "TODO\n",
                        "type": "object.compute_pass_encoder",
                        "passed_with_ownership": true
                    },
                    "args": [
                        {
                            "name": "descriptor",
                            "doc": "TODO\n",
                            "type": "struct.compute_pass_descriptor",
                            "pointer": "immutable",
                            "optional": true
                        }
                    ]
                },
                {
                    "name": "begin_render_pass",
                    "doc": "TODO\n",
                    "returns": {
                        "doc": "TODO\n",
                        "type": "object.render_pass_encoder",
                        "passed_with_ownership": true
                    },
                    "args": [
                        {
                            "name": "descriptor",
                            "doc": "TODO\n",
                            "type": "struct.render_pass_descriptor",
                            "pointer": "immutable"
                        }
                    ]
                },
                {
                    "name": "copy_buffer_to_buffer",
                    "doc": "TODO\n",
                    "args": [
                        {
                            "name": "source",
                            "doc": "TODO\n",
                            "type": "object.buffer"
                        },
                        {
                            "name": "source_offset",
                            "doc": "TODO\n",
                            "type": "uint64"
                        },
                        {
                            "name": "destination",
                            "doc": "TODO\n",
                            "type": "object.buffer"
                        },
                        {
                            "name": "destination_offset",
                            "doc": "TODO\n",
                            "type": "uint64"
                        },
                        {
                            "name": "size",
                            "doc": "TODO\n",
                            "type": "uint64"
                        }
                    ]
                },
                {
                    "name": "copy_buffer_to_texture",
                    "doc": "TODO\n",
                    "args": [
                        {
                            "name": "source",
                            "doc": "TODO\n",
                            "type": "struct.texel_copy_buffer_info",
                            "pointer": "immutable"
                        },
                        {
                            "name": "destination",
                            "doc": "TODO\n",
                            "type": "struct.texel_copy_texture_info",
                            "pointer": "immutable"
                        },
                        {
                            "name": "copy_size",
                            "doc": "TODO\n",
                            "type": "struct.extent_3D",
                            "pointer": "immutable"
                        }
                    ]
                },
                {
                    "name": "copy_texture_to_buffer",
                    "doc": "TODO\n",
                    "args": [
                        {
                            "name": "source",
                            "doc": "TODO\n",
                            "type": "struct.texel_copy_texture_info",
                            "pointer": "immutable"
                        },
                        {
                            "name": "destination",
                            "doc": "TODO\n",
                            "type": "struct.texel_copy_buffer_info",
                            "pointer": "immutable"
                        },
                        {
                            "name": "copy_size",
                            "doc": "TODO\n",
                            "type": "struct.extent_3D",
                            "pointer": "immutable"
                        }
                    ]
                },
                {
                    "name": "copy_texture_to_texture",
                    "doc": "TODO\n",
                    "args": [
                        {
                            "name": "source",
                            "doc": "TODO\n",
                            "type": "struct.texel_copy_texture_info",
                            "pointer": "immutable"
                        },
                        {
                            "name": "destination",
                            "doc": "TODO\n",
                            "type": "struct.texel_copy_texture_info",
                            "pointer": "immutable"
                        },
                        {
                            "name": "copy_size",
                            "doc": "TODO\n",
                            "type": "struct.extent_3D",
                            "pointer": "immutable"
                        }
                    ]
                },
                {
                    "name": "clear_buffer",
                    "doc": "TODO\n",
                    "args": [
                        {
                            "name": "buffer",
                            "doc": "TODO\n",
                            "type": "object.buffer"
                        },
                        {
                            "name": "offset",
                            "doc": "TODO\n",
                            "type": "uint64"
                        },
                        {
                            "name": "size",
                            "doc": "TODO\n",
                            "type": "uint64"
                        }
                    ]
                },
                {
                    "name": "insert_debug_marker",
                    "doc": "TODO\n",
                    "args": [
                        {
                            "name": "marker_label",
                            "doc": "TODO\n",
                            "type": "string_with_default_empty"
                        }
                    ]
                },
                {
                    "name": "pop_debug_group",
                    "doc": "TODO\n"
                },
                {
                    "name": "push_debug_group",
                    "doc": "TODO\n",
                    "args": [
                        {
                            "name": "group_label",
                            "doc": "TODO\n",
                            "type": "string_with_default_empty"
                        }
                    ]
                },
                {
                    "name": "resolve_query_set",
                    "doc": "TODO\n",
                    "args": [
                        {
                            "name": "query_set",
                            "doc": "TODO\n",
                            "type": "object.query_set"
                        },
                        {
                            "name": "first_query",
                            "doc": "TODO\n",
                            "type": "uint32"
                        },
                        {
                            "name": "query_count",
                            "doc": "TODO\n",
                            "type": "uint32"
                        },
                        {
                            "name": "destination",
                            "doc": "TODO\n",
                            "type": "object.buffer"
                        },
                        {
                            "name": "destination_offset",
                            "doc": "TODO\n",
                            "type": "uint64"
                        }
                    ]
                },
                {
                    "name": "write_timestamp",
                    "doc": "TODO\n",
                    "args": [
                        {
                            "name": "query_set",
                            "doc": "TODO\n",
                            "type": "object.query_set"
                        },
                        {
                            "name": "query_index",
                            "doc": "TODO\n",
                            "type": "uint32"
                        }
                    ]
                },
                {
                    "name": "set_label",
                    "doc": "TODO\n",
                    "args": [
                        {
                            "name": "label",
                            "doc": "TODO\n",
                            "type": "string_with_default_empty"
                        }
                    ]
                }
            ]
        },
        {
            "name": "compute_pass_encoder",
            "doc": "TODO\n",
            "methods": [
                {
                    "name": "insert_debug_marker",
                    "doc": "TODO\n",
                    "args": [
                        {
                            "name": "marker_label",
                            "doc": "TODO\n",
                            "type": "string_with_default_empty"
                        }
                    ]
                },
                {
                    "name": "pop_debug_group",
                    "doc": "TODO\n"
                },
                {
                    "name": "push_debug_group",
                    "doc": "TODO\n",
                    "args": [
                        {
                            "name": "group_label",
                            "doc": "TODO\n",
                            "type": "string_with_default_empty"
                        }
                    ]
                },
                {
                    "name": "set_pipeline",
                    "doc": "TODO\n",
                    "args": [
                        {
                            "name": "pipeline",
                            "doc": "TODO\n",
                            "type": "object.compute_pipeline"
                        }
                    ]
                },
                {
                    "name": "set_bind_group",
                    "doc": "TODO\n",
                    "args": [
                        {
                            "name": "group_index",
                            "doc": "TODO\n",
                            "type": "uint32"
                        },
                        {
                            "name": "group",
                            "doc": "TODO\n",
                            "type": "object.bind_group",
                            "optional": true
                        },
                        {
                            "name": "dynamic_offsets",
                            "doc": "TODO\n",
                            "type": "array<uint32>",
                            "pointer": "immutable"
                        }
                    ]
                },
                {
                    "name": "dispatch_workgroups",
                    "doc": "TODO\n",
                    "args": [
                        {
                            "name": "workgroupCountX",
                            "doc": "TODO\n",
                            "type": "uint32"
                        },
                        {
                            "name": "workgroupCountY",
                            "doc": "TODO\n",
                            "type": "uint32"
                        },
                        {
                            "name": "workgroupCountZ",
                            "doc": "TODO\n",
                            "type": "uint32"
                        }
                    ]
                },
                {
                    "name": "dispatch_workgroups_indirect",
                    "doc": "TODO\n",
                    "args": [
                        {
                            "name": "indirect_buffer",
                            "doc": "TODO\n",
                            "type": "object.buffer"
                        },
                        {
                            "name": "indirect_offset",
                            "doc": "TODO\n",
                            "type": "uint64"
                        }
                    ]
                },
                {
                    "name": "end",
                    "doc": "TODO\n"
                },
                {
                    "name": "set_label",
                    "doc": "TODO\n",
                    "args": [
                        {
                            "name": "label",
                            "doc": "TODO\n",
                            "type": "string_with_default_empty"
                        }
                    ]
                }
            ]
        },
        {
            "name": "compute_pipeline",
            "doc": "TODO\n",
            "methods": [
                {
                    "name": "get_bind_group_layout",
                    "doc": "TODO\n",
                    "returns": {
                        "doc": "TODO\n",
                        "type": "object.bind_group_layout",
                        "passed_with_ownership": true
                    },
                    "args": [
                        {
                            "name": "group_index",
                            "doc": "TODO\n",
                            "type": "uint32"
                        }
                    ]
                },
                {
                    "name": "set_label",
                    "doc": "TODO\n",
                    "args": [
                        {
                            "name": "label",
                            "doc": "TODO\n",
                            "type": "string_with_default_empty"
                        }
                    ]
                }
            ]
        },
        {
            "name": "device",
            "doc": "TODO\n",
            "methods": [
                {
                    "name": "create_bind_group",
                    "doc": "TODO\n",
                    "returns": {
                        "doc": "TODO\n",
                        "type": "object.bind_group",
                        "passed_with_ownership": true
                    },
                    "args": [
                        {
                            "name": "descriptor",
                            "doc": "TODO\n",
                            "type": "struct.bind_group_descriptor",
                            "pointer": "immutable"
                        }
                    ]
                },
                {
                    "name": "create_bind_group_layout",
                    "doc": "TODO\n",
                    "returns": {
                        "doc": "TODO\n",
                        "type": "object.bind_group_layout",
                        "passed_with_ownership": true
                    },
                    "args": [
                        {
                            "name": "descriptor",
                            "doc": "TODO\n",
                            "type": "struct.bind_group_layout_descriptor",
                            "pointer": "immutable"
                        }
                    ]
                },
                {
                    "name": "create_buffer",
                    "doc": "TODO\n",
                    "returns": {
                        "doc": "TODO\n",
                        "type": "object.buffer",
                        "passed_with_ownership": true
                    },
                    "args": [
                        {
                            "name": "descriptor",
                            "doc": "TODO\n",
                            "type": "struct.buffer_descriptor",
                            "pointer": "immutable"
                        }
                    ]
                },
                {
                    "name": "create_command_encoder",
                    "doc": "TODO\n",
                    "returns": {
                        "doc": "TODO\n",
                        "type": "object.command_encoder",
                        "passed_with_ownership": true
                    },
                    "args": [
                        {
                            "name": "descriptor",
                            "doc": "TODO\n",
                            "type": "struct.command_encoder_descriptor",
                            "pointer": "immutable",
                            "optional": true
                        }
                    ]
                },
                {
                    "name": "create_compute_pipeline",
                    "doc": "TODO\n",
                    "returns": {
                        "doc": "TODO\n",
                        "type": "object.compute_pipeline",
                        "passed_with_ownership": true
                    },
                    "args": [
                        {
                            "name": "descriptor",
                            "doc": "TODO\n",
                            "type": "struct.compute_pipeline_descriptor",
                            "pointer": "immutable"
                        }
                    ]
                },
                {
                    "name": "create_compute_pipeline_async",
                    "doc": "TODO\n",
                    "callback": "callback.create_compute_pipeline_async",
                    "args": [
                        {
                            "name": "descriptor",
                            "doc": "TODO\n",
                            "type": "struct.compute_pipeline_descriptor",
                            "pointer": "immutable"
                        }
                    ]
                },
                {
                    "name": "create_pipeline_layout",
                    "doc": "TODO\n",
                    "returns": {
                        "doc": "TODO\n",
                        "type": "object.pipeline_layout",
                        "passed_with_ownership": true
                    },
                    "args": [
                        {
                            "name": "descriptor",
                            "doc": "TODO\n",
                            "type": "struct.pipeline_layout_descriptor",
                            "pointer": "immutable"
                        }
                    ]
                },
                {
                    "name": "create_query_set",
                    "doc": "TODO\n",
                    "returns": {
                        "doc": "TODO\n",
                        "type": "object.query_set",
                        "passed_with_ownership": true
                    },
                    "args": [
                        {
                            "name": "descriptor",
                            "doc": "TODO\n",
                            "type": "struct.query_set_descriptor",
                            "pointer": "immutable"
                        }
                    ]
                },
                {
                    "name": "create_render_pipeline_async",
                    "doc": "TODO\n",
                    "callback": "callback.create_render_pipeline_async",
                    "args": [
                        {
                            "name": "descriptor",
                            "doc": "TODO\n",
                            "type": "struct.render_pipeline_descriptor",
                            "pointer": "immutable"
                        }
                    ]
                },
                {
                    "name": "create_render_bundle_encoder",
                    "doc": "TODO\n",
                    "returns": {
                        "doc": "TODO\n",
                        "type": "object.render_bundle_encoder",
                        "passed_with_ownership": true
                    },
                    "args": [
                        {
                            "name": "descriptor",
                            "doc": "TODO\n",
                            "type": "struct.render_bundle_encoder_descriptor",
                            "pointer": "immutable"
                        }
                    ]
                },
                {
                    "name": "create_render_pipeline",
                    "doc": "TODO\n",
                    "returns": {
                        "doc": "TODO\n",
                        "type": "object.render_pipeline",
                        "passed_with_ownership": true
                    },
                    "args": [
                        {
                            "name": "descriptor",
                            "doc": "TODO\n",
                            "type": "struct.render_pipeline_descriptor",
                            "pointer": "immutable"
                        }
                    ]
                },
                {
                    "name": "create_sampler",
                    "doc": "TODO\n",
                    "returns": {
                        "doc": "TODO\n",
                        "type": "object.sampler",
                        "passed_with_ownership": true
                    },
                    "args": [
                        {
                            "name": "descriptor",
                            "doc": "TODO\n",
                            "type": "struct.sampler_descriptor",
                            "pointer": "immutable",
                            "optional": true
                        }
                    ]
                },
                {
                    "name": "create_shader_module",
                    "doc": "TODO\n",
                    "returns": {
                        "doc": "TODO\n",
                        "type": "object.shader_module",
                        "passed_with_ownership": true
                    },
                    "args": [
                        {
                            "name": "descriptor",
                            "doc": "TODO\n",
                            "type": "struct.shader_module_descriptor",
                            "pointer": "immutable"
                        }
                    ]
                },
                {
                    "name": "create_texture",
                    "doc": "TODO\n",
                    "returns": {
                        "doc": "TODO\n",
                        "type": "object.texture",
                        "passed_with_ownership": true
                    },
                    "args": [
                        {
                            "name": "descriptor",
                            "doc": "TODO\n",
                            "type": "struct.texture_descriptor",
                            "pointer": "immutable"
                        }
                    ]
                },
                {
                    "name": "destroy",
                    "doc": "TODO\n"
                },
                {
                    "name": "get_lost_future",
                    "doc": "",
                    "returns": {
                        "doc": "The @ref WGPUFuture for the device-lost event of the device.\n",
                        "type": "struct.future"
                    }
                },
                {
                    "name": "get_limits",
                    "doc": "TODO\n",
                    "returns": {
                        "doc": "Indicates if there was an @ref OutStructChainError.",
                        "type": "enum.status"
                    },
                    "args": [
                        {
                            "name": "limits",
                            "doc": "TODO\n",
                            "type": "struct.limits",
                            "pointer": "mutable"
                        }
                    ]
                },
                {
                    "name": "has_feature",
                    "doc": "TODO\n",
                    "returns": {
                        "doc": "TODO\n",
                        "type": "bool"
                    },
                    "args": [
                        {
                            "name": "feature",
                            "doc": "TODO\n",
                            "type": "enum.feature_name"
                        }
                    ]
                },
                {
                    "name": "get_features",
                    "doc": "Get the list of @ref WGPUFeatureName values supported by the device.\n",
                    "args": [
                        {
                            "name": "features",
                            "doc": "TODO\n",
                            "type": "struct.supported_features",
                            "pointer": "mutable",
                            "passed_with_ownership": true
                        }
                    ]
                },
                {
                    "name": "get_adapter_info",
                    "doc": "TODO\n",
                    "returns": {
                        "doc": "Indicates if there was an @ref OutStructChainError.",
                        "type": "enum.status"
                    },
                    "args": [
                        {
                            "name": "adapter_info",
                            "doc": "TODO\n",
                            "type": "struct.adapter_info",
                            "pointer": "mutable",
                            "passed_with_ownership": true
                        }
                    ]
                },
                {
                    "name": "get_queue",
                    "doc": "TODO\n",
                    "returns": {
                        "doc": "TODO\n",
                        "type": "object.queue",
                        "passed_with_ownership": true
                    }
                },
                {
                    "name": "push_error_scope",
                    "doc": "Pushes an error scope to the current thread's error scope stack.\nSee @ref ErrorScopes.\n",
                    "args": [
                        {
                            "name": "filter",
                            "doc": "TODO\n",
                            "type": "enum.error_filter"
                        }
                    ]
                },
                {
                    "name": "pop_error_scope",
                    "doc": "Pops an error scope to the current thread's error scope stack,\nasynchronously returning the result. See @ref ErrorScopes.\n",
                    "callback": "callback.pop_error_scope"
                },
                {
                    "name": "set_label",
                    "doc": "TODO\n",
                    "args": [
                        {
                            "name": "label",
                            "doc": "TODO\n",
                            "type": "string_with_default_empty"
                        }
                    ]
                }
            ]
        },
        {
            "name": "instance",
            "doc": "TODO\n",
            "methods": [
                {
                    "name": "create_surface",
                    "doc": "Creates a @ref WGPUSurface, see @ref Surface-Creation for more details.",
                    "returns": {
                        "doc": "A new @ref WGPUSurface for this descriptor (or an error @ref WGPUSurface).",
                        "type": "object.surface",
                        "passed_with_ownership": true
                    },
                    "args": [
                        {
                            "name": "descriptor",
                            "doc": "The description of the @ref WGPUSurface to create.",
                            "type": "struct.surface_descriptor",
                            "pointer": "immutable"
                        }
                    ]
                },
                {
                    "name": "get_WGSL_language_features",
                    "doc": "Get the list of @ref WGPUWGSLLanguageFeatureName values supported by the instance.\n",
                    "returns": {
                        "doc": "TODO\n",
                        "type": "enum.status"
                    },
                    "args": [
                        {
                            "name": "features",
                            "doc": "TODO\n",
                            "type": "struct.supported_WGSL_language_features",
                            "pointer": "mutable"
                        }
                    ]
                },
                {
                    "name": "has_WGSL_language_feature",
                    "doc": "TODO\n",
                    "returns": {
                        "doc": "TODO\n",
                        "type": "bool"
                    },
                    "args": [
                        {
                            "name": "feature",
                            "doc": "TODO\n",
                            "type": "enum.WGSL_language_feature_name"
                        }
                    ]
                },
                {
                    "name": "process_events",
                    "doc": "Processes asynchronous events on this `WGPUInstance`, calling any callbacks for asynchronous operations created with @ref WGPUCallbackMode_AllowProcessEvents.\n\nSee @ref Process-Events for more information.\n"
                },
                {
                    "name": "request_adapter",
                    "doc": "TODO\n",
                    "callback": "callback.request_adapter",
                    "args": [
                        {
                            "name": "options",
                            "doc": "TODO\n",
                            "type": "struct.request_adapter_options",
                            "pointer": "immutable",
                            "optional": true
                        }
                    ]
                },
                {
                    "name": "wait_any",
                    "doc": "Wait for at least one WGPUFuture in `futures` to complete, and call callbacks of the respective completed asynchronous operations.\n\nSee @ref Wait-Any for more information.\n",
                    "returns": {
                        "doc": "TODO\n",
                        "type": "enum.wait_status"
                    },
                    "args": [
                        {
                            "name": "future_count",
                            "doc": "TODO\n",
                            "type": "usize"
                        },
                        {
                            "name": "futures",
                            "doc": "TODO\n",
                            "type": "struct.future_wait_info",
                            "pointer": "mutable",
                            "optional": true
                        },
                        {
                            "name": "timeout_NS",
                            "doc": "TODO\n",
                            "type": "uint64"
                        }
                    ]
                }
            ]
        },
        {
            "name": "pipeline_layout",
            "doc": "TODO\n",
            "methods": [
                {
                    "name": "set_label",
                    "doc": "TODO\n",
                    "args": [
                        {
                            "name": "label",
                            "doc": "TODO\n",
                            "type": "string_with_default_empty"
                        }
                    ]
                }
            ]
        },
        {
            "name": "query_set",
            "doc": "TODO\n",
            "methods": [
                {
                    "name": "set_label",
                    "doc": "TODO\n",
                    "args": [
                        {
                            "name": "label",
                            "doc": "TODO\n",
                            "type": "string_with_default_empty"
                        }
                    ]
                },
                {
                    "name": "get_type",
                    "doc": "TODO\n",
                    "returns": {
                        "doc": "TODO\n",
                        "type": "enum.query_type"
                    }
                },
                {
                    "name": "get_count",
                    "doc": "TODO\n",
                    "returns": {
                        "doc": "TODO\n",
                        "type": "uint32"
                    }
                },
                {
                    "name": "destroy",
                    "doc": "TODO\n"
                }
            ]
        },
        {
            "name": "queue",
            "doc": "TODO\n",
            "methods": [
                {
                    "name": "submit",
                    "doc": "TODO\n",
                    "args": [
                        {
                            "name": "commands",
                            "doc": "TODO\n",
                            "type": "array<object.command_buffer>",
                            "pointer": "immutable"
                        }
                    ]
                },
                {
                    "name": "on_submitted_work_done",
                    "doc": "TODO\n",
                    "callback": "callback.queue_work_done"
                },
                {
                    "name": "write_buffer",
                    "doc": "Produces a @ref DeviceError both content-timeline (`size` alignment) and device-timeline\nerrors defined by the WebGPU specification.\n",
                    "args": [
                        {
                            "name": "buffer",
                            "doc": "TODO\n",
                            "type": "object.buffer"
                        },
                        {
                            "name": "buffer_offset",
                            "doc": "TODO\n",
                            "type": "uint64"
                        },
                        {
                            "name": "data",
                            "doc": "TODO\n",
                            "type": "c_void",
                            "pointer": "immutable"
                        },
                        {
                            "name": "size",
                            "doc": "TODO\n",
                            "type": "usize"
                        }
                    ]
                },
                {
                    "name": "write_texture",
                    "doc": "TODO\n",
                    "args": [
                        {
                            "name": "destination",
                            "doc": "TODO\n",
                            "type": "struct.texel_copy_texture_info",
                            "pointer": "immutable"
                        },
                        {
                            "name": "data",
                            "doc": "TODO\n",
                            "type": "c_void",
                            "pointer": "immutable"
                        },
                        {
                            "name": "data_size",
                            "doc": "TODO\n",
                            "type": "usize"
                        },
                        {
                            "name": "data_layout",
                            "doc": "TODO\n",
                            "type": "struct.texel_copy_buffer_layout",
                            "pointer": "immutable"
                        },
                        {
                            "name": "write_size",
                            "doc": "TODO\n",
                            "type": "struct.extent_3D",
                            "pointer": "immutable"
                        }
                    ]
                },
                {
                    "name": "set_label",
                    "doc": "TODO\n",
                    "args": [
                        {
                            "name": "label",
                            "doc": "TODO\n",
                            "type": "string_with_default_empty"
                        }
                    ]
                }
            ]
        },
        {
            "name": "render_bundle",
            "doc": "TODO\n",
            "methods": [
                {
                    "name": "set_label",
                    "doc": "TODO\n",
                    "args": [
                        {
                            "name": "label",
                            "doc": "TODO\n",
                            "type": "string_with_default_empty"
                        }
                    ]
                }
            ]
        },
        {
            "name": "render_bundle_encoder",
            "doc": "TODO\n",
            "methods": [
                {
                    "name": "set_pipeline",
                    "doc": "TODO\n",
                    "args": [
                        {
                            "name": "pipeline",
                            "doc": "TODO\n",
                            "type": "object.render_pipeline"
                        }
                    ]
                },
                {
                    "name": "set_bind_group",
                    "doc": "TODO\n",
                    "args": [
                        {
                            "name": "group_index",
                            "doc": "TODO\n",
                            "type": "uint32"
                        },
                        {
                            "name": "group",
                            "doc": "TODO\n",
                            "type": "object.bind_group",
                            "optional": true
                        },
                        {
                            "name": "dynamic_offsets",
                            "doc": "TODO\n",
                            "type": "array<uint32>",
                            "pointer": "immutable"
                        }
                    ]
                },
                {
                    "name": "draw",
                    "doc": "TODO\n",
                    "args": [
                        {
                            "name": "vertex_count",
                            "doc": "TODO\n",
                            "type": "uint32"
                        },
                        {
                            "name": "instance_count",
                            "doc": "TODO\n",
                            "type": "uint32"
                        },
                        {
                            "name": "first_vertex",
                            "doc": "TODO\n",
                            "type": "uint32"
                        },
                        {
                            "name": "first_instance",
                            "doc": "TODO\n",
                            "type": "uint32"
                        }
                    ]
                },
                {
                    "name": "draw_indexed",
                    "doc": "TODO\n",
                    "args": [
                        {
                            "name": "index_count",
                            "doc": "TODO\n",
                            "type": "uint32"
                        },
                        {
                            "name": "instance_count",
                            "doc": "TODO\n",
                            "type": "uint32"
                        },
                        {
                            "name": "first_index",
                            "doc": "TODO\n",
                            "type": "uint32"
                        },
                        {
                            "name": "base_vertex",
                            "doc": "TODO\n",
                            "type": "int32"
                        },
                        {
                            "name": "first_instance",
                            "doc": "TODO\n",
                            "type": "uint32"
                        }
                    ]
                },
                {
                    "name": "draw_indirect",
                    "doc": "TODO\n",
                    "args": [
                        {
                            "name": "indirect_buffer",
                            "doc": "TODO\n",
                            "type": "object.buffer"
                        },
                        {
                            "name": "indirect_offset",
                            "doc": "TODO\n",
                            "type": "uint64"
                        }
                    ]
                },
                {
                    "name": "draw_indexed_indirect",
                    "doc": "TODO\n",
                    "args": [
                        {
                            "name": "indirect_buffer",
                            "doc": "TODO\n",
                            "type": "object.buffer"
                        },
                        {
                            "name": "indirect_offset",
                            "doc": "TODO\n",
                            "type": "uint64"
                        }
                    ]
                },
                {
                    "name": "insert_debug_marker",
                    "doc": "TODO\n",
                    "args": [
                        {
                            "name": "marker_label",
                            "doc": "TODO\n",
                            "type": "string_with_default_empty"
                        }
                    ]
                },
                {
                    "name": "pop_debug_group",
                    "doc": "TODO\n"
                },
                {
                    "name": "push_debug_group",
                    "doc": "TODO\n",
                    "args": [
                        {
                            "name": "group_label",
                            "doc": "TODO\n",
                            "type": "string_with_default_empty"
                        }
                    ]
                },
                {
                    "name": "set_vertex_buffer",
                    "doc": "TODO\n",
                    "args": [
                        {
                            "name": "slot",
                            "doc": "TODO\n",
                            "type": "uint32"
                        },
                        {
                            "name": "buffer",
                            "doc": "TODO\n",
                            "type": "object.buffer",
                            "optional": true
                        },
                        {
                            "name": "offset",
                            "doc": "TODO\n",
                            "type": "uint64"
                        },
                        {
                            "name": "size",
                            "doc": "TODO\n",
                            "type": "uint64"
                        }
                    ]
                },
                {
                    "name": "set_index_buffer",
                    "doc": "TODO\n",
                    "args": [
                        {
                            "name": "buffer",
                            "doc": "TODO\n",
                            "type": "object.buffer"
                        },
                        {
                            "name": "format",
                            "doc": "TODO\n",
                            "type": "enum.index_format"
                        },
                        {
                            "name": "offset",
                            "doc": "TODO\n",
                            "type": "uint64"
                        },
                        {
                            "name": "size",
                            "doc": "TODO\n",
                            "type": "uint64"
                        }
                    ]
                },
                {
                    "name": "finish",
                    "doc": "TODO\n",
                    "returns": {
                        "doc": "TODO\n",
                        "type": "object.render_bundle",
                        "passed_with_ownership": true
                    },
                    "args": [
                        {
                            "name": "descriptor",
                            "doc": "TODO\n",
                            "type": "struct.render_bundle_descriptor",
                            "pointer": "immutable",
                            "optional": true
                        }
                    ]
                },
                {
                    "name": "set_label",
                    "doc": "TODO\n",
                    "args": [
                        {
                            "name": "label",
                            "doc": "TODO\n",
                            "type": "string_with_default_empty"
                        }
                    ]
                }
            ]
        },
        {
            "name": "render_pass_encoder",
            "doc": "TODO\n",
            "methods": [
                {
                    "name": "set_pipeline",
                    "doc": "TODO\n",
                    "args": [
                        {
                            "name": "pipeline",
                            "doc": "TODO\n",
                            "type": "object.render_pipeline"
                        }
                    ]
                },
                {
                    "name": "set_bind_group",
                    "doc": "TODO\n",
                    "args": [
                        {
                            "name": "group_index",
                            "doc": "TODO\n",
                            "type": "uint32"
                        },
                        {
                            "name": "group",
                            "doc": "TODO\n",
                            "type": "object.bind_group",
                            "optional": true
                        },
                        {
                            "name": "dynamic_offsets",
                            "doc": "TODO\n",
                            "type": "array<uint32>",
                            "pointer": "immutable"
                        }
                    ]
                },
                {
                    "name": "draw",
                    "doc": "TODO\n",
                    "args": [
                        {
                            "name": "vertex_count",
                            "doc": "TODO\n",
                            "type": "uint32"
                        },
                        {
                            "name": "instance_count",
                            "doc": "TODO\n",
                            "type": "uint32"
                        },
                        {
                            "name": "first_vertex",
                            "doc": "TODO\n",
                            "type": "uint32"
                        },
                        {
                            "name": "first_instance",
                            "doc": "TODO\n",
                            "type": "uint32"
                        }
                    ]
                },
                {
                    "name": "draw_indexed",
                    "doc": "TODO\n",
                    "args": [
                        {
                            "name": "index_count",
                            "doc": "TODO\n",
                            "type": "uint32"
                        },
                        {
                            "name": "instance_count",
                            "doc": "TODO\n",
                            "type": "uint32"
                        },
                        {
                            "name": "first_index",
                            "doc": "TODO\n",
                            "type": "uint32"
                        },
                        {
                            "name": "base_vertex",
                            "doc": "TODO\n",
                            "type": "int32"
                        },
                        {
                            "name": "first_instance",
                            "doc": "TODO\n",
                            "type": "uint32"
                        }
                    ]
                },
                {
                    "name": "draw_indirect",
                    "doc": "TODO\n",
                    "args": [
                        {
                            "name": "indirect_buffer",
                            "doc": "TODO\n",
                            "type": "object.buffer"
                        },
                        {
                            "name": "indirect_offset",
                            "doc": "TODO\n",
                            "type": "uint64"
                        }
                    ]
                },
                {
                    "name": "draw_indexed_indirect",
                    "doc": "TODO\n",
                    "args": [
                        {
                            "name": "indirect_buffer",
                            "doc": "TODO\n",
                            "type": "object.buffer"
                        },
                        {
                            "name": "indirect_offset",
                            "doc": "TODO\n",
                            "type": "uint64"
                        }
                    ]
                },
                {
                    "name": "execute_bundles",
                    "doc": "TODO\n",
                    "args": [
                        {
                            "name": "bundles",
                            "doc": "TODO\n",
                            "type": "array<object.render_bundle>",
                            "pointer": "immutable"
                        }
                    ]
                },
                {
                    "name": "insert_debug_marker",
                    "doc": "TODO\n",
                    "args": [
                        {
                            "name": "marker_label",
                            "doc": "TODO\n",
                            "type": "string_with_default_empty"
                        }
                    ]
                },
                {
                    "name": "pop_debug_group",
                    "doc": "TODO\n"
                },
                {
                    "name": "push_debug_group",
                    "doc": "TODO\n",
                    "args": [
                        {
                            "name": "group_label",
                            "doc": "TODO\n",
                            "type": "string_with_default_empty"
                        }
                    ]
                },
                {
                    "name": "set_stencil_reference",
                    "doc": "TODO\n",
                    "args": [
                        {
                            "name": "reference",
                            "doc": "TODO\n",
                            "type": "uint32"
                        }
                    ]
                },
                {
                    "name": "set_blend_constant",
                    "doc": "TODO\n",
                    "args": [
                        {
                            "name": "color",
                            "doc": "TODO\n",
                            "type": "struct.color",
                            "pointer": "immutable"
                        }
                    ]
                },
                {
                    "name": "set_viewport",
                    "doc": "TODO\n",
                    "args": [
                        {
                            "name": "x",
                            "doc": "TODO\n",
                            "type": "float32"
                        },
                        {
                            "name": "y",
                            "doc": "TODO\n",
                            "type": "float32"
                        },
                        {
                            "name": "width",
                            "doc": "TODO\n",
                            "type": "float32"
                        },
                        {
                            "name": "height",
                            "doc": "TODO\n",
                            "type": "float32"
                        },
                        {
                            "name": "min_depth",
                            "doc": "TODO\n",
                            "type": "float32"
                        },
                        {
                            "name": "max_depth",
                            "doc": "TODO\n",
                            "type": "float32"
                        }
                    ]
                },
                {
                    "name": "set_scissor_rect",
                    "doc": "TODO\n",
                    "args": [
                        {
                            "name": "x",
                            "doc": "TODO\n",
                            "type": "uint32"
                        },
                        {
                            "name": "y",
                            "doc": "TODO\n",
                            "type": "uint32"
                        },
                        {
                            "name": "width",
                            "doc": "TODO\n",
                            "type": "uint32"
                        },
                        {
                            "name": "height",
                            "doc": "TODO\n",
                            "type": "uint32"
                        }
                    ]
                },
                {
                    "name": "set_vertex_buffer",
                    "doc": "TODO\n",
                    "args": [
                        {
                            "name": "slot",
                            "doc": "TODO\n",
                            "type": "uint32"
                        },
                        {
                            "name": "buffer",
                            "doc": "TODO\n",
                            "type": "object.buffer",
                            "optional": true
                        },
                        {
                            "name": "offset",
                            "doc": "TODO\n",
                            "type": "uint64"
                        },
                        {
                            "name": "size",
                            "doc": "TODO\n",
                            "type": "uint64"
                        }
                    ]
                },
                {
                    "name": "set_index_buffer",
                    "doc": "TODO\n",
                    "args": [
                        {
                            "name": "buffer",
                            "doc": "TODO\n",
                            "type": "object.buffer"
                        },
                        {
                            "name": "format",
                            "doc": "TODO\n",
                            "type": "enum.index_format"
                        },
                        {
                            "name": "offset",
                            "doc": "TODO\n",
                            "type": "uint64"
                        },
                        {
                            "name": "size",
                            "doc": "TODO\n",
                            "type": "uint64"
                        }
                    ]
                },
                {
                    "name": "begin_occlusion_query",
                    "doc": "TODO\n",
                    "args": [
                        {
                            "name": "query_index",
                            "doc": "TODO\n",
                            "type": "uint32"
                        }
                    ]
                },
                {
                    "name": "end_occlusion_query",
                    "doc": "TODO\n"
                },
                {
                    "name": "end",
                    "doc": "TODO\n"
                },
                {
                    "name": "set_label",
                    "doc": "TODO\n",
                    "args": [
                        {
                            "name": "label",
                            "doc": "TODO\n",
                            "type": "string_with_default_empty"
                        }
                    ]
                }
            ]
        },
        {
            "name": "render_pipeline",
            "doc": "TODO\n",
            "methods": [
                {
                    "name": "get_bind_group_layout",
                    "doc": "TODO\n",
                    "returns": {
                        "doc": "TODO\n",
                        "type": "object.bind_group_layout",
                        "passed_with_ownership": true
                    },
                    "args": [
                        {
                            "name": "group_index",
                            "doc": "TODO\n",
                            "type": "uint32"
                        }
                    ]
                },
                {
                    "name": "set_label",
                    "doc": "TODO\n",
                    "args": [
                        {
                            "name": "label",
                            "doc": "TODO\n",
                            "type": "string_with_default_empty"
                        }
                    ]
                }
            ]
        },
        {
            "name": "sampler",
            "doc": "TODO\n",
            "methods": [
                {
                    "name": "set_label",
                    "doc": "TODO\n",
                    "args": [
                        {
                            "name": "label",
                            "doc": "TODO\n",
                            "type": "string_with_default_empty"
                        }
                    ]
                }
            ]
        },
        {
            "name": "shader_module",
            "doc": "TODO\n",
            "methods": [
                {
                    "name": "get_compilation_info",
                    "doc": "TODO\n",
                    "callback": "callback.compilation_info"
                },
                {
                    "name": "set_label",
                    "doc": "TODO\n",
                    "args": [
                        {
                            "name": "label",
                            "doc": "TODO\n",
                            "type": "string_with_default_empty"
                        }
                    ]
                }
            ]
        },
        {
            "name": "surface",
            "doc": "An object used to continuously present image data to the user, see @ref Surfaces for more details.",
            "methods": [
                {
                    "name": "configure",
                    "doc": "Configures parameters for rendering to `surface`.\nProduces a @ref DeviceError for all content-timeline errors defined by the WebGPU specification.\n\nSee @ref Surface-Configuration for more details.\n",
                    "args": [
                        {
                            "name": "config",
                            "doc": "The new configuration to use.",
                            "type": "struct.surface_configuration",
                            "pointer": "immutable"
                        }
                    ]
                },
                {
                    "name": "get_capabilities",
                    "doc": "Provides information on how `adapter` is able to use `surface`.\nSee @ref Surface-Capabilities for more details.\n",
                    "returns": {
                        "doc": "Indicates if there was an @ref OutStructChainError.",
                        "type": "enum.status"
                    },
                    "args": [
                        {
                            "name": "adapter",
                            "doc": "The @ref WGPUAdapter to get capabilities for presenting to this @ref WGPUSurface.",
                            "type": "object.adapter"
                        },
                        {
                            "name": "capabilities",
                            "doc": "The structure to fill capabilities in.\nIt may contain memory allocations so @ref wgpuSurfaceCapabilitiesFreeMembers must be called to avoid memory leaks.\n",
                            "type": "struct.surface_capabilities",
                            "pointer": "mutable",
                            "passed_with_ownership": true
                        }
                    ]
                },
                {
                    "name": "get_current_texture",
                    "doc": "Returns the @ref WGPUTexture to render to `surface` this frame along with metadata on the frame.\nReturns `NULL` and @ref WGPUSurfaceGetCurrentTextureStatus_Error if the surface is not configured.\n\nSee @ref Surface-Presenting for more details.\n",
                    "args": [
                        {
                            "name": "surface_texture",
                            "doc": "The structure to fill the @ref WGPUTexture and metadata in.",
                            "type": "struct.surface_texture",
                            "pointer": "mutable"
                        }
                    ]
                },
                {
                    "name": "present",
                    "doc": "Shows `surface`'s current texture to the user.\nSee @ref Surface-Presenting for more details.\n",
                    "returns": {
                        "doc": "Returns @ref WGPUStatus_Error if the surface doesn't have a current texture.\n",
                        "type": "enum.status"
                    }
                },
                {
                    "name": "unconfigure",
                    "doc": "Removes the configuration for `surface`.\nSee @ref Surface-Configuration for more details.\n"
                },
                {
                    "name": "set_label",
                    "doc": "Modifies the label used to refer to `surface`.",
                    "args": [
                        {
                            "name": "label",
                            "doc": "The new label.",
                            "type": "string_with_default_empty"
                        }
                    ]
                }
            ]
        },
        {
            "name": "texture",
            "doc": "TODO\n",
            "methods": [
                {
                    "name": "create_view",
                    "doc": "TODO\n",
                    "returns": {
                        "doc": "TODO\n",
                        "type": "object.texture_view",
                        "passed_with_ownership": true
                    },
                    "args": [
                        {
                            "name": "descriptor",
                            "doc": "TODO\n",
                            "type": "struct.texture_view_descriptor",
                            "pointer": "immutable",
                            "optional": true
                        }
                    ]
                },
                {
                    "name": "set_label",
                    "doc": "TODO\n",
                    "args": [
                        {
                            "name": "label",
                            "doc": "TODO\n",
                            "type": "string_with_default_empty"
                        }
                    ]
                },
                {
                    "name": "get_width",
                    "doc": "TODO\n",
                    "returns": {
                        "doc": "TODO\n",
                        "type": "uint32"
                    }
                },
                {
                    "name": "get_height",
                    "doc": "TODO\n",
                    "returns": {
                        "doc": "TODO\n",
                        "type": "uint32"
                    }
                },
                {
                    "name": "get_depth_or_array_layers",
                    "doc": "TODO\n",
                    "returns": {
                        "doc": "TODO\n",
                        "type": "uint32"
                    }
                },
                {
                    "name": "get_mip_level_count",
                    "doc": "TODO\n",
                    "returns": {
                        "doc": "TODO\n",
                        "type": "uint32"
                    }
                },
                {
                    "name": "get_sample_count",
                    "doc": "TODO\n",
                    "returns": {
                        "doc": "TODO\n",
                        "type": "uint32"
                    }
                },
                {
                    "name": "get_dimension",
                    "doc": "TODO\n",
                    "returns": {
                        "doc": "TODO\n",
                        "type": "enum.texture_dimension"
                    }
                },
                {
                    "name": "get_format",
                    "doc": "TODO\n",
                    "returns": {
                        "doc": "TODO\n",
                        "type": "enum.texture_format"
                    }
                },
                {
                    "name": "get_usage",
                    "doc": "TODO\n",
                    "returns": {
                        "doc": "TODO\n",
                        "type": "bitflag.texture_usage"
                    }
                },
                {
                    "name": "destroy",
                    "doc": "TODO\n"
                }
            ]
        },
        {
            "name": "texture_view",
            "doc": "TODO\n",
            "methods": [
                {
                    "name": "set_label",
                    "doc": "TODO\n",
                    "args": [
                        {
                            "name": "label",
                            "doc": "TODO\n",
                            "type": "string_with_default_empty"
                        }
                    ]
                }
            ]
        }
    ]
}